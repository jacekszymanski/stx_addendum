<haxe>
	<class path="Array" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="EReg" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/EReg.hx">
		<match public="1" set="method" line="59">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="74">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<replace public="1" set="method" line="174">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="192">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="48">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Enum" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Imports" params="" file="docs/Imports.hx"><main set="method" line="5" static="1">
	<f a=""><x path="Void"/></f>
	<meta><m n=":keep"/></meta>
</main></class>
	<class path="IntIterator" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<hasNext public="1" set="method" line="52">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Returns true if the iterator has other items, false otherwise.</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Moves to the next item of the iterator.

		If this is called while hasNext() is false, the result is unspecified.</haxe_doc>
		</next>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through it's special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="/cygdrive/c/world/prj/haxe/haxe/std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="/cygdrive/c/world/prj/haxe/haxe/std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter,
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows,
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result
		is -`v`.

		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is
		POSITIVE_INFINITY.

		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`,
		in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`,
		in radians.

		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of
		two specified numbers, in radians.

		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY,
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.

		exp(1.0) is approximately 2.718281828459.

		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.

		This is the mathematical inverse operation of exp,
		i.e. `log(exp(v)) == v` always holds.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.

		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0,
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" get="inline" set="null" line="260" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></ffloor>
		<fceil public="1" get="inline" set="null" line="264" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fceil>
		<fround public="1" get="inline" set="null" line="268" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false.
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="Reflect" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`.

		If `o` has no field named `field`, this function is only guaranteed to
		work for anonymous structures.

		If `o` or `field` are null, the result is unspecified.

		(As3) If used on a property field, the setter will be invoked. It is
		not possible to set the value directly.</haxe_doc>
		</setField>
		<getProperty public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares `a` and `b`.

		If `a` is less than `b`, the result is negative. If `b` is less than
		`a`, the result is positive. If `a` and `b` are equal, the result is 0.

		This function is only defined if `a` and `b` are of the same type.

		If that type is a function, the result is unspecified and
		`Reflect.compareMethods` should be used instead.

		For all other types, the result is 0 if `a` and `b` are equal. If they
		are not equal, the result depends on the type and is negative if:

		- Numeric types: a is less than b
		- String: a is lexicographically less than b
		- Other: unspecified

		If `a` and `b` are null, the result is 0. If only one of them is null,
		the result is unspecified.</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares the functions `f1` and `f2`.

		If `f1` or `f2` are not functions, the result is unspecified.

		Otherwise the result is true if `f1` and the `f2` are physically equal,
		false otherwise.</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<isEnumValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `v` is an enum value.

		The result is true if `v` is of type EnumValue, i.e. an enum
		constructor.

		Otherwise, including if `v` is null, the result is false.</haxe_doc>
		</isEnumValue>
		<deleteField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the field named `field` from structure `o`.

		This method is only guaranteed to work on anonymous structures.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>Copies the fields of structure `o`.

		This is only guaranteed to work on anonymous structures.

		If `o` is null, the result is unspecified.</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method">
	<f a="f">
		<f a="">
			<c path="Array"><d/></c>
			<x path="Void"/>
		</f>
		<d/>
	</f>
	<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
</makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
	</class>
	<class path="Std" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
	</class>
	<abstract path="Void" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="StringTools" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/StringTools.hx">
		<htmlEscape public="1" set="method" line="101" static="1">
			<f a="s:?quotes" v=":null">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="120" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Unescapes HTML special characters of the string `s`.

		This is the inverse operation to htmlEscape, i.e. the following always
		holds: htmlUnescape(htmlEscape(s)) == s

		The replacements follow:

		- `&amp;` becomes `&`
		- `&lt;` becomes `<`
		- `&gt;` becomes `>`
		- `&quot;` becomes `"`
		- `&#039;` becomes `'`]]></haxe_doc>
		</htmlUnescape>
		<isSpace public="1" set="method" line="169" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="186" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="211" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="233" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<replace public="1" set="method" line="298" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="320" static="1">
			<f a="n:?digits" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="ValueType" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
		<haxe_doc>The diffent possible runtime types of a value.</haxe_doc>
	</enum>
	<class path="Type" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumIndex>
		<allEnums public="1" params="T" set="method" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
	</class>
	<enum path="haxe.StackItem" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="123" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.Function" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/IntMap.hx" extern="1">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<x path="Int"/>
				<c path="haxe.ds.IntMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.IntMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/ObjectMap.hx" extern="1">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="haxe.ds.ObjectMap.K"/>
				<c path="haxe.ds.ObjectMap.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<enum path="haxe.ds.Option" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="/cygdrive/c/world/prj/haxe/haxe/std/haxe/ds/StringMap.hx" extern="1">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
	</class>
	<typedef path="stx.Any" params="" file="src/main/haxe/stx/Anys.hx" module="stx.Anys"><d/></typedef>
	<class path="stx.Anys" params="" file="src/main/haxe/stx/Anys.hx">
		<affect public="1" params="T" set="method" line="40" static="1">
			<f a="t:f">
				<c path="affect.T"/>
				<f a="">
					<c path="affect.T"/>
					<x path="Void"/>
				</f>
				<c path="affect.T"/>
			</f>
			<haxe_doc>Takes a value, applies a Function1 to the value and returns the original value.
	  @param 	a			Any value.
	  @param 	f			Modifier function.
	  @return 	a			The input value after f(a).</haxe_doc>
		</affect>
		<toThunk public="1" params="T" set="method" line="51" static="1">
			<f a="t">
				<c path="toThunk.T"/>
				<t path="stx.types.Thunk"><c path="toThunk.T"/></t>
			</f>
			<haxe_doc>Returns a Thunk that will always return the input value t.
	  @param 		t		Any value
	  @return 				A function that will return the input value t.</haxe_doc>
		</toThunk>
		<use public="1" params="A:B" set="method" line="59" static="1">
			<f a="v:fn">
				<c path="use.A"/>
				<f a="">
					<c path="use.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Applies a function 'f' to a valuse of any Type.</haxe_doc>
		</use>
		<to public="1" params="A:B" set="method" line="68" static="1">
			<f a="a:f">
				<c path="to.A"/>
				<f a="">
					<c path="to.A"/>
					<c path="to.B"/>
				</f>
				<c path="to.B"/>
			</f>
			<haxe_doc>Applies Function1 f to value a and returns the result.
    @param      a     Any value.
    @param      f     Modifier function.
    @usage a.into( function(x) return ... )</haxe_doc>
		</to>
		<exchange public="1" params="A:B" set="method" line="74" static="1">
			<f a="a:b">
				<c path="exchange.A"/>
				<c path="exchange.B"/>
				<c path="exchange.B"/>
			</f>
			<haxe_doc>Drops value a, returns b</haxe_doc>
		</exchange>
		<orIfNull public="1" params="A" set="method" line="80" static="1">
			<f a="v:fn">
				<c path="orIfNull.A"/>
				<t path="stx.types.Thunk"><c path="orIfNull.A"/></t>
				<c path="orIfNull.A"/>
			</f>
			<haxe_doc>Check if ´v´ is null, returns result of ´fn´ if not.</haxe_doc>
		</orIfNull>
		<equals public="1" params="T1:T2" set="method" line="83" static="1"><f a="value0:value1:?func" v="::null">
	<c path="equals.T1"/>
	<c path="equals.T2"/>
	<f a=":">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<x path="Bool"/>
	</f>
	<x path="Bool"/>
</f></equals>
		<getName public="1" params="T" set="method" line="103" static="1"><f a="value">
	<c path="getName.T"/>
	<c path="String"/>
</f></getName>
		<getSimpleName public="1" params="T" set="method" line="117" static="1"><f a="value">
	<c path="getSimpleName.T"/>
	<c path="String"/>
</f></getSimpleName>
		<getClass public="1" params="T" set="method" line="132" static="1"><f a="value">
	<c path="getClass.T"/>
	<x path="Class"><c path="getClass.T"/></x>
</f></getClass>
		<isTypeOf public="1" params="T" get="inline" set="null" line="134" static="1"><f a="value:possible">
	<c path="isTypeOf.T"/>
	<c path="String"/>
	<x path="Bool"/>
</f></isTypeOf>
		<isObject public="1" params="T" set="method" line="149" static="1"><f a="value">
	<c path="isObject.T"/>
	<x path="Bool"/>
</f></isObject>
		<isNull public="1" params="T" set="method" line="150" static="1"><f a="value">
	<c path="isNull.T"/>
	<x path="Bool"/>
</f></isNull>
		<isInt public="1" params="T" set="method" line="151" static="1"><f a="value">
	<c path="isInt.T"/>
	<x path="Bool"/>
</f></isInt>
		<isFunction public="1" params="T" set="method" line="152" static="1"><f a="value">
	<c path="isFunction.T"/>
	<x path="Bool"/>
</f></isFunction>
		<isFloat public="1" params="T" set="method" line="153" static="1"><f a="value">
	<c path="isFloat.T"/>
	<x path="Bool"/>
</f></isFloat>
		<isEnum public="1" params="T" set="method" line="154" static="1"><f a="value">
	<c path="isEnum.T"/>
	<x path="Bool"/>
</f></isEnum>
		<isClass public="1" params="T" set="method" line="155" static="1"><f a="value">
	<c path="isClass.T"/>
	<x path="Bool"/>
</f></isClass>
		<isBoolean public="1" params="T" set="method" line="156" static="1"><f a="value">
	<c path="isBoolean.T"/>
	<x path="Bool"/>
</f></isBoolean>
		<isPrimitive public="1" params="T" set="method" line="158" static="1"><f a="v">
	<c path="isPrimitive.T"/>
	<x path="Bool"/>
</f></isPrimitive>
		<asInstanceOf public="1" params="T:R" set="method" line="164" static="1"><f a="value:possible">
	<c path="asInstanceOf.T"/>
	<x path="Class"><c path="asInstanceOf.R"/></x>
	<c path="asInstanceOf.R"/>
</f></asInstanceOf>
		<isInstanceOf public="1" params="T" set="method" line="169" static="1"><f a="value:possible">
	<c path="isInstanceOf.T"/>
	<t path="stx.Any"/>
	<x path="Bool"/>
</f></isInstanceOf>
		<isValueOf public="1" params="T" set="method" line="202" static="1"><f a="value:possible">
	<c path="isValueOf.T"/>
	<t path="stx.Any"/>
	<x path="Bool"/>
</f></isValueOf>
		<toBool public="1" params="T" set="method" line="211" static="1"><f a="value">
	<t path="Null"><c path="toBool.T"/></t>
	<x path="Bool"/>
</f></toBool>
		<toString public="1" params="T" set="method" line="221" static="1"><f a="value:?func" v=":null">
	<c path="toString.T"/>
	<f a="">
		<c path="toString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></toString>
		<__interfLoop set="method" line="226" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<dive public="1" params="A:B" set="method" line="242" static="1">
			<f a="o:path">
				<c path="dive.A"/>
				<x path="stx.Path"/>
				<e path="stx.Chunk"><c path="dive.B"/></e>
			</f>
			<haxe_doc>Dive into an object using 'a:b:c' notation, returns an error with the unfound token in the path if the operation fails.</haxe_doc>
		</dive>
		<diveOption public="1" params="A:B" set="method" line="271" static="1">
			<f a="o:path">
				<c path="diveOption.A"/>
				<x path="stx.Path"/>
				<e path="stx.Chunk"><c path="diveOption.B"/></e>
			</f>
			<haxe_doc>Dive into an object using 'a:b:c' notation, returns a Nil if the operation fails</haxe_doc>
		</diveOption>
		<gather public="1" set="method" line="297" static="1">
			<f a="val:keys">
				<d/>
				<c path="Array"><c path="String"/></c>
				<t path="stx.types.Upshot"><d/></t>
			</f>
			<haxe_doc>Returns the values in `val` specified in `keys`, producing an error with the unfound keys if the operation fails.</haxe_doc>
		</gather>
		<set public="1" params="V" set="method" line="329" static="1">
			<f a="data:path:v:?safe" v=":::true">
				<c path="set.V"/>
				<x path="stx.Path"/>
				<d/>
				<x path="Bool"/>
				<c path="set.V"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Set `v` in `data` at `path` using an `Path`, if `safe` is true, will not set on a previously existing value</haxe_doc>
		</set>
		<replace public="1" params="V" set="method" line="355" static="1">
			<f a="data:path:v">
				<c path="replace.V"/>
				<x path="stx.Path"/>
				<d/>
				<c path="replace.V"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Call `set` with `safe=false`.</haxe_doc>
		</replace>
		<del public="1" params="T" set="method" line="361" static="1">
			<f a="data:key">
				<c path="del.T"/>
				<x path="stx.Path"/>
				<c path="del.T"/>
			</f>
			<haxe_doc>Delete value at `key` in `data` using an `Path`.</haxe_doc>
		</del>
		<constructWith public="1" params="O:T" set="method" line="387" static="1">
			<f a="type:y">
				<x path="Class"><c path="constructWith.T"/></x>
				<c path="constructWith.O"/>
				<t path="stx.types.Upshot"><c path="constructWith.T"/></t>
			</f>
			<haxe_doc>Construct `type` filled with fields of `y` will fail if `y` contains a superset (i.e, extra fields).</haxe_doc>
		</constructWith>
		<has public="1" set="method" line="414" static="1">
			<f a="o:path">
				<d/>
				<x path="stx.Path"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks that a value at `path` exists on `o`.</haxe_doc>
		</has>
	</class>
	<class path="stx.Arrays" params="" file="src/main/haxe/stx/Arrays.hx">
		<fold public="1" params="A:Z" set="method" line="28" static="1"><f a="arr:zero:unit:plus">
	<c path="Array"><c path="fold.A"/></c>
	<t path="stx.types.Thunk"><c path="fold.Z"/></t>
	<f a="">
		<c path="fold.A"/>
		<c path="fold.Z"/>
	</f>
	<f a=":">
		<c path="fold.Z"/>
		<c path="fold.Z"/>
		<c path="fold.Z"/>
	</f>
	<c path="fold.Z"/>
</f></fold>
		<filter public="1" params="T" set="method" line="39" static="1">
			<f a="a:f">
				<c path="Array"><c path="filter.T"/></c>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<haxe_doc>Call f on each element in a, returning a collection where f(e) = true.</haxe_doc>
		</filter>
		<isDefined public="1" params="T" set="method" line="50" static="1">
			<f a="a">
				<c path="Array"><c path="isDefined.T"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Return true if length is greater than 1.</haxe_doc>
		</isDefined>
		<each public="1" params="T" set="method" line="56" static="1">
			<f a="a:f">
				<c path="Array"><c path="each.T"/></c>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<c path="Array"><c path="each.T"/></c>
			</f>
			<haxe_doc>Apply f to each element in a.</haxe_doc>
		</each>
		<map public="1" params="T:S" get="inline" set="null" line="64" static="1">
			<f a="a:f">
				<c path="Array"><c path="map.T"/></c>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Applies function f to each element in a, returning the results.</haxe_doc>
		</map>
		<foldLeft public="1" params="T:Z" set="method" line="79" static="1">
			<f a="a:z:f">
				<c path="Array"><c path="foldLeft.T"/></c>
				<c path="foldLeft.Z"/>
				<f a=":">
					<c path="foldLeft.Z"/>
					<c path="foldLeft.T"/>
					<c path="foldLeft.Z"/>
				</f>
				<c path="foldLeft.Z"/>
			</f>
			<haxe_doc>Using starting var z, run f on each element, storing the result, and passing that result 
    into the next call:

        [1,2,3,4,5].foldLeft( 100, function(init,v) return init + v ));//(((((100 + 1) + 2) + 3) + 4) + 5)</haxe_doc>
		</foldLeft>
		<create public="1" params="A" set="method" line="89" static="1">
			<f a=""><c path="Array"><c path="create.A"/></c></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>create an empty Array.</haxe_doc>
		</create>
		<unit public="1" params="A" set="method" line="95" static="1">
			<f a=""><c path="Array"><c path="unit.A"/></c></f>
			<haxe_doc>unit function.</haxe_doc>
		</unit>
		<one public="1" params="A" set="method" line="101" static="1">
			<f a="v">
				<c path="one.A"/>
				<c path="Array"><c path="one.A"/></c>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>create an Array with the element `v`.</haxe_doc>
		</one>
		<pure public="1" params="A" set="method" line="107" static="1">
			<f a="v">
				<c path="pure.A"/>
				<c path="Array"><c path="pure.A"/></c>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>create an Array with the element `v`.</haxe_doc>
		</pure>
		<set public="1" params="A" set="method" line="113" static="1">
			<f a="arr:i:v">
				<c path="Array"><c path="set.A"/></c>
				<x path="Int"/>
				<c path="set.A"/>
				<c path="Array"><c path="set.A"/></c>
			</f>
			<haxe_doc>set `v` at index `i` of `arr`.</haxe_doc>
		</set>
		<get public="1" params="A" set="method" line="121" static="1">
			<f a="arr:i">
				<c path="Array"><c path="get.A"/></c>
				<x path="Int"/>
				<c path="get.A"/>
			</f>
			<haxe_doc>return element of `arr` at index `i`</haxe_doc>
		</get>
		<foldLeft1 public="1" params="T" set="method" line="127" static="1">
			<f a="arr:mapper">
				<c path="Array"><c path="foldLeft1.T"/></c>
				<f a=":">
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
				</f>
				<c path="foldLeft1.T"/>
			</f>
			<haxe_doc>Performs a `foldLeft`, using the first value of `arr` as the `memo` value.</haxe_doc>
		</foldLeft1>
		<partition public="1" params="T" set="method" line="140" static="1">
			<f a="arr:f">
				<c path="Array"><c path="partition.T"/></c>
				<f a="">
					<c path="partition.T"/>
					<x path="Bool"/>
				</f>
				<x path="tink.core.Pair">
					<c path="Array"><c path="partition.T"/></c>
					<c path="Array"><c path="partition.T"/></c>
				</x>
			</f>
			<meta><m n="params">
	<e>"The array to partition"</e>
	<e>"A predicate"</e>
</m></meta>
			<haxe_doc>Produces a `Pair` containing two `Array`, the left being elements where `f(e) == true`, the rest in the right.</haxe_doc>
		</partition>
		<partitionWhile public="1" params="T" set="method" line="156" static="1">
			<f a="arr:f">
				<c path="Array"><c path="partitionWhile.T"/></c>
				<f a="">
					<c path="partitionWhile.T"/>
					<x path="Bool"/>
				</f>
				<x path="tink.core.Pair">
					<c path="Array"><c path="partitionWhile.T"/></c>
					<c path="Array"><c path="partitionWhile.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Pair` containing two `Arrays`, the difference from partition being that after the predicate
    returns true once, the rest of the elements will be in the right hand of the tuple, regardless of
    the result of the predicate.</haxe_doc>
		</partitionWhile>
		<mapTo public="1" params="A:B" set="method" line="176" static="1">
			<f a="src:dest:f">
				<c path="Array"><c path="mapTo.A"/></c>
				<c path="Array"><c path="mapTo.B"/></c>
				<f a="">
					<c path="mapTo.A"/>
					<c path="mapTo.B"/>
				</f>
				<c path="Array"><c path="mapTo.B"/></c>
			</f>
			<haxe_doc>Performs a `map` and delivers the results to the specified `dest`.</haxe_doc>
		</mapTo>
		<flatten public="1" params="T" set="method" line="185" static="1">
			<f a="arrs">
				<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>Produces an Array from an Array of Arrays.</haxe_doc>
		</flatten>
		<interleave public="1" params="T" set="method" line="200" static="1">
			<f a="alls">
				<c path="Array"><c path="Array"><c path="interleave.T"/></c></c>
				<c path="Array"><c path="interleave.T"/></c>
			</f>
			<haxe_doc>Weaves an `Array` of arrays so that `[ array0[0] , array1[0] ... arrayn[0] , array0[1], array1[1] ... ]`
   Continues to operate to the length of the shortest array, and drops the rest of the elements.</haxe_doc>
		</interleave>
		<flatMap public="1" params="T:S" set="method" line="223" static="1">
			<f a="a:f">
				<c path="Array"><c path="flatMap.T"/></c>
				<f a="">
					<c path="flatMap.T"/>
					<t path="Iterable"><c path="flatMap.S"/></t>
				</f>
				<c path="Array"><c path="flatMap.S"/></c>
			</f>
			<haxe_doc>Applies function f to each element in a, appending and returning the results.</haxe_doc>
		</flatMap>
		<flatMapTo public="1" params="A:B" set="method" line="235" static="1">
			<f a="src:dest:f">
				<c path="Array"><c path="flatMapTo.A"/></c>
				<c path="Array"><c path="flatMapTo.B"/></c>
				<f a="">
					<c path="flatMapTo.A"/>
					<c path="Array"><c path="flatMapTo.B"/></c>
				</f>
				<c path="Array"><c path="flatMapTo.B"/></c>
			</f>
			<haxe_doc>Performs a `flatMap` and delivers the reuslts to `dest`.</haxe_doc>
		</flatMapTo>
		<count public="1" params="T" set="method" line="247" static="1">
			<f a="arr:f">
				<c path="Array"><c path="count.T"/></c>
				<f a="">
					<c path="count.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts some property of the elements of `arr` using a predicate. For the size of the Array @see `size()`</haxe_doc>
		</count>
		<countWhile public="1" params="T" set="method" line="255" static="1">
			<f a="arr:f">
				<c path="Array"><c path="countWhile.T"/></c>
				<f a="">
					<c path="countWhile.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts some property of the elements of `arr` until the first `false` is returned from the predicate</haxe_doc>
		</countWhile>
		<scanl public="1" params="T" set="method" line="277" static="1">
			<f a="arr:init:f">
				<c path="Array"><c path="scanl.T"/></c>
				<c path="scanl.T"/>
				<f a=":">
					<c path="scanl.T"/>
					<c path="scanl.T"/>
					<c path="scanl.T"/>
				</f>
				<c path="Array"><c path="scanl.T"/></c>
			</f>
			<haxe_doc>Takes an initial value which is passed to function `f` along with each element
    one by one, accumulating the results.
    f(next,memo)</haxe_doc>
		</scanl>
		<scanr public="1" params="T" set="method" line="289" static="1">
			<f a="arr:init:f">
				<c path="Array"><c path="scanr.T"/></c>
				<c path="scanr.T"/>
				<f a=":">
					<c path="scanr.T"/>
					<c path="scanr.T"/>
					<c path="scanr.T"/>
				</f>
				<c path="Array"><c path="scanr.T"/></c>
			</f>
			<haxe_doc>As `scanl` but from the end of the Array.</haxe_doc>
		</scanr>
		<scanl1 public="1" params="T" set="method" line="297" static="1">
			<f a="arr:f">
				<c path="Array"><c path="scanl1.T"/></c>
				<f a=":">
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
				</f>
				<c path="Array"><c path="scanl1.T"/></c>
			</f>
			<haxe_doc>As scanl, but using the first element as the second parameter of `f`</haxe_doc>
		</scanl1>
		<scanr1 public="1" params="T" set="method" line="311" static="1">
			<f a="arr:f">
				<c path="Array"><c path="scanr1.T"/></c>
				<f a=":">
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
				</f>
				<c path="Array"><c path="scanr1.T"/></c>
			</f>
			<haxe_doc>As scanr, but using the first element as the second parameter of `f`</haxe_doc>
		</scanr1>
		<elements public="1" params="T" set="method" line="319" static="1">
			<f a="arr">
				<c path="Array"><c path="elements.T"/></c>
				<t path="Iterable"><c path="elements.T"/></t>
			</f>
			<haxe_doc>Returns the Array cast as an Iterable.</haxe_doc>
		</elements>
		<append public="1" params="T" set="method" line="325" static="1">
			<f a="arr:i">
				<c path="Array"><c path="append.T"/></c>
				<t path="Iterable"><c path="append.T"/></t>
				<c path="Array"><c path="append.T"/></c>
			</f>
			<haxe_doc>Appends the elements of `i` to `arr`</haxe_doc>
		</append>
		<isEmpty public="1" params="T" set="method" line="336" static="1">
			<f a="arr">
				<c path="Array"><c path="isEmpty.T"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if the Array is empty, `false` otherwise</haxe_doc>
		</isEmpty>
		<containsValues public="1" params="T" set="method" line="342" static="1">
			<f a="arr">
				<c path="Array"><c path="containsValues.T"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if the Array is empty, `false` otherwise</haxe_doc>
		</containsValues>
		<search public="1" params="T" set="method" line="351" static="1">
			<f a="arr:f">
				<c path="Array"><c path="search.T"/></c>
				<f a="">
					<c path="search.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="search.T"/></e>
			</f>
			<haxe_doc>Produces an `Option.Some(element)` the first time the predicate returns `true`,
    `None` otherwise.</haxe_doc>
		</search>
		<find public="1" params="T" set="method" line="366" static="1">
			<f a="arr:v">
				<c path="Array"><c path="find.T"/></c>
				<c path="find.T"/>
				<e path="haxe.ds.Option"><c path="find.T"/></e>
			</f>
			<haxe_doc>searches for `v` in `arr` using a predicate from `stx.Equal`</haxe_doc>
		</find>
		<findIndexOf public="1" params="T" set="method" line="373" static="1">
			<f a="arr:obj">
				<c path="Array"><c path="findIndexOf.T"/></c>
				<c path="findIndexOf.T"/>
				<e path="haxe.ds.Option"><x path="Int"/></e>
			</f>
			<haxe_doc>Returns an `Option.Some(index)` if an object reference is contained in `arr`, `None` otherwise.</haxe_doc>
		</findIndexOf>
		<difference public="1" params="T" set="method" line="384" static="1">
			<f a="a:b:eq">
				<c path="Array"><c path="difference.T"/></c>
				<c path="Array"><c path="difference.T"/></c>
				<f a=":">
					<c path="difference.T"/>
					<c path="difference.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="difference.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are not elements of b.
    If a contains duplicates, the resulting Array contains duplicates.</haxe_doc>
		</difference>
		<shuffle public="1" params="T" set="method" line="391" static="1"><f a="arr">
	<c path="Array"><c path="shuffle.T"/></c>
	<c path="Array"><c path="shuffle.T"/></c>
</f></shuffle>
		<union public="1" params="T" set="method" line="406" static="1">
			<f a="a:b:eq">
				<c path="Array"><c path="union.T"/></c>
				<c path="Array"><c path="union.T"/></c>
				<f a=":">
					<c path="union.T"/>
					<c path="union.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="union.T"/></c>
			</f>
			<haxe_doc>Returns an Array that contains all elements from a which are also elements of b.
    If a contains duplicates, so will the result.</haxe_doc>
		</union>
		<all public="1" params="T" set="method" line="421" static="1">
			<f a="arr:f">
				<c path="Array"><c path="all.T"/></c>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if the predicate returns `true` for all elements, `false` otherwise.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="432" static="1">
			<f a="arr:f">
				<c path="Array"><c path="any.T"/></c>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if the predicate returns `true` for *any* element, `false` otherwise.</haxe_doc>
		</any>
		<has public="1" params="T" set="method" line="443" static="1">
			<f a="iter:value:?eq" v="::null">
				<c path="Array"><c path="has.T"/></c>
				<c path="has.T"/>
				<f a=":">
					<c path="has.T"/>
					<c path="has.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if any `eq` returns true, using `value`.</haxe_doc>
		</has>
		<exists public="1" params="T" set="method" line="453" static="1">
			<f a="arr:f">
				<c path="Array"><c path="exists.T"/></c>
				<f a="">
					<c path="exists.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if a value is contained in `arr` using a predicate.</haxe_doc>
		</exists>
		<existsP public="1" params="T" set="method" line="462" static="1">
			<f a="arr:ref:f">
				<c path="Array"><c path="existsP.T"/></c>
				<c path="existsP.T"/>
				<f a=":">
					<c path="existsP.T"/>
					<c path="existsP.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>As with `exists` but taking a second parameter in the predicate specified by `ref`</haxe_doc>
		</existsP>
		<nubBy public="1" params="T" set="method" line="475" static="1">
			<f a="arr:f">
				<c path="Array"><c path="nubBy.T"/></c>
				<f a=":">
					<c path="nubBy.T"/>
					<c path="nubBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="nubBy.T"/></c>
			</f>
			<haxe_doc>Produces an Array with no duplicate elements. Equality of the elements is determined by `f`.</haxe_doc>
		</nubBy>
		<nub public="1" params="T" set="method" line="488" static="1">
			<f a="arr">
				<c path="Array"><c path="nub.T"/></c>
				<c path="Array"><c path="nub.T"/></c>
			</f>
			<haxe_doc>Produces an Array with no duplicate elements by comparing each element to all others.</haxe_doc>
		</nub>
		<intersectBy public="1" params="T" set="method" line="500" static="1">
			<f a="arr1:arr2:f">
				<c path="Array"><c path="intersectBy.T"/></c>
				<c path="Array"><c path="intersectBy.T"/></c>
				<f a=":">
					<c path="intersectBy.T"/>
					<c path="intersectBy.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="intersectBy.T"/></c>
			</f>
			<haxe_doc>Intersects two Arrays, determining equality by `f`.</haxe_doc>
		</intersectBy>
		<intersect public="1" params="T" set="method" line="508" static="1">
			<f a="arr1:arr2">
				<c path="Array"><c path="intersect.T"/></c>
				<c path="Array"><c path="intersect.T"/></c>
				<c path="Array"><c path="intersect.T"/></c>
			</f>
			<haxe_doc>Produces an Array of elements found in both `arr` and `arr2`.</haxe_doc>
		</intersect>
		<splitAt public="1" params="T" set="method" line="514" static="1">
			<f a="srcArr:index">
				<c path="Array"><c path="splitAt.T"/></c>
				<x path="Int"/>
				<x path="tink.core.Pair">
					<c path="Array"><c path="splitAt.T"/></c>
					<c path="Array"><c path="splitAt.T"/></c>
				</x>
			</f>
			<haxe_doc>Produces a `Pair`, on the left those elements before `index`, on the right those elements on or after.</haxe_doc>
		</splitAt>
		<indexOf public="1" params="T" set="method" line="520" static="1">
			<f a="a:t">
				<c path="Array"><c path="indexOf.T"/></c>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces the index of element `t`. For a function producing an `Option`, see `findIndexOf`.</haxe_doc>
		</indexOf>
		<withIndex public="1" params="A" set="method" line="534" static="1">
			<f a="a">
				<c path="Array"><c path="withIndex.A"/></c>
				<c path="Array"><x path="tink.core.Pair">
	<c path="withIndex.A"/>
	<x path="Int"/>
</x></c>
			</f>
			<haxe_doc>Produces an Array of Pair containing the value and it's index.</haxe_doc>
		</withIndex>
		<mapWithIndex public="1" params="T:S" set="method" line="544" static="1">
			<f a="a:f">
				<c path="Array"><c path="mapWithIndex.T"/></c>
				<f a=":">
					<c path="mapWithIndex.T"/>
					<x path="Int"/>
					<c path="mapWithIndex.S"/>
				</f>
				<c path="Array"><c path="mapWithIndex.S"/></c>
			</f>
			<haxe_doc>Performs a `map`, taking element index as a second parameter of `f`</haxe_doc>
		</mapWithIndex>
		<foldRight public="1" params="T:Z" set="method" line="554" static="1">
			<f a="a:z:f">
				<c path="Array"><c path="foldRight.T"/></c>
				<c path="foldRight.Z"/>
				<f a=":">
					<c path="foldRight.T"/>
					<c path="foldRight.Z"/>
					<c path="foldRight.Z"/>
				</f>
				<c path="foldRight.Z"/>
			</f>
			<haxe_doc>As with `foldLeft` but working from the right hand side.</haxe_doc>
		</foldRight>
		<zip public="1" params="A:B" set="method" line="568" static="1">
			<f a="a:b">
				<c path="Array"><c path="zip.A"/></c>
				<c path="Array"><c path="zip.B"/></c>
				<c path="Array"><x path="tink.core.Pair">
	<c path="zip.A"/>
	<c path="zip.B"/>
</x></c>
			</f>
			<haxe_doc>Produces an `Array` of `Pair` where `Pair.t2(a[n],b[n]).`</haxe_doc>
		</zip>
		<zipWith public="1" params="A:B:C" set="method" line="574" static="1">
			<f a="a:b:f">
				<c path="Array"><c path="zipWith.A"/></c>
				<c path="Array"><c path="zipWith.B"/></c>
				<f a=":">
					<c path="zipWith.A"/>
					<c path="zipWith.B"/>
					<c path="zipWith.C"/>
				</f>
				<c path="Array"><c path="zipWith.C"/></c>
			</f>
			<haxe_doc>Produces an `Array` of the result of `f` where the left parameter is `a[n]`, and the right: `b[n]`</haxe_doc>
		</zipWith>
		<zipWithIndex public="1" params="A" set="method" line="588" static="1">
			<f a="a">
				<c path="Array"><c path="zipWithIndex.A"/></c>
				<c path="Array"><x path="tink.core.Pair">
	<c path="zipWithIndex.A"/>
	<x path="Int"/>
</x></c>
			</f>
			<haxe_doc>Performs a `zip` where the resulting `Pair` has the element on the left, and it's index on the right</haxe_doc>
		</zipWithIndex>
		<zipWithIndexWith public="1" params="A:B" set="method" line="594" static="1">
			<f a="a:f">
				<c path="Array"><c path="zipWithIndexWith.A"/></c>
				<f a=":">
					<c path="zipWithIndexWith.A"/>
					<x path="Int"/>
					<c path="zipWithIndexWith.B"/>
				</f>
				<c path="Array"><c path="zipWithIndexWith.B"/></c>
			</f>
			<haxe_doc>Performs a `zip` with the right hand parameter is the index of the element.</haxe_doc>
		</zipWithIndexWith>
		<add public="1" params="T" set="method" line="607" static="1">
			<f a="a:t">
				<c path="Array"><c path="add.T"/></c>
				<c path="add.T"/>
				<c path="Array"><c path="add.T"/></c>
			</f>
			<haxe_doc>Adds a single element to the end of the Array.</haxe_doc>
		</add>
		<cons public="1" params="T" set="method" line="617" static="1">
			<f a="a:t">
				<c path="Array"><c path="cons.T"/></c>
				<c path="cons.T"/>
				<c path="Array"><c path="cons.T"/></c>
			</f>
			<haxe_doc>Adds a single elements to the beginning if the Array.</haxe_doc>
		</cons>
		<first public="1" params="T" set="method" line="627" static="1">
			<f a="a">
				<c path="Array"><c path="first.T"/></c>
				<c path="first.T"/>
			</f>
			<haxe_doc>Produces the first element of Array `a`.</haxe_doc>
		</first>
		<firstOption public="1" params="T" set="method" line="633" static="1">
			<f a="a">
				<c path="Array"><c path="firstOption.T"/></c>
				<e path="haxe.ds.Option"><c path="firstOption.T"/></e>
			</f>
			<haxe_doc>Produces the first element of `a` as an `Option`, `Option.None` if the `Array` is empty.</haxe_doc>
		</firstOption>
		<last public="1" params="T" set="method" line="639" static="1">
			<f a="a">
				<c path="Array"><c path="last.T"/></c>
				<c path="last.T"/>
			</f>
			<haxe_doc>Produces the last element of Array `a`</haxe_doc>
		</last>
		<lastOption public="1" params="T" set="method" line="645" static="1">
			<f a="a">
				<c path="Array"><c path="lastOption.T"/></c>
				<e path="haxe.ds.Option"><c path="lastOption.T"/></e>
			</f>
			<haxe_doc>Produces the last element of `a` as an `Option`, `Option.None` if the `Array` is empty.</haxe_doc>
		</lastOption>
		<contains public="1" params="T" set="method" line="653" static="1">
			<f a="a:t">
				<c path="Array"><c path="contains.T"/></c>
				<c path="contains.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n="params">
	<e>"an array"</e>
	<e>"A value which may be in the array."</e>
</m></meta>
			<haxe_doc>Produces `true` if Array `a` contains element `t`</haxe_doc>
		</contains>
		<eachWithIndex public="1" params="T" set="method" line="661" static="1">
			<f a="a:f">
				<c path="Array"><c path="eachWithIndex.T"/></c>
				<f a=":">
					<c path="eachWithIndex.T"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<c path="Array"><c path="eachWithIndex.T"/></c>
			</f>
			<haxe_doc>Iterates `Array` `a`, applying function `f`, taking the element index as a second parameter</haxe_doc>
		</eachWithIndex>
		<take public="1" params="T" set="method" line="670" static="1">
			<f a="a:n">
				<c path="Array"><c path="take.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="take.T"/></c>
			</f>
			<haxe_doc>Produces an `Array` from `a[0]` to `a[n]`</haxe_doc>
		</take>
		<takeWhile public="1" params="T" set="method" line="676" static="1">
			<f a="a:p">
				<c path="Array"><c path="takeWhile.T"/></c>
				<f a="">
					<c path="takeWhile.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="takeWhile.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[0]` while predicate `p` returns `true`</haxe_doc>
		</takeWhile>
		<dropLeft public="1" params="T" set="method" line="689" static="1">
			<f a="a:n">
				<c path="Array"><c path="dropLeft.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="dropLeft.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[n]` to the last element of `a`.</haxe_doc>
		</dropLeft>
		<dropRight public="1" params="T" set="method" line="695" static="1">
			<f a="a:n">
				<c path="Array"><c path="dropRight.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="dropRight.T"/></c>
			</f>
			<haxe_doc>Produces an Array from `a[0]` to a[a.length-n].</haxe_doc>
		</dropRight>
		<dropWhile public="1" params="T" set="method" line="701" static="1">
			<f a="a:p">
				<c path="Array"><c path="dropWhile.T"/></c>
				<f a="">
					<c path="dropWhile.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="dropWhile.T"/></c>
			</f>
			<haxe_doc>Drops values from Array `a` while the predicate returns true.</haxe_doc>
		</dropWhile>
		<reversed public="1" params="T" set="method" line="713" static="1">
			<f a="arr">
				<c path="Array"><c path="reversed.T"/></c>
				<c path="Array"><c path="reversed.T"/></c>
			</f>
			<haxe_doc>Produces an Array with the elements in reversed order</haxe_doc>
		</reversed>
		<sliceBy public="1" params="T" set="method" line="723" static="1">
			<f a="srcArr:sizeSrc">
				<c path="Array"><c path="sliceBy.T"/></c>
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><c path="Array"><c path="sliceBy.T"/></c></c>
			</f>
			<haxe_doc>Produces an Array of arrays of size `sizeSrc`</haxe_doc>
		</sliceBy>
		<toMap public="1" params="V" set="method" line="737" static="1">
			<f a="arr">
				<c path="Array"><x path="tink.core.Pair">
	<c path="String"/>
	<c path="toMap.V"/>
</x></c>
				<x path="Map">
					<c path="String"/>
					<c path="toMap.V"/>
				</x>
			</f>
			<haxe_doc>Produces a map</haxe_doc>
		</toMap>
		<pad public="1" params="T" set="method" line="745" static="1">
			<f a="arr:len">
				<c path="Array"><c path="pad.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="pad.T"/></c>
			</f>
			<haxe_doc>Pads out to len, ignores if len is less than Array length.</haxe_doc>
		</pad>
		<fill public="1" params="T" set="method" line="756" static="1">
			<f a="arr:def">
				<c path="Array"><c path="fill.T"/></c>
				<c path="fill.T"/>
				<c path="Array"><c path="fill.T"/></c>
			</f>
			<haxe_doc>Fills `null` values in `arr` with `def`.</haxe_doc>
		</fill>
		<and public="1" params="A" set="method" line="763" static="1"><f a="arr0:arr1">
	<c path="Array"><c path="and.A"/></c>
	<c path="Array"><c path="and.A"/></c>
	<x path="Bool"/>
</f></and>
		<rotate public="1" params="A" set="method" line="772" static="1"><f a="arr0:num">
	<c path="Array"><c path="rotate.A"/></c>
	<x path="Int"/>
	<c path="Array"><c path="rotate.A"/></c>
</f></rotate>
		<size public="1" params="T" set="method" line="787" static="1">
			<f a="a">
				<c path="Array"><c path="size.T"/></c>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the size of a</haxe_doc>
		</size>
		<snapshot public="1" params="T" set="method" line="793" static="1">
			<f a="a">
				<c path="Array"><c path="snapshot.T"/></c>
				<c path="Array"><c path="snapshot.T"/></c>
			</f>
			<haxe_doc>Returns a copy of a.</haxe_doc>
		</snapshot>
	</class>
	<class path="stx.Bools" params="" file="src/main/haxe/stx/Bools.hx">
		<toInt public="1" set="method" line="9" static="1">
			<f a="v">
				<x path="Bool"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the Int representation of a Bool.</haxe_doc>
		</toInt>
		<ifTrue public="1" params="T" set="method" line="14" static="1">
			<f a="v:f">
				<x path="Bool"/>
				<t path="stx.types.Thunk"><c path="ifTrue.T"/></t>
				<t path="stx.types.Option"><c path="ifTrue.T"/></t>
			</f>
			<haxe_doc>Produces the result of `f` if `v` is true.</haxe_doc>
		</ifTrue>
		<ifFalse public="1" params="T" set="method" line="20" static="1">
			<f a="v:f">
				<x path="Bool"/>
				<t path="stx.types.Thunk"><c path="ifFalse.T"/></t>
				<t path="stx.types.Option"><c path="ifFalse.T"/></t>
			</f>
			<haxe_doc>Produces the result of `f` if `v` is false.</haxe_doc>
		</ifFalse>
		<ifElse public="1" params="T" set="method" line="26" static="1">
			<f a="v:f1:f2">
				<x path="Bool"/>
				<t path="stx.types.Thunk"><c path="ifElse.T"/></t>
				<t path="stx.types.Thunk"><c path="ifElse.T"/></t>
				<c path="ifElse.T"/>
			</f>
			<haxe_doc>Produces the result of `f1` if `v` is true, `f2` otherwise.</haxe_doc>
		</ifElse>
		<compare public="1" set="method" line="32" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compares Ints, returning -1 if (false,true), 1 if (true,false), 0 otherwise.</haxe_doc>
		</compare>
		<equals public="1" set="method" line="38" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v1` and `v2` are the same, `false` otherwise.</haxe_doc>
		</equals>
		<eq public="1" get="inline" set="null" line="44" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Shortcut for `equals`</haxe_doc>
		</eq>
		<and public="1" get="inline" set="null" line="48" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if both `v1` and `v2` are `true`, `false` otherwise.</haxe_doc>
		</and>
		<nand public="1" get="inline" set="null" line="52" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v1` and `v2` are different, `false` otherwise.</haxe_doc>
		</nand>
		<or public="1" get="inline" set="null" line="59" static="1">
			<f a="v1:v2">
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v1` or `v2` are `true`, `false` otherwise.</haxe_doc>
		</or>
		<not public="1" get="inline" set="null" line="65" static="1">
			<f a="v">
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is `true`, `false` otherwise.</haxe_doc>
		</not>
	</class>
	<class path="stx.CallStacks" params="" file="src/main/haxe/stx/CallStacks.hx">
		<stack public="1" get="inline" set="null" line="8" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<meta><m n=":noUsing"/></meta>
		</stack>
		<exceptions public="1" get="inline" set="null" line="11" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<meta><m n=":noUsing"/></meta>
		</exceptions>
		<show public="1" set="method" line="14" static="1"><f a="arr">
	<c path="Array"><e path="haxe.StackItem"/></c>
	<c path="String"/>
</f></show>
	</class>
	<class path="stx.StackItems" params="" file="src/main/haxe/stx/CallStacks.hx" module="stx.CallStacks"><toString public="1" set="method" line="19" static="1"><f a="v">
	<e path="haxe.StackItem"/>
	<c path="String"/>
</f></toString></class>
	<enum path="stx.Chunk" params="V" file="src/main/haxe/stx/Chunk.hx">
		<Val a="v"><c path="stx.Chunk.V"/></Val>
		<Nil/>
		<End a="?err"><c path="tink.core.Error"/></End>
	</enum>
	<class path="stx.Chunks" params="" file="src/main/haxe/stx/Chunk.hx" module="stx.Chunk">
		<create public="1" params="A" set="method" line="28" static="1">
			<f a="?c" v="null">
				<c path="create.A"/>
				<e path="stx.Chunk"><c path="create.A"/></e>
			</f>
			<meta><m n=":noUsing"/></meta>
		</create>
		<all public="1" params="A" get="inline" set="null" line="34" static="1">
			<f a="chks:?nilFail" v=":null">
				<c path="Array"><e path="stx.Chunk"><c path="all.A"/></e></c>
				<c path="tink.core.Error"/>
				<e path="stx.Chunk"><c path="Array"><c path="all.A"/></c></e>
			</f>
			<haxe_doc><![CDATA[Produces a `Chunk` of `Array<A>` only if all chunks are defined.]]></haxe_doc>
		</all>
		<ensure public="1" params="A" set="method" line="50" static="1"><f a="chk">
	<e path="stx.Chunk"><c path="ensure.A"/></e>
	<e path="haxe.ds.Option"><c path="ensure.A"/></e>
</f></ensure>
		<fold public="1" params="A:Z" set="method" line="57" static="1"><f a="chk:val:ers:nil">
	<e path="stx.Chunk"><c path="fold.A"/></e>
	<f a="">
		<c path="fold.A"/>
		<c path="fold.Z"/>
	</f>
	<f a="">
		<t path="Null"><c path="tink.core.Error"/></t>
		<c path="fold.Z"/>
	</f>
	<f a=""><c path="fold.Z"/></f>
	<c path="fold.Z"/>
</f></fold>
		<toOptionUpshot public="1" params="A" set="method" line="64" static="1"><f a="c">
	<e path="stx.Chunk"><c path="toOptionUpshot.A"/></e>
	<e path="tink.core.Either">
		<e path="haxe.ds.Option"><c path="tink.core.Error"/></e>
		<e path="haxe.ds.Option"><c path="toOptionUpshot.A"/></e>
	</e>
</f></toOptionUpshot>
		<toUpshot public="1" params="A" set="method" line="71" static="1"><f a="c">
	<e path="stx.Chunk"><c path="toUpshot.A"/></e>
	<e path="tink.core.Either">
		<c path="tink.core.Error"/>
		<c path="toUpshot.A"/>
	</e>
</f></toUpshot>
		<map public="1" params="A:B" set="method" line="78" static="1"><f a="chunk:fn">
	<e path="stx.Chunk"><c path="map.A"/></e>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<e path="stx.Chunk"><c path="map.B"/></e>
</f></map>
		<flatten public="1" params="A" set="method" line="87" static="1"><f a="chk">
	<e path="stx.Chunk"><e path="stx.Chunk"><c path="flatten.A"/></e></e>
	<e path="stx.Chunk"><c path="flatten.A"/></e>
</f></flatten>
		<flatMap public="1" params="A:B" set="method" line="94" static="1"><f a="chunk:fn">
	<e path="stx.Chunk"><c path="flatMap.A"/></e>
	<f a="">
		<c path="flatMap.A"/>
		<e path="stx.Chunk"><c path="flatMap.B"/></e>
	</f>
	<e path="stx.Chunk"><c path="flatMap.B"/></e>
</f></flatMap>
		<recover public="1" params="A:B" set="method" line="101" static="1"><f a="chunk:fn">
	<e path="stx.Chunk"><c path="recover.A"/></e>
	<f a="">
		<c path="tink.core.Error"/>
		<e path="stx.Chunk"><c path="recover.A"/></e>
	</f>
	<e path="stx.Chunk"><c path="recover.A"/></e>
</f></recover>
		<zipWith public="1" params="A:B:C" set="method" line="108" static="1"><f a="chunk0:chunk1:fn">
	<e path="stx.Chunk"><c path="zipWith.A"/></e>
	<e path="stx.Chunk"><c path="zipWith.B"/></e>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<e path="stx.Chunk"><c path="zipWith.C"/></e>
</f></zipWith>
		<zip public="1" params="A:B" set="method" line="124" static="1"><f a="chunk0:chunk1">
	<e path="stx.Chunk"><c path="zip.A"/></e>
	<e path="stx.Chunk"><c path="zip.B"/></e>
	<e path="stx.Chunk"><e path="stx.types.Tuple2">
	<c path="zip.A"/>
	<c path="zip.B"/>
</e></e>
</f></zip>
		<zipN public="1" params="A" set="method" line="127" static="1"><f a="rest">
	<c path="Array"><e path="stx.Chunk"><c path="zipN.A"/></e></c>
	<e path="stx.Chunk"><c path="Array"><c path="zipN.A"/></c></e>
</f></zipN>
		<zipOptionWith public="1" params="A:B:C" set="method" line="142" static="1"><f a="chunk0:chunk1:fn">
	<e path="stx.Chunk"><c path="zipOptionWith.A"/></e>
	<e path="stx.Chunk"><c path="zipOptionWith.B"/></e>
	<f a=":">
		<e path="haxe.ds.Option"><c path="zipOptionWith.A"/></e>
		<e path="haxe.ds.Option"><c path="zipOptionWith.B"/></e>
		<e path="haxe.ds.Option"><c path="zipOptionWith.C"/></e>
	</f>
	<e path="stx.Chunk"><c path="zipOptionWith.C"/></e>
</f></zipOptionWith>
		<getUpshotOrC public="1" params="A" set="method" line="163" static="1"><f a="chk:n">
	<e path="stx.Chunk"><c path="getUpshotOrC.A"/></e>
	<c path="getUpshotOrC.A"/>
	<t path="stx.types.Upshot"><c path="getUpshotOrC.A"/></t>
</f></getUpshotOrC>
		<orChunkErrC public="1" params="A" set="method" line="170" static="1"><f a="myb:err">
	<e path="haxe.ds.Option"><c path="orChunkErrC.A"/></e>
	<c path="tink.core.Error"/>
	<e path="stx.Chunk"><c path="orChunkErrC.A"/></e>
</f></orChunkErrC>
		<orChunkNil public="1" params="A" set="method" line="176" static="1"><f a="myb">
	<e path="haxe.ds.Option"><c path="orChunkNil.A"/></e>
	<e path="stx.Chunk"><c path="orChunkNil.A"/></e>
</f></orChunkNil>
		<asChunkEnd public="1" params="A" set="method" line="182" static="1"><f a="myb">
	<e path="haxe.ds.Option"><c path="tink.core.Error"/></e>
	<e path="stx.Chunk"><c path="asChunkEnd.A"/></e>
</f></asChunkEnd>
		<orElseConst public="1" params="A" set="method" line="188" static="1"><f a="chk:v">
	<e path="stx.Chunk"><c path="orElseConst.A"/></e>
	<c path="orElseConst.A"/>
	<e path="stx.Chunk"><c path="orElseConst.A"/></e>
</f></orElseConst>
		<valueOption public="1" params="A" set="method" line="195" static="1"><f a="chk">
	<e path="stx.Chunk"><c path="valueOption.A"/></e>
	<e path="haxe.ds.Option"><c path="valueOption.A"/></e>
</f></valueOption>
		<value public="1" params="A" set="method" line="202" static="1"><f a="chk">
	<e path="stx.Chunk"><c path="value.A"/></e>
	<t path="Null"><c path="value.A"/></t>
</f></value>
		<fail public="1" params="A" set="method" line="209" static="1"><f a="chk">
	<e path="stx.Chunk"><c path="fail.A"/></e>
	<t path="Null"><c path="tink.core.Error"/></t>
</f></fail>
		<isDefined public="1" params="A" set="method" line="216" static="1"><f a="chk">
	<e path="stx.Chunk"><c path="isDefined.A"/></e>
	<x path="Bool"/>
</f></isDefined>
		<success public="1" params="A" set="method" line="223" static="1"><f a="chk:fn">
	<e path="stx.Chunk"><c path="success.A"/></e>
	<f a="">
		<c path="success.A"/>
		<x path="Void"/>
	</f>
	<e path="stx.Chunk"><c path="success.A"/></e>
</f></success>
		<failure public="1" params="A" set="method" line="230" static="1"><f a="chk:fn">
	<e path="stx.Chunk"><c path="failure.A"/></e>
	<f a="">
		<t path="Null"><c path="tink.core.Error"/></t>
		<x path="Void"/>
	</f>
	<e path="stx.Chunk"><c path="failure.A"/></e>
</f></failure>
		<nothing public="1" params="A" set="method" line="237" static="1"><f a="chk:fn">
	<e path="stx.Chunk"><c path="nothing.A"/></e>
	<f a=""><x path="Void"/></f>
	<e path="stx.Chunk"><c path="nothing.A"/></e>
</f></nothing>
	</class>
	<class path="stx.Compare" params="" file="src/main/haxe/stx/Compare.hx">
		<compare public="1" params="T" get="inline" set="null" line="32" static="1">
			<f a="v">
				<c path="compare.T"/>
				<c path="stx.Predicator"><c path="compare.T"/></c>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Predicator for value v.</haxe_doc>
		</compare>
		<always public="1" params="T" get="inline" set="null" line="38" static="1">
			<f a=""><x path="stx.Predicate"><c path="always.T"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Always returns true, no matter the input.</haxe_doc>
		</always>
		<never public="1" params="T" get="inline" set="null" line="44" static="1">
			<f a=""><x path="stx.Predicate"><c path="never.T"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Always returns false, no matter the input.</haxe_doc>
		</never>
		<ok public="1" get="inline" set="null" line="50" static="1">
			<f a=""><x path="stx.Predicate"><x path="Bool"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Bools.isTrue</haxe_doc>
		</ok>
		<no public="1" get="inline" set="null" line="56" static="1">
			<f a=""><x path="stx.Predicate"><x path="Bool"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Bools.isFalse</haxe_doc>
		</no>
		<is public="1" params="A" get="inline" set="null" line="59" static="1">
			<f a="cls">
				<x path="Class"><c path="is.A"/></x>
				<x path="stx.Predicate"><c path="is.A"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</is>
		<throws public="1" params="A" get="inline" set="null" line="62" static="1">
			<f a="?type" v="null">
				<x path="Class"><d/></x>
				<x path="stx.Predicate"><f a=""><x path="Void"/></f></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</throws>
		<nl public="1" params="T" get="inline" set="null" line="76" static="1">
			<f a=""><x path="stx.Predicate"><c path="nl.T"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>null-check</haxe_doc>
		</nl>
		<ntnl public="1" params="T" get="inline" set="null" line="82" static="1">
			<f a=""><x path="stx.Predicate"><c path="ntnl.T"/></x></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>not-null-check</haxe_doc>
		</ntnl>
		<alike public="1" get="inline" set="null" line="85" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="stx.Predicate"><x path="EnumValue"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</alike>
		<matches public="1" get="inline" set="null" line="88" static="1">
			<f a="reg">
				<c path="EReg"/>
				<x path="stx.Predicate"><c path="String"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</matches>
		<eq public="1" params="T" get="inline" set="null" line="94" static="1">
			<f a="p">
				<c path="eq.T"/>
				<x path="stx.Predicate"><c path="eq.T"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>equals</haxe_doc>
		</eq>
		<gt public="1" params="T" get="inline" set="null" line="100" static="1">
			<f a="p">
				<c path="gt.T"/>
				<x path="stx.Predicate"><c path="gt.T"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>greater than</haxe_doc>
		</gt>
		<gteq public="1" params="T" get="inline" set="null" line="106" static="1">
			<f a="p">
				<c path="gteq.T"/>
				<x path="stx.Predicate"><c path="gteq.T"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>greater than or equal</haxe_doc>
		</gteq>
		<lt public="1" params="T" get="inline" set="null" line="112" static="1">
			<f a="p">
				<c path="lt.T"/>
				<x path="stx.Predicate"><c path="lt.T"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>less than</haxe_doc>
		</lt>
		<lteq public="1" params="T" get="inline" set="null" line="118" static="1">
			<f a="p">
				<c path="lteq.T"/>
				<x path="stx.Predicate"><c path="lteq.T"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>less than or equal</haxe_doc>
		</lteq>
		<haxe_doc>This is a good class to use in conjuncture with stx.UnitTest, stx.test.Assert and filters.

  ```
  import stx.Compare;.*;
  
  arr.filter(eq(3)) // produces predicate that returns true if input equals 3.
  ```
  nice.

  Unlikely to screw with other global namespace stuff, but keep an eye on it.</haxe_doc>
	</class>
	<typedef path="stx.PredicateType" params="T" file="src/main/haxe/stx/Compare.hx" module="stx.Compare"><f a="">
	<c path="stx.PredicateType.T"/>
	<x path="Bool"/>
</f></typedef>
	<abstract path="stx.Predicate" params="T" file="src/main/haxe/stx/Compare.hx" module="stx.Compare">
		<from><icast><t path="stx.PredicateType"><c path="stx.Predicate.T"/></t></icast></from>
		<this><t path="stx.PredicateType"><c path="stx.Predicate.T"/></t></this>
		<to>
			<icast><t path="stx.PredicateType"><c path="stx.Predicate.T"/></t></icast>
			<icast field="toMethod"><x path="stx.Method">
	<c path="stx.Predicate.T"/>
	<x path="Bool"/>
</x></icast>
		</to>
		<impl><class path="stx._Compare.Predicate_Impl_" params="" file="src/main/haxe/stx/Compare.hx" private="1" module="stx.Compare">
	<_new public="1" set="method" line="124" static="1">
		<f a="v">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<apply public="1" set="method" line="127" static="1">
		<f a="this:v">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<c path="stx.Predicate.T"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</apply>
	<and public="1" get="inline" set="null" line="133" static="1">
		<f a="this:p">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if both succeed.</haxe_doc>
	</and>
	<andAll public="1" get="inline" set="null" line="139" static="1">
		<f a="this:ps">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<t path="Iterable"><x path="stx.Predicate"><c path="stx.Predicate.T"/></x></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if all input predicates succeed.</haxe_doc>
	</andAll>
	<or public="1" get="inline" set="null" line="145" static="1">
		<f a="this:p">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if one or other predicates succeed.</haxe_doc>
	</or>
	<xor public="1" get="inline" set="null" line="151" static="1">
		<f a="this:p">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if one or other, but not both predicates succeed.</haxe_doc>
	</xor>
	<not public="1" get="inline" set="null" line="157" static="1">
		<f a="this">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if the input predicate fails.</haxe_doc>
	</not>
	<orAny public="1" get="inline" set="null" line="163" static="1">
		<f a="this:ps">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<t path="Iterable"><x path="stx.Predicate"><c path="stx.Predicate.T"/></x></t>
			<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Produces a predicate that succeeds if any of the input predicates succeed.</haxe_doc>
	</orAny>
	<toMethod public="1" set="method" line="169" static="1">
		<f a="this">
			<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			<x path="stx.Method">
				<c path="stx.Predicate.T"/>
				<x path="Bool"/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Produces a Method from a Predicate.</haxe_doc>
	</toMethod>
</class></impl>
	</abstract>
	<class path="stx._Compare.Predicate_Impl_" params="" file="src/main/haxe/stx/Compare.hx" private="1" module="stx.Compare">
		<_new public="1" set="method" line="124" static="1">
			<f a="v">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<apply public="1" set="method" line="127" static="1">
			<f a="this:v">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<c path="stx.Predicate.T"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</apply>
		<and public="1" get="inline" set="null" line="133" static="1">
			<f a="this:p">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if both succeed.</haxe_doc>
		</and>
		<andAll public="1" get="inline" set="null" line="139" static="1">
			<f a="this:ps">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<t path="Iterable"><x path="stx.Predicate"><c path="stx.Predicate.T"/></x></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if all input predicates succeed.</haxe_doc>
		</andAll>
		<or public="1" get="inline" set="null" line="145" static="1">
			<f a="this:p">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if one or other predicates succeed.</haxe_doc>
		</or>
		<xor public="1" get="inline" set="null" line="151" static="1">
			<f a="this:p">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if one or other, but not both predicates succeed.</haxe_doc>
		</xor>
		<not public="1" get="inline" set="null" line="157" static="1">
			<f a="this">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if the input predicate fails.</haxe_doc>
		</not>
		<orAny public="1" get="inline" set="null" line="163" static="1">
			<f a="this:ps">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<t path="Iterable"><x path="stx.Predicate"><c path="stx.Predicate.T"/></x></t>
				<x path="stx.Predicate"><c path="stx.Predicate.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Produces a predicate that succeeds if any of the input predicates succeed.</haxe_doc>
		</orAny>
		<toMethod public="1" set="method" line="169" static="1">
			<f a="this">
				<t path="stx.PredicateType"><c path="stx.Predicate.T"/></t>
				<x path="stx.Method">
					<c path="stx.Predicate.T"/>
					<x path="Bool"/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Produces a Method from a Predicate.</haxe_doc>
		</toMethod>
	</class>
	<class path="stx.Predicator" params="T" file="src/main/haxe/stx/Compare.hx" module="stx.Compare">
		<__eq__><t path="stx.types.Eq"><c path="stx.Predicator.T"/></t></__eq__>
		<__od__><t path="stx.types.Ord"><c path="stx.Predicator.T"/></t></__od__>
		<__dt__><c path="stx.Predicator.T"/></__dt__>
		<eq public="1" get="inline" set="null" line="184"><f a=""><x path="stx.Predicate"><c path="stx.Predicator.T"/></x></f></eq>
		<gt public="1" get="inline" set="null" line="187"><f a=""><x path="stx.Predicate"><c path="stx.Predicator.T"/></x></f></gt>
		<gteq public="1" get="inline" set="null" line="190"><f a=""><x path="stx.Predicate"><c path="stx.Predicator.T"/></x></f></gteq>
		<lt public="1" get="inline" set="null" line="193"><f a=""><x path="stx.Predicate"><c path="stx.Predicator.T"/></x></f></lt>
		<lteq public="1" get="inline" set="null" line="196"><f a=""><x path="stx.Predicate"><c path="stx.Predicator.T"/></x></f></lteq>
		<_eq get="inline" set="null" line="199"><f a=""><t path="stx.types.Eq"><c path="stx.Predicator.T"/></t></f></_eq>
		<_od get="inline" set="null" line="202"><f a=""><t path="stx.types.Ord"><c path="stx.Predicator.T"/></t></f></_od>
		<new public="1" set="method" line="181"><f a="v">
	<c path="stx.Predicator.T"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Caches function lookup for value.</haxe_doc>
	</class>
	<class path="stx.PredicateLogic" params="" file="src/main/haxe/stx/Compare.hx" module="stx.Compare">
		<and public="1" params="T" set="method" line="210" static="1">
			<f a="p1:p2">
				<x path="stx.Predicate"><c path="and.T"/></x>
				<x path="stx.Predicate"><c path="and.T"/></x>
				<x path="stx.Predicate"><c path="and.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if both succeed.</haxe_doc>
		</and>
		<andAll public="1" params="T" set="method" line="218" static="1">
			<f a="p1:ps">
				<x path="stx.Predicate"><c path="andAll.T"/></x>
				<t path="Iterable"><x path="stx.Predicate"><c path="andAll.T"/></x></t>
				<x path="stx.Predicate"><c path="andAll.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if all input predicates succeed.</haxe_doc>
		</andAll>
		<or public="1" params="T" set="method" line="234" static="1">
			<f a="p1:p2">
				<x path="stx.Predicate"><c path="or.T"/></x>
				<x path="stx.Predicate"><c path="or.T"/></x>
				<x path="stx.Predicate"><c path="or.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if one or other predicates succeed.</haxe_doc>
		</or>
		<xor public="1" params="T" set="method" line="242" static="1">
			<f a="p1:p2">
				<x path="stx.Predicate"><c path="xor.T"/></x>
				<x path="stx.Predicate"><c path="xor.T"/></x>
				<x path="stx.Predicate"><c path="xor.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if one or other , but not both predicates succeed.</haxe_doc>
		</xor>
		<not public="1" params="T" get="inline" set="null" line="250" static="1">
			<f a="p1">
				<x path="stx.Predicate"><c path="not.T"/></x>
				<x path="stx.Predicate"><c path="not.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if the input predicate fails.</haxe_doc>
		</not>
		<orAny public="1" params="T" set="method" line="258" static="1">
			<f a="p1:ps">
				<x path="stx.Predicate"><c path="orAny.T"/></x>
				<t path="Iterable"><x path="stx.Predicate"><c path="orAny.T"/></x></t>
				<x path="stx.Predicate"><c path="orAny.T"/></x>
			</f>
			<haxe_doc>Produces a predicate that succeeds if any of the input predicates succeeds.</haxe_doc>
		</orAny>
	</class>
	<class path="stx.ComposeDo" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" set="method" line="18" static="1">
	<f a="f1:f2">
		<f a=""><x path="Void"/></f>
		<f a=""><x path="Void"/></f>
		<f a=""><x path="Void"/></f>
	</f>
	<meta><m n="returns"><e>"The composite function."</e></m></meta>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order.</haxe_doc>
</then></class>
	<class path="stx.ComposeDo1" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="P1" set="method" line="30" static="1">
	<f a="f1:f2">
		<f a="">
			<c path="then.P1"/>
			<x path="Void"/>
		</f>
		<f a="">
			<c path="then.P1"/>
			<x path="Void"/>
		</f>
		<f a="">
			<c path="then.P1"/>
			<x path="Void"/>
		</f>
	</f>
	<meta><m n="returns"><e>"The composite function."</e></m></meta>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order with the same input, and returns no result.</haxe_doc>
</then></class>
	<class path="stx.ComposeDo2" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="P1:P2" set="method" line="41" static="1">
	<f a="f1:f2">
		<f a=":">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<x path="Void"/>
		</f>
		<f a=":">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<x path="Void"/>
		</f>
		<f a=":">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<x path="Void"/>
		</f>
	</f>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order with the same input, and returns no result.</haxe_doc>
</then></class>
	<class path="stx.ComposeDo3" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="P1:P2:P3" set="method" line="52" static="1">
	<f a="f1:f2">
		<f a="::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<x path="Void"/>
		</f>
		<f a="::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<x path="Void"/>
		</f>
		<f a="::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<x path="Void"/>
		</f>
	</f>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order with the same input, and returns no result.</haxe_doc>
</then></class>
	<class path="stx.ComposeDo4" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="P1:P2:P3:P4" set="method" line="63" static="1">
	<f a="f1:f2">
		<f a=":::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<x path="Void"/>
		</f>
		<f a=":::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<x path="Void"/>
		</f>
		<f a=":::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<x path="Void"/>
		</f>
	</f>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order with the same input, and returns no result.</haxe_doc>
</then></class>
	<class path="stx.ComposeDo5" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="P1:P2:P3:P4:P5" set="method" line="74" static="1">
	<f a="f1:f2">
		<f a="::::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<c path="then.P5"/>
			<x path="Void"/>
		</f>
		<f a="::::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<c path="then.P5"/>
			<x path="Void"/>
		</f>
		<f a="::::">
			<c path="then.P1"/>
			<c path="then.P2"/>
			<c path="then.P3"/>
			<c path="then.P4"/>
			<c path="then.P5"/>
			<x path="Void"/>
		</f>
	</f>
	<haxe_doc>Produces a function that calls `f1` and `f2` in left to right order with the same input, and returns no result.</haxe_doc>
</then></class>
	<class path="stx.Compose0" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="A:B" set="method" line="82" static="1"><f a="fn0:fn1">
	<t path="stx.types.Thunk"><c path="then.A"/></t>
	<f a="">
		<c path="then.A"/>
		<c path="then.B"/>
	</f>
	<t path="stx.types.Thunk"><c path="then.B"/></t>
</f></then></class>
	<class path="stx.Compose" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx">
		<apply public="1" params="I:O" set="method" line="92" static="1">
			<f a="fn:v">
				<f a="">
					<c path="apply.I"/>
					<c path="apply.O"/>
				</f>
				<c path="apply.I"/>
				<c path="apply.O"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</apply>
		<then public="1" params="A:B:C" set="method" line="98" static="1">
			<f a="fn1:fn2">
				<f a="">
					<c path="then.A"/>
					<c path="then.B"/>
				</f>
				<f a="">
					<c path="then.B"/>
					<c path="then.C"/>
				</f>
				<f a="">
					<c path="then.A"/>
					<c path="then.C"/>
				</f>
			</f>
			<haxe_doc>Returns a function that applies `fn1` then `fn2` on the input</haxe_doc>
		</then>
		<first public="1" params="A:B:C:D" set="method" line="107" static="1">
			<f a="fn1">
				<f a="">
					<c path="first.A"/>
					<c path="first.C"/>
				</f>
				<f a="">
					<x path="tink.core.Pair">
						<c path="first.A"/>
						<c path="first.B"/>
					</x>
					<x path="tink.core.Pair">
						<c path="first.C"/>
						<c path="first.B"/>
					</x>
				</f>
			</f>
			<haxe_doc>Returns a function that applies `fn1` to the left hand side of a Tuple</haxe_doc>
		</first>
		<second public="1" params="A:B:C:D" set="method" line="116" static="1">
			<f a="fn1">
				<f a="">
					<c path="second.B"/>
					<c path="second.D"/>
				</f>
				<f a="">
					<x path="tink.core.Pair">
						<c path="second.A"/>
						<c path="second.B"/>
					</x>
					<x path="tink.core.Pair">
						<c path="second.A"/>
						<c path="second.D"/>
					</x>
				</f>
			</f>
			<haxe_doc>Returns a function that applies `fn1` to the right hand side of a Tuple</haxe_doc>
		</second>
		<pair public="1" params="A:B:C:D" set="method" line="122" static="1"><f a="fn1:fn2">
	<f a="">
		<c path="pair.A"/>
		<c path="pair.C"/>
	</f>
	<f a="">
		<c path="pair.B"/>
		<c path="pair.D"/>
	</f>
	<f a="">
		<x path="tink.core.Pair">
			<c path="pair.A"/>
			<c path="pair.B"/>
		</x>
		<x path="tink.core.Pair">
			<c path="pair.C"/>
			<c path="pair.D"/>
		</x>
	</f>
</f></pair>
		<application public="1" params="A:I:O" set="method" line="131" static="1">
			<f a="fn">
				<f a="">
					<c path="application.A"/>
					<x path="tink.core.Pair">
						<f a="">
							<c path="application.I"/>
							<c path="application.O"/>
						</f>
						<c path="application.I"/>
					</x>
				</f>
				<f a="">
					<c path="application.A"/>
					<c path="application.O"/>
				</f>
			</f>
			<haxe_doc>Returns a function that applies a function on the lhs of a tuple to the value on the rhs.</haxe_doc>
		</application>
		<left public="1" params="A:B:C" set="method" line="141" static="1">
			<f a="fn">
				<f a="">
					<c path="left.A"/>
					<c path="left.C"/>
				</f>
				<f a="">
					<e path="tink.core.Either">
						<c path="left.A"/>
						<c path="left.B"/>
					</e>
					<e path="tink.core.Either">
						<c path="left.C"/>
						<c path="left.B"/>
					</e>
				</f>
			</f>
			<haxe_doc>Returns a function that applies a function to the Left value of an Either.</haxe_doc>
		</left>
		<right public="1" params="A:B:D" set="method" line="154" static="1">
			<f a="fn">
				<f a="">
					<c path="right.B"/>
					<c path="right.D"/>
				</f>
				<f a="">
					<e path="tink.core.Either">
						<c path="right.A"/>
						<c path="right.B"/>
					</e>
					<e path="tink.core.Either">
						<c path="right.A"/>
						<c path="right.D"/>
					</e>
				</f>
			</f>
			<haxe_doc>Returns a function that applies a function to the Right value of an Either.</haxe_doc>
		</right>
		<fromR public="1" params="A:B:C" set="method" line="164" static="1"><f a="fn">
	<f a="">
		<c path="fromR.B"/>
		<e path="tink.core.Either">
			<c path="fromR.A"/>
			<c path="fromR.C"/>
		</e>
	</f>
	<f a="">
		<e path="tink.core.Either">
			<c path="fromR.A"/>
			<c path="fromR.B"/>
		</e>
		<e path="tink.core.Either">
			<c path="fromR.A"/>
			<c path="fromR.C"/>
		</e>
	</f>
</f></fromR>
		<unit public="1" params="A:B" set="method" line="176" static="1">
			<f a=""><f a="">
	<c path="unit.A"/>
	<c path="unit.A"/>
</f></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Unit function.
        [[1,2],[3,4]].flatMap( Compose.unit() );//[1,2,3,4]</haxe_doc>
		</unit>
		<fan public="1" params="I:O" set="method" line="182" static="1">
			<f a="a">
				<f a="">
					<c path="fan.I"/>
					<c path="fan.O"/>
				</f>
				<f a="">
					<c path="fan.I"/>
					<x path="tink.core.Pair">
						<c path="fan.O"/>
						<c path="fan.O"/>
					</x>
				</f>
			</f>
			<haxe_doc>Returns a function that produces a `Pair` from a value.</haxe_doc>
		</fan>
		<pure public="1" params="A:B" set="method" line="192" static="1">
			<f a="v">
				<c path="pure.B"/>
				<f a="">
					<c path="pure.A"/>
					<c path="pure.B"/>
				</f>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Returns a function that produces `v`.</haxe_doc>
		</pure>
		<split public="1" params="A:B:C" set="method" line="195" static="1"><f a="split_:_split">
	<f a="">
		<c path="split.A"/>
		<c path="split.B"/>
	</f>
	<f a="">
		<c path="split.A"/>
		<c path="split.C"/>
	</f>
	<f a="">
		<c path="split.A"/>
		<x path="tink.core.Pair">
			<c path="split.B"/>
			<c path="split.C"/>
		</x>
	</f>
</f></split>
		<tie public="1" params="A:B:C" set="method" line="200" static="1"><f a="bindl:bindr">
	<f a="">
		<c path="tie.A"/>
		<c path="tie.C"/>
	</f>
	<f a="">
		<x path="tink.core.Pair">
			<c path="tie.A"/>
			<c path="tie.C"/>
		</x>
		<c path="tie.B"/>
	</f>
	<f a="">
		<c path="tie.A"/>
		<c path="tie.B"/>
	</f>
</f></tie>
		<pinch public="1" params="A:B:C" set="method" line="203" static="1"><f a="fn0">
	<f a="">
		<x path="tink.core.Pair">
			<c path="pinch.A"/>
			<c path="pinch.A"/>
		</x>
		<x path="tink.core.Pair">
			<c path="pinch.B"/>
			<c path="pinch.C"/>
		</x>
	</f>
	<f a="">
		<c path="pinch.A"/>
		<x path="tink.core.Pair">
			<c path="pinch.B"/>
			<c path="pinch.C"/>
		</x>
	</f>
</f></pinch>
		<both public="1" params="A:B" set="method" line="208" static="1"><f a="fn">
	<f a="">
		<c path="both.A"/>
		<c path="both.B"/>
	</f>
	<f a="">
		<x path="tink.core.Pair">
			<c path="both.A"/>
			<c path="both.A"/>
		</x>
		<x path="tink.core.Pair">
			<c path="both.B"/>
			<c path="both.B"/>
		</x>
	</f>
</f></both>
		<compose public="1" params="U:V:W" set="method" line="216" static="1">
			<f a="f1:f2">
				<f a="">
					<c path="compose.V"/>
					<c path="compose.W"/>
				</f>
				<f a="">
					<c path="compose.U"/>
					<c path="compose.V"/>
				</f>
				<f a="">
					<c path="compose.U"/>
					<c path="compose.W"/>
				</f>
			</f>
			<haxe_doc>Returns a function that calls `f1` with the output of `f2`.</haxe_doc>
		</compose>
		<option public="1" params="A:B" set="method" line="221" static="1"><f a="fn">
	<f a="">
		<c path="option.A"/>
		<c path="option.B"/>
	</f>
	<f a="">
		<e path="haxe.ds.Option"><c path="option.A"/></e>
		<e path="haxe.ds.Option"><c path="option.B"/></e>
	</f>
</f></option>
		<fromOption public="1" params="A:B" set="method" line="229" static="1"><f a="fn">
	<f a="">
		<c path="fromOption.A"/>
		<e path="haxe.ds.Option"><c path="fromOption.B"/></e>
	</f>
	<f a="">
		<e path="haxe.ds.Option"><c path="fromOption.A"/></e>
		<e path="haxe.ds.Option"><c path="fromOption.B"/></e>
	</f>
</f></fromOption>
		<repeat public="1" params="I:O" set="method" line="243" static="1"><f a="fn">
	<f a="">
		<c path="repeat.I"/>
		<e path="tink.core.Either">
			<c path="repeat.I"/>
			<c path="repeat.O"/>
		</e>
	</f>
	<f a="">
		<c path="repeat.I"/>
		<c path="repeat.O"/>
	</f>
</f></repeat>
		<haxe_doc>Arrowlet class for Functions.</haxe_doc>
	</class>
	<class path="stx.Compose2" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Compose.hx" module="stx.Compose"><then public="1" params="U:V:W:X" set="method" line="261" static="1">
	<f a="f1:f2">
		<f a=":">
			<c path="then.U"/>
			<c path="then.V"/>
			<c path="then.W"/>
		</f>
		<f a="">
			<c path="then.W"/>
			<c path="then.X"/>
		</f>
		<f a=":">
			<c path="then.U"/>
			<c path="then.V"/>
			<c path="then.X"/>
		</f>
	</f>
	<haxe_doc>Returns a function that calls `f2` with the output of `f1`.</haxe_doc>
</then></class>
	<class path="stx.Dates" params="" file="src/main/haxe/stx/Dates.hx">
		<compare public="1" set="method" line="11" static="1">
			<f a="v1:v2">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Compare dates</haxe_doc>
		</compare>
		<equals public="1" set="method" line="19" static="1">
			<f a="v1:v2">
				<c path="Date"/>
				<c path="Date"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Equality function for Dates</haxe_doc>
		</equals>
		<toString public="1" set="method" line="25" static="1">
			<f a="v">
				<c path="Date"/>
				<c path="String"/>
			</f>
			<haxe_doc>Stringify Date</haxe_doc>
		</toString>
		<copier public="1" set="method" line="28" static="1"><f a="d0:?year:?month:?day:?hour:?min:?sec" v=":null:null:null:null:null:null">
	<c path="Date"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="Date"/>
</f></copier>
		<add public="1" set="method" line="38" static="1"><f a="d0:d1">
	<c path="Date"/>
	<c path="Date"/>
	<c path="Date"/>
</f></add>
		<sub public="1" set="method" line="41" static="1"><f a="d0:d1">
	<c path="Date"/>
	<c path="Date"/>
	<c path="Date"/>
</f></sub>
		<meta><m n=":thx"/></meta>
	</class>
	<class path="stx.Eithers" params="" file="src/main/haxe/stx/Eithers.hx">
		<toLeft public="1" params="A:B" set="method" line="20" static="1">
			<f a="v">
				<c path="toLeft.A"/>
				<e path="tink.core.Either">
					<c path="toLeft.A"/>
					<c path="toLeft.B"/>
				</e>
			</f>
			<haxe_doc>Creates a Left from any value</haxe_doc>
		</toLeft>
		<toRight public="1" params="A:B" set="method" line="26" static="1">
			<f a="v">
				<c path="toRight.B"/>
				<e path="tink.core.Either">
					<c path="toRight.A"/>
					<c path="toRight.B"/>
				</e>
			</f>
			<haxe_doc>Creates a Right from any value</haxe_doc>
		</toRight>
		<flip public="1" params="A:B" set="method" line="32" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="flip.A"/>
					<c path="flip.B"/>
				</e>
				<e path="tink.core.Either">
					<c path="flip.B"/>
					<c path="flip.A"/>
				</e>
			</f>
			<haxe_doc>Flips a Left to a Right or vice-versa.</haxe_doc>
		</flip>
		<left public="1" params="A:B" set="method" line="41" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="left.A"/>
					<c path="left.B"/>
				</e>
				<e path="haxe.ds.Option"><c path="left.A"/></e>
			</f>
			<haxe_doc>Returns an `Option` which is `Some` if the either is `Left`, `None` otherwise.</haxe_doc>
		</left>
		<isLeft public="1" params="A:B" set="method" line="50" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="isLeft.A"/>
					<c path="isLeft.B"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if either is Left.</haxe_doc>
		</isLeft>
		<right public="1" params="A:B" set="method" line="59" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="right.A"/>
					<c path="right.B"/>
				</e>
				<e path="haxe.ds.Option"><c path="right.B"/></e>
			</f>
			<haxe_doc>Returns an option which is `Some` if the either is `Right`, `None` otherwise.</haxe_doc>
		</right>
		<isRight public="1" params="A:B" set="method" line="68" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="isRight.A"/>
					<c path="isRight.B"/>
				</e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if either is `Right`.</haxe_doc>
		</isRight>
		<get public="1" params="A" set="method" line="77" static="1">
			<f a="e">
				<e path="tink.core.Either">
					<c path="get.A"/>
					<c path="get.A"/>
				</e>
				<c path="get.A"/>
			</f>
			<haxe_doc>Returns the raw value of an `Either`.</haxe_doc>
		</get>
		<mapLeft public="1" params="A:B:C" set="method" line="86" static="1">
			<f a="e:f">
				<e path="tink.core.Either">
					<c path="mapLeft.A"/>
					<c path="mapLeft.B"/>
				</e>
				<f a="">
					<c path="mapLeft.A"/>
					<c path="mapLeft.C"/>
				</f>
				<e path="tink.core.Either">
					<c path="mapLeft.C"/>
					<c path="mapLeft.B"/>
				</e>
			</f>
			<haxe_doc>Transforms the value of an `Either` if it is `Left`.</haxe_doc>
		</mapLeft>
		<map public="1" params="A:B:C:D" set="method" line="95" static="1">
			<f a="e:f1:f2">
				<e path="tink.core.Either">
					<c path="map.A"/>
					<c path="map.B"/>
				</e>
				<f a="">
					<c path="map.A"/>
					<c path="map.C"/>
				</f>
				<f a="">
					<c path="map.B"/>
					<c path="map.D"/>
				</f>
				<e path="tink.core.Either">
					<c path="map.C"/>
					<c path="map.D"/>
				</e>
			</f>
			<haxe_doc>Transforms the value of an `Either`.</haxe_doc>
		</map>
		<mapRight public="1" params="A:B:D" set="method" line="104" static="1">
			<f a="e:f">
				<e path="tink.core.Either">
					<c path="mapRight.A"/>
					<c path="mapRight.B"/>
				</e>
				<f a="">
					<c path="mapRight.B"/>
					<c path="mapRight.D"/>
				</f>
				<e path="tink.core.Either">
					<c path="mapRight.A"/>
					<c path="mapRight.D"/>
				</e>
			</f>
			<haxe_doc>Transforms the value of an `Either` if it is `Right`.</haxe_doc>
		</mapRight>
		<flatMap public="1" params="A:B:C:D" set="method" line="113" static="1">
			<f a="e:f1:f2">
				<e path="tink.core.Either">
					<c path="flatMap.A"/>
					<c path="flatMap.B"/>
				</e>
				<f a="">
					<c path="flatMap.A"/>
					<e path="tink.core.Either">
						<c path="flatMap.C"/>
						<c path="flatMap.D"/>
					</e>
				</f>
				<f a="">
					<c path="flatMap.B"/>
					<e path="tink.core.Either">
						<c path="flatMap.C"/>
						<c path="flatMap.D"/>
					</e>
				</f>
				<e path="tink.core.Either">
					<c path="flatMap.C"/>
					<c path="flatMap.D"/>
				</e>
			</f>
			<haxe_doc>Creates a new `Either` with functions that take the value of the either and return a new Either.</haxe_doc>
		</flatMap>
		<flatMapRight public="1" params="A:B:C:D" set="method" line="122" static="1">
			<f a="e:f">
				<e path="tink.core.Either">
					<c path="flatMapRight.A"/>
					<c path="flatMapRight.B"/>
				</e>
				<f a="">
					<c path="flatMapRight.B"/>
					<e path="tink.core.Either">
						<c path="flatMapRight.C"/>
						<c path="flatMapRight.D"/>
					</e>
				</f>
				<e path="tink.core.Either">
					<c path="flatMapRight.C"/>
					<c path="flatMapRight.D"/>
				</e>
			</f>
			<haxe_doc>Creates a new Either if the original is Right.</haxe_doc>
		</flatMapRight>
		<flatMapLeft public="1" params="A:B:C:D" set="method" line="129" static="1">
			<f a="e:f">
				<e path="tink.core.Either">
					<c path="flatMapLeft.A"/>
					<c path="flatMapLeft.B"/>
				</e>
				<f a="">
					<c path="flatMapLeft.A"/>
					<e path="tink.core.Either">
						<c path="flatMapLeft.C"/>
						<c path="flatMapLeft.D"/>
					</e>
				</f>
				<e path="tink.core.Either">
					<c path="flatMapLeft.C"/>
					<c path="flatMapLeft.D"/>
				</e>
			</f>
			<haxe_doc>Creates a new Either if the original is Left.</haxe_doc>
		</flatMapLeft>
		<composeLeft public="1" params="A:B" set="method" line="136" static="1">
			<f a="e1:e2:ac:bc">
				<e path="tink.core.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
				<e path="tink.core.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
				<f a=":">
					<c path="composeLeft.A"/>
					<c path="composeLeft.A"/>
					<c path="composeLeft.A"/>
				</f>
				<f a=":">
					<c path="composeLeft.B"/>
					<c path="composeLeft.B"/>
					<c path="composeLeft.B"/>
				</f>
				<e path="tink.core.Either">
					<c path="composeLeft.A"/>
					<c path="composeLeft.B"/>
				</e>
			</f>
			<haxe_doc>Composes two Eithers together. In case of conflicts, `Left` always wins.</haxe_doc>
		</composeLeft>
		<composeRight public="1" params="A:B" set="method" line="152" static="1">
			<f a="e1:e2:ac:bc">
				<e path="tink.core.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
				<e path="tink.core.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
				<f a=":">
					<c path="composeRight.A"/>
					<c path="composeRight.A"/>
					<c path="composeRight.A"/>
				</f>
				<f a=":">
					<c path="composeRight.B"/>
					<c path="composeRight.B"/>
					<c path="composeRight.B"/>
				</f>
				<e path="tink.core.Either">
					<c path="composeRight.A"/>
					<c path="composeRight.B"/>
				</e>
			</f>
			<haxe_doc>Composes two Eithers together. In case of conflicts, `Right` always wins.</haxe_doc>
		</composeRight>
		<unzip public="1" params="A:B:C" set="method" line="164" static="1"><f a="tp">
	<e path="stx.types.Tuple2">
		<e path="tink.core.Either">
			<c path="unzip.A"/>
			<c path="unzip.B"/>
		</e>
		<e path="tink.core.Either">
			<c path="unzip.A"/>
			<c path="unzip.C"/>
		</e>
	</e>
	<e path="tink.core.Either">
		<c path="unzip.A"/>
		<e path="stx.types.Tuple2">
			<c path="unzip.B"/>
			<c path="unzip.C"/>
		</e>
	</e>
</f></unzip>
		<flattenR public="1" params="A:B:C" set="method" line="171" static="1"><f a="e">
	<e path="tink.core.Either">
		<c path="flattenR.A"/>
		<e path="tink.core.Either">
			<c path="flattenR.A"/>
			<c path="flattenR.C"/>
		</e>
	</e>
	<e path="tink.core.Either">
		<c path="flattenR.A"/>
		<c path="flattenR.C"/>
	</e>
</f></flattenR>
		<flattenL public="1" params="A:B:C" set="method" line="181" static="1"><f a="e">
	<e path="tink.core.Either">
		<e path="tink.core.Either">
			<c path="flattenL.C"/>
			<c path="flattenL.A"/>
		</e>
		<c path="flattenL.A"/>
	</e>
	<e path="tink.core.Either">
		<c path="flattenL.C"/>
		<c path="flattenL.A"/>
	</e>
</f></flattenL>
		<either public="1" params="A" set="method" line="191" static="1"><f a="e">
	<e path="tink.core.Either">
		<c path="either.A"/>
		<c path="either.A"/>
	</e>
	<c path="either.A"/>
</f></either>
		<toBool public="1" params="T1:T2" set="method" line="197" static="1"><f a="either">
	<e path="tink.core.Either">
		<c path="toBool.T1"/>
		<c path="toBool.T2"/>
	</e>
	<x path="Bool"/>
</f></toBool>
		<toUpshot public="1" params="A" set="method" line="203" static="1"><f a="either">
	<e path="tink.core.Either">
		<c path="tink.core.Error"/>
		<c path="toUpshot.A"/>
	</e>
	<t path="stx.types.Upshot"><c path="toUpshot.A"/></t>
</f></toUpshot>
	</class>
	<class path="stx.Enums" params="" file="src/main/haxe/stx/Enums.hx">
		<create public="1" params="T" get="inline" set="null" line="10" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="create.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="create.T"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Creates an Enum.</haxe_doc>
		</create>
		<byIndex public="1" get="inline" set="null" line="16" static="1">
			<f a="e:index">
				<x path="Enum"><d/></x>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Produces the name of the Enum constructor at `index`.</haxe_doc>
		</byIndex>
		<toIndex public="1" set="method" line="22" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces the index of the EnumValue.</haxe_doc>
		</toIndex>
		<constructor public="1" set="method" line="28" static="1">
			<f a="value">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Produces the name of the constructor of `value`.</haxe_doc>
		</constructor>
		<equals public="1" params="T" set="method" line="34" static="1">
			<f a="a:b">
				<x path="EnumValue"/>
				<x path="EnumValue"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces the full equality of two Enums.</haxe_doc>
		</equals>
		<params public="1" set="method" line="40" static="1">
			<f a="value">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Produces the parameters for the given `value`.</haxe_doc>
		</params>
		<toEnum public="1" set="method" line="50" static="1">
			<f a="value">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Produces the Enum of the given `value`.</haxe_doc>
		</toEnum>
		<constructors public="1" set="method" line="56" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Produces the names of the given Enum.</haxe_doc>
		</constructors>
		<name public="1" set="method" line="62" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Produces the name of the given Enum.</haxe_doc>
		</name>
		<enumerify public="1" set="method" line="68" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Produces an Enum from the given `name`.</haxe_doc>
		</enumerify>
		<alike public="1" params="T" set="method" line="74" static="1">
			<f a="e1:e2">
				<c path="alike.T"/>
				<c path="alike.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Top level enum comparison, doesn't compare contents.</haxe_doc>
		</alike>
		<param public="1" set="method" line="80" static="1">
			<f a="e:i">
				<x path="EnumValue"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Produces parameter at index `i`.</haxe_doc>
		</param>
	</class>
	<class path="stx.Equal" params="" file="src/main/haxe/stx/Equal.hx">
		<getEqualFor public="1" params="T" set="method" line="16" static="1"><f a="v">
	<c path="getEqualFor.T"/>
	<t path="stx.types.Eq"><c path="getEqualFor.T"/></t>
</f></getEqualFor>
		<getEqualForType public="1" params="T" set="method" line="19" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.types.Eq"><c path="getEqualForType.T"/></t>
</f></getEqualForType>
		<__equals__ public="1" params="A" get="inline" set="null" line="47" static="1"><f a="impl">
	<t path="stx.types.Eq"><d/></t>
	<t path="stx.types.Eq"><c path="__equals__.A"/></t>
</f></__equals__>
		<meta><m n=":note"><e>"#0b1kn00b: The assumption that the right hand value is of the correct type could be questioned"</e></m></meta>
	</class>
	<class path="stx.UnsupportedClassEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="T" get="inline" set="null" line="56" static="1">
	<f a="a:b">
		<c path="equals.T"/>
		<c path="equals.T"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":noUsing"/></meta>
</equals></class>
	<class path="stx.NullEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="T" get="inline" set="null" line="61" static="1">
	<f a="a:b">
		<c path="equals.T"/>
		<c path="equals.T"/>
		<x path="Bool"/>
	</f>
	<meta><m n=":noUsing"/></meta>
</equals></class>
	<class path="stx.ObjectEquals" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="A" get="inline" set="null" line="66" static="1"><f a="a:b">
	<d/>
	<d/>
	<x path="Bool"/>
</f></equals></class>
	<class path="stx.OptionEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="A" get="inline" set="null" line="78" static="1"><f a="op0:op1">
	<t path="stx.types.Option"><c path="equals.A"/></t>
	<t path="stx.types.Option"><c path="equals.A"/></t>
	<x path="Bool"/>
</f></equals></class>
	<class path="stx.ProductEquals" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" get="inline" set="null" line="91" static="1"><f a="a:b">
	<c path="stx.Product"/>
	<c path="stx.Product"/>
	<x path="Bool"/>
</f></equals></class>
	<class path="stx.StringMapEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="A" get="inline" set="null" line="110" static="1"><f a="a:b">
	<c path="haxe.ds.StringMap"><c path="equals.A"/></c>
	<c path="haxe.ds.StringMap"><c path="equals.A"/></c>
	<x path="Bool"/>
</f></equals></class>
	<class path="stx.EqualsEquals" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" params="A" get="inline" set="null" line="115" static="1"><f a="a:b">
	<a><equals><f a="">
	<c path="equals.A"/>
	<x path="Bool"/>
</f></equals></a>
	<d/>
	<x path="Bool"/>
</f></equals></class>
	<class path="stx.EnumEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal"><equals public="1" get="inline" set="null" line="120" static="1">
	<f a="a:b">
		<d/>
		<d/>
		<x path="Bool"/>
	</f>
	<meta><m n=":noUsing"/></meta>
</equals></class>
	<class path="stx.ArrayEqual" params="" file="src/main/haxe/stx/Equal.hx" module="stx.Equal">
		<equals public="1" params="T" get="inline" set="null" line="136" static="1"><f a="v1:v2">
	<c path="Array"><c path="equals.T"/></c>
	<c path="Array"><c path="equals.T"/></c>
	<x path="Bool"/>
</f></equals>
		<equalsWith public="1" params="T" get="inline" set="null" line="139" static="1"><f a="v1:v2:equal">
	<c path="Array"><c path="equalsWith.T"/></c>
	<c path="Array"><c path="equalsWith.T"/></c>
	<t path="stx.types.Eq"><c path="equalsWith.T"/></t>
	<x path="Bool"/>
</f></equalsWith>
	</class>
	<class path="stx.Errors" params="" file="src/main/haxe/stx/Errors.hx"><append public="1" set="method" line="20" static="1"><f a="e0:e1">
	<c path="tink.core.Error"/>
	<c path="tink.core.Error"/>
	<c path="tink.core.Error"/>
</f></append></class>
	<class path="stx.Functions" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx"><thunk public="1" params="T" get="inline" set="null" line="12" static="1">
	<f a="v">
		<c path="thunk.T"/>
		<f a=""><c path="thunk.T"/></f>
	</f>
	<meta><m n=":noUsing"/></meta>
</thunk></class>
	<class path="stx.Codeblocks" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<equals public="1" set="method" line="23" static="1">
			<f a="a:b">
				<t path="stx.types.Codeblock"/>
				<t path="stx.types.Codeblock"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compare function identity.</haxe_doc>
		</equals>
		<promote public="1" params="A" set="method" line="29" static="1">
			<f a="f">
				<t path="stx.types.Codeblock"/>
				<f a="">
					<c path="promote.A"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that takes a parameter, ignores it, and calls `f`.</haxe_doc>
		</promote>
	</class>
	<class path="stx.Functions0" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<catching public="1" params="A:B" set="method" line="39" static="1">
			<f a="c">
				<t path="stx.types.Thunk"><c path="catching.A"/></t>
				<t path="stx.types.Thunk"><e path="tink.core.Outcome">
	<c path="catching.A"/>
	<c path="tink.core.Error"/>
</e></t>
			</f>
			<haxe_doc>Applies a `Thunk` and returns an `Outcome`</haxe_doc>
		</catching>
		<suppress public="1" params="A" set="method" line="55" static="1">
			<f a="th">
				<t path="stx.types.Thunk"><c path="suppress.A"/></t>
				<t path="stx.types.Thunk"><t path="Null"><c path="suppress.A"/></t></t>
			</f>
			<haxe_doc>Ignores error in `th` when called, instead returning a `null`</haxe_doc>
		</suppress>
		<memoize public="1" params="T" set="method" line="70" static="1">
			<f a="t">
				<t path="stx.types.Thunk"><c path="memoize.T"/></t>
				<t path="stx.types.Thunk"><c path="memoize.T"/></t>
			</f>
			<meta>
				<m n="params"><e>"The Thunk to call once"</e></m>
				<m n="returns"><e>"A Thunk which will call the input Thunk once."</e></m>
			</meta>
			<haxe_doc>Returns a Thunk that applies a Thunk one time only and stores the result, 
    after which each successive call returns the stored value.</haxe_doc>
		</memoize>
		<enclose public="1" params="R" set="method" line="83" static="1">
			<f a="f">
				<t path="stx.types.Thunk"><c path="enclose.R"/></t>
				<t path="stx.types.Codeblock"/>
			</f>
			<haxe_doc>Takes a function that returns a result, and produces one that ignores that result.</haxe_doc>
		</enclose>
		<swallow public="1" set="method" line="91" static="1">
			<f a="f">
				<t path="stx.types.Codeblock"/>
				<t path="stx.types.Codeblock"/>
			</f>
			<haxe_doc>Takes a function `f` and produces one that ignores any error the occurs whilst calling `f`.</haxe_doc>
		</swallow>
		<returning public="1" params="R1:R2" set="method" line="102" static="1">
			<f a="f:thunk">
				<f a=""><c path="returning.R1"/></f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result produced by thunk.</haxe_doc>
		</returning>
		<promote public="1" params="A:Z" set="method" line="112" static="1">
			<f a="f">
				<f a=""><c path="promote.Z"/></f>
				<f a="">
					<c path="promote.A"/>
					<c path="promote.Z"/>
				</f>
			</f>
			<haxe_doc>Produces a function that takes a parameter. ignores it, and calls `f`, returning it's result.</haxe_doc>
		</promote>
		<stage public="1" params="Z:T" set="method" line="121" static="1">
			<f a="f:before:after">
				<t path="stx.types.Thunk"><c path="stage.Z"/></t>
				<f a=""><c path="stage.T"/></f>
				<f a="">
					<c path="stage.T"/>
					<x path="Void"/>
				</f>
				<c path="stage.Z"/>
			</f>
			<haxe_doc>Produces a function that calls and stores the result of 'before', then `f`, then calls `after` with the result of 
    `before` and finally returns the result of `f`.</haxe_doc>
		</stage>
		<equals public="1" params="A" set="method" line="133" static="1">
			<f a="a:b">
				<t path="stx.types.Thunk"><c path="equals.A"/></t>
				<t path="stx.types.Thunk"><c path="equals.A"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares function identity.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Callbacks" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions"><action public="1" params="T" set="method" line="138" static="1"><f a="fn">
	<x path="tink.core.Callback"><c path="action.T"/></x>
	<f a="">
		<c path="action.T"/>
		<c path="action.T"/>
	</f>
</f></action></class>
	<class path="stx.Endos" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions"/>
	<class path="stx.Functions1" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<catching public="1" params="A:B" set="method" line="152" static="1">
			<f a="fn">
				<f a="">
					<c path="catching.A"/>
					<c path="catching.B"/>
				</f>
				<f a="">
					<c path="catching.A"/>
					<e path="tink.core.Outcome">
						<c path="catching.B"/>
						<c path="tink.core.Error"/>
					</e>
				</f>
			</f>
			<haxe_doc>Applies a Thunk and returns Either an error or it's result</haxe_doc>
		</catching>
		<curry public="1" params="P1:R" set="method" line="170" static="1">
			<f a="f">
				<f a="">
					<c path="curry.P1"/>
					<c path="curry.R"/>
				</f>
				<f a=""><f a="p1">
	<c path="curry.P1"/>
	<c path="curry.R"/>
</f></f>
			</f>
			<haxe_doc>Produces a function that produces a function for each
    parameter in the originating function. When these
    functions have been called, the result of the original function is produced.</haxe_doc>
		</curry>
		<swallow public="1" params="A" set="method" line="181" static="1">
			<f a="f">
				<f a="">
					<c path="swallow.A"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="swallow.A"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst
    calling the input function.</haxe_doc>
		</swallow>
		<swallowWith public="1" params="P1:R" set="method" line="189" static="1">
			<f a="f:d">
				<f a="">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.R"/>
				</f>
				<c path="swallowWith.R"/>
				<f a="">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores
    any error the occurs whilst calling the input function, and produces `d` if
    error occurs.</haxe_doc>
		</swallowWith>
		<returning public="1" params="P1:R1:R2" set="method" line="202" static="1">
			<f a="f:thunk">
				<f a="">
					<c path="returning.P1"/>
					<c path="returning.R1"/>
				</f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<f a="">
					<c path="returning.P1"/>
					<c path="returning.R2"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result
    produced by thunk.</haxe_doc>
		</returning>
		<lazy public="1" params="P1:R" get="inline" set="null" line="213" static="1">
			<f a="f:p1">
				<f a="">
					<c path="lazy.P1"/>
					<c path="lazy.R"/>
				</f>
				<c path="lazy.P1"/>
				<t path="stx.types.Thunk"><c path="lazy.R"/></t>
			</f>
			<meta><m n=":note"><e>"those brackets are there to fox the Java compiler"</e></m></meta>
			<haxe_doc>Produces a function that calls `f` with the given parameters `p1....pn`.</haxe_doc>
		</lazy>
		<enclose public="1" params="P1:R" set="method" line="228" static="1">
			<f a="f">
				<f a="">
					<c path="enclose.P1"/>
					<c path="enclose.R"/>
				</f>
				<f a="">
					<c path="enclose.P1"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignoring the result.</haxe_doc>
		</enclose>
		<equals public="1" params="P1:R" set="method" line="236" static="1">
			<f a="a:b">
				<f a="">
					<c path="equals.P1"/>
					<c path="equals.R"/>
				</f>
				<f a="">
					<c path="equals.P1"/>
					<c path="equals.R"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares function identity.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Functions2" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<ccw public="1" params="P1:P2:R" set="method" line="244" static="1">
			<f a="f">
				<f a=":">
					<c path="ccw.P1"/>
					<c path="ccw.P2"/>
					<c path="ccw.R"/>
				</f>
				<f a=":">
					<c path="ccw.P2"/>
					<c path="ccw.P1"/>
					<c path="ccw.R"/>
				</f>
			</f>
			<haxe_doc>Places parameter 1 at the back.</haxe_doc>
		</ccw>
		<swallow public="1" params="P1:P2" set="method" line="252" static="1">
			<f a="f">
				<f a=":">
					<c path="swallow.P1"/>
					<c path="swallow.P2"/>
					<x path="Void"/>
				</f>
				<f a=":">
					<c path="swallow.P1"/>
					<c path="swallow.P2"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function.</haxe_doc>
		</swallow>
		<swallowWith public="1" params="P1:P2:R" set="method" line="258" static="1">
			<f a="f:d">
				<f a=":">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.P2"/>
					<c path="swallowWith.R"/>
				</f>
				<c path="swallowWith.R"/>
				<f a=":">
					<c path="swallowWith.P1"/>
					<c path="swallowWith.P2"/>
					<c path="swallowWith.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function, and produces `d` if error occurs.</haxe_doc>
		</swallowWith>
		<returning public="1" params="P1:P2:R1:R2" set="method" line="270" static="1">
			<f a="f:thunk">
				<f a=":">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.R1"/>
				</f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<f a=":">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.R2"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result produced by thunk.</haxe_doc>
		</returning>
		<flip public="1" params="P1:P2:R" set="method" line="280" static="1">
			<f a="f">
				<f a=":">
					<c path="flip.P1"/>
					<c path="flip.P2"/>
					<c path="flip.R"/>
				</f>
				<f a=":">
					<c path="flip.P2"/>
					<c path="flip.P1"/>
					<c path="flip.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function which takes the parameters of `f` in a flipped order.</haxe_doc>
		</flip>
		<curry public="1" params="P1:P2:R" set="method" line="289" static="1">
			<f a="f">
				<f a=":">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.R"/>
				</f>
				<f a="">
					<c path="curry.P1"/>
					<f a="">
						<c path="curry.P2"/>
						<c path="curry.R"/>
					</f>
				</f>
			</f>
			<haxe_doc>Produces a function that produces a function for each parameter in the originating function. When these
    functions have been called, the result of the original function is returned.</haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:R" set="method" line="300" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.P1"/>
					<f a="">
						<c path="uncurry.P2"/>
						<c path="uncurry.R"/>
					</f>
				</f>
				<f a=":">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.R"/>
				</f>
			</f>
			<haxe_doc>Takes a function with one parameter that returns a function of one parameter, and produces
    a function that takes two parameters that calls the two functions sequentially,</haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:R" set="method" line="308" static="1">
			<f a="f:p1:p2">
				<f a=":">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.R"/>
				</f>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<t path="stx.types.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>Produdes a function that calls `f` with the given parameters `p1....pn`, and caches the result</haxe_doc>
		</lazy>
		<defer public="1" params="P1:P2:R" set="method" line="318" static="1">
			<f a="f:p1:p2">
				<f a=":">
					<c path="defer.P1"/>
					<c path="defer.P2"/>
					<c path="defer.R"/>
				</f>
				<c path="defer.P1"/>
				<c path="defer.P2"/>
				<t path="stx.types.Thunk"><c path="defer.R"/></t>
			</f>
			<haxe_doc>As with lazy, but calls the wrapped function every time it is called.</haxe_doc>
		</defer>
		<enclose public="1" params="P1:P2:R" set="method" line="326" static="1">
			<f a="f">
				<f a=":">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.R"/>
				</f>
				<f a=":">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignoring the result.</haxe_doc>
		</enclose>
		<equals public="1" params="P1:P2:R" set="method" line="334" static="1">
			<f a="a:b">
				<f a=":">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.R"/>
				</f>
				<f a=":">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.R"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares function identity.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Functions3" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<ccw public="1" params="P1:P2:P3:R" set="method" line="342" static="1">
			<f a="f">
				<f a="::">
					<c path="ccw.P1"/>
					<c path="ccw.P2"/>
					<c path="ccw.P3"/>
					<c path="ccw.R"/>
				</f>
				<f a="::">
					<c path="ccw.P2"/>
					<c path="ccw.P3"/>
					<c path="ccw.P1"/>
					<c path="ccw.R"/>
				</f>
			</f>
			<haxe_doc>Places first parameter at the back.</haxe_doc>
		</ccw>
		<swallow public="1" params="A:B:C" set="method" line="350" static="1">
			<f a="f">
				<f a="::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function.</haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:R" set="method" line="356" static="1">
			<f a="f:d">
				<f a="::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.R"/>
				</f>
				<c path="swallowWith.R"/>
				<f a="::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function, and produces `d` if error occurs.</haxe_doc>
		</swallowWith>
		<returning public="1" params="P1:P2:P3:R1:R2" set="method" line="368" static="1">
			<f a="f:thunk">
				<f a="::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.R1"/>
				</f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<f a="::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.R2"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result produced by thunk.</haxe_doc>
		</returning>
		<curry public="1" params="P1:P2:P3:R" set="method" line="379" static="1">
			<f a="f">
				<f a="::">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.R"/>
				</f>
				<f a="">
					<c path="curry.P1"/>
					<f a="">
						<c path="curry.P2"/>
						<f a="">
							<c path="curry.P3"/>
							<c path="curry.R"/>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc>Produces a function that produces a function for each parameter in the originating function. When these
    functions have been called, the result of the original function is produced.</haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:R" set="method" line="392" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.P1"/>
					<f a="">
						<c path="uncurry.P2"/>
						<f a="">
							<c path="uncurry.P3"/>
							<c path="uncurry.R"/>
						</f>
					</f>
				</f>
				<f a="::">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.R"/>
				</f>
			</f>
			<haxe_doc>Takes a function with one parameter that returns a function of one parameter, and produces
    a function that takes two parameters that calls the two functions sequentially,</haxe_doc>
		</uncurry>
		<uncurry2 public="1" params="P1:P2:P3:R" set="method" line="397" static="1"><f a="f">
	<f a="">
		<c path="uncurry2.P1"/>
		<f a="">
			<c path="uncurry2.P2"/>
			<f a="">
				<c path="uncurry2.P3"/>
				<c path="uncurry2.R"/>
			</f>
		</f>
	</f>
	<f a=":">
		<c path="uncurry2.P1"/>
		<c path="uncurry2.P2"/>
		<f a="">
			<c path="uncurry2.P3"/>
			<c path="uncurry2.R"/>
		</f>
	</f>
</f></uncurry2>
		<lazy public="1" params="P1:P2:P3:R" set="method" line="407" static="1">
			<f a="f:p1:p2:p3">
				<f a="::">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.R"/>
				</f>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<t path="stx.types.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>Produdes a function that calls `f` with the given parameters `p1....pn`.</haxe_doc>
		</lazy>
		<enclose public="1" params="P1:P2:P3:R" set="method" line="417" static="1">
			<f a="f">
				<f a="::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<c path="enclose.R"/>
				</f>
				<f a="::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignoring the result.</haxe_doc>
		</enclose>
		<equals public="1" params="P1:P2:P3:R" set="method" line="425" static="1">
			<f a="a:b">
				<f a="::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.R"/>
				</f>
				<f a="::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.R"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares function identity.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Functions4" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<ccw public="1" params="P1:P2:P3:P4:R" set="method" line="433" static="1">
			<f a="f">
				<f a=":::">
					<c path="ccw.P1"/>
					<c path="ccw.P2"/>
					<c path="ccw.P3"/>
					<c path="ccw.P4"/>
					<c path="ccw.R"/>
				</f>
				<f a=":::">
					<c path="ccw.P2"/>
					<c path="ccw.P3"/>
					<c path="ccw.P4"/>
					<c path="ccw.P1"/>
					<c path="ccw.R"/>
				</f>
			</f>
			<haxe_doc>Pushes first parameter to the last</haxe_doc>
		</ccw>
		<swallow public="1" params="A:B:C:D" set="method" line="441" static="1">
			<f a="f">
				<f a=":::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<x path="Void"/>
				</f>
				<f a=":::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function.</haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:D:R" set="method" line="447" static="1">
			<f a="f:def">
				<f a=":::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.R"/>
				</f>
				<c path="swallowWith.R"/>
				<f a=":::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function, and produces `d` if error occurs.</haxe_doc>
		</swallowWith>
		<returning public="1" params="P1:P2:P3:P4:R1:R2" set="method" line="459" static="1">
			<f a="f:thunk">
				<f a=":::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.R1"/>
				</f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<f a=":::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.R2"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result produced by thunk.</haxe_doc>
		</returning>
		<curry public="1" params="P1:P2:P3:P4:R" set="method" line="470" static="1">
			<f a="f">
				<f a=":::">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.P4"/>
					<c path="curry.R"/>
				</f>
				<f a="">
					<c path="curry.P1"/>
					<f a="">
						<c path="curry.P2"/>
						<f a="">
							<c path="curry.P3"/>
							<f a="">
								<c path="curry.P4"/>
								<c path="curry.R"/>
							</f>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc>Produces a function that produces a function for each parameter in the originating function. When these
    functions have been called, the result of the original function is produced.</haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:P4:R" set="method" line="485" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.P1"/>
					<f a="">
						<c path="uncurry.P2"/>
						<f a="">
							<c path="uncurry.P3"/>
							<f a="">
								<c path="uncurry.P4"/>
								<c path="uncurry.R"/>
							</f>
						</f>
					</f>
				</f>
				<f a=":::">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.P4"/>
					<c path="uncurry.R"/>
				</f>
			</f>
			<haxe_doc>Takes a function with one parameter that returns a function of one parameter, and produces
    a function that takes two parameters that calls the two functions sequentially,</haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:P3:P4:R" set="method" line="493" static="1">
			<f a="f:p1:p2:p3:p4">
				<f a=":::">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.P4"/>
					<c path="lazy.R"/>
				</f>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<c path="lazy.P4"/>
				<t path="stx.types.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>Produdes a function that calls `f` with the given parameters `p1....pn`.</haxe_doc>
		</lazy>
		<enclose public="1" params="P1:P2:P3:P4:R" set="method" line="503" static="1">
			<f a="f">
				<f a=":::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<c path="enclose.P4"/>
					<c path="enclose.R"/>
				</f>
				<f a=":::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<c path="enclose.P4"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignoring the result.</haxe_doc>
		</enclose>
		<equals public="1" params="P1:P2:P3:P4:R" set="method" line="511" static="1">
			<f a="a:b">
				<f a=":::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.P4"/>
					<c path="equals.R"/>
				</f>
				<f a=":::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.P4"/>
					<c path="equals.R"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares identity of methods.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Functions5" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions">
		<ccw public="1" params="P1:P2:P3:P4:P5:R" set="method" line="516" static="1"><f a="f">
	<f a="::::">
		<c path="ccw.P1"/>
		<c path="ccw.P2"/>
		<c path="ccw.P3"/>
		<c path="ccw.P4"/>
		<c path="ccw.P5"/>
		<c path="ccw.R"/>
	</f>
	<f a="::::">
		<c path="ccw.P2"/>
		<c path="ccw.P3"/>
		<c path="ccw.P4"/>
		<c path="ccw.P5"/>
		<c path="ccw.P1"/>
		<c path="ccw.R"/>
	</f>
</f></ccw>
		<swallow public="1" params="A:B:C:D:E" set="method" line="524" static="1">
			<f a="f">
				<f a="::::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<c path="swallow.E"/>
					<x path="Void"/>
				</f>
				<f a="::::">
					<c path="swallow.A"/>
					<c path="swallow.B"/>
					<c path="swallow.C"/>
					<c path="swallow.D"/>
					<c path="swallow.E"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function.</haxe_doc>
		</swallow>
		<swallowWith public="1" params="A:B:C:D:E:R" set="method" line="530" static="1">
			<f a="f:def">
				<f a="::::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.E"/>
					<c path="swallowWith.R"/>
				</f>
				<c path="swallowWith.R"/>
				<f a="::::">
					<c path="swallowWith.A"/>
					<c path="swallowWith.B"/>
					<c path="swallowWith.C"/>
					<c path="swallowWith.D"/>
					<c path="swallowWith.E"/>
					<c path="swallowWith.R"/>
				</f>
			</f>
			<haxe_doc>Produces a function that ignores any error the occurs whilst calling the input function, and produces `d` if error occurs.</haxe_doc>
		</swallowWith>
		<returning public="1" params="P1:P2:P3:P4:P5:R1:R2" set="method" line="542" static="1">
			<f a="f:thunk">
				<f a="::::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.P5"/>
					<c path="returning.R1"/>
				</f>
				<t path="stx.types.Thunk"><c path="returning.R2"/></t>
				<f a="::::">
					<c path="returning.P1"/>
					<c path="returning.P2"/>
					<c path="returning.P3"/>
					<c path="returning.P4"/>
					<c path="returning.P5"/>
					<c path="returning.R2"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignores its result, and returns the result produced by thunk.</haxe_doc>
		</returning>
		<curry public="1" params="P1:P2:P3:P4:P5:R" set="method" line="553" static="1">
			<f a="f">
				<f a="::::">
					<c path="curry.P1"/>
					<c path="curry.P2"/>
					<c path="curry.P3"/>
					<c path="curry.P4"/>
					<c path="curry.P5"/>
					<c path="curry.R"/>
				</f>
				<f a="p1">
					<c path="curry.P1"/>
					<f a="p2">
						<c path="curry.P2"/>
						<f a="p3">
							<c path="curry.P3"/>
							<f a="p4">
								<c path="curry.P4"/>
								<f a="p5">
									<c path="curry.P5"/>
									<c path="curry.R"/>
								</f>
							</f>
						</f>
					</f>
				</f>
			</f>
			<haxe_doc>Produces a function that produces a function for each parameter in the originating function. When these
    functions have been called, the result of the original function is produced.</haxe_doc>
		</curry>
		<uncurry public="1" params="P1:P2:P3:P4:P5:R" set="method" line="571" static="1">
			<f a="f">
				<f a="">
					<c path="uncurry.P1"/>
					<f a="">
						<c path="uncurry.P2"/>
						<f a="">
							<c path="uncurry.P3"/>
							<f a="">
								<c path="uncurry.P4"/>
								<f a="">
									<c path="uncurry.P5"/>
									<c path="uncurry.R"/>
								</f>
							</f>
						</f>
					</f>
				</f>
				<f a="::::">
					<c path="uncurry.P1"/>
					<c path="uncurry.P2"/>
					<c path="uncurry.P3"/>
					<c path="uncurry.P4"/>
					<c path="uncurry.P5"/>
					<c path="uncurry.R"/>
				</f>
			</f>
			<haxe_doc>Takes a function with one parameter that returns a function of one parameter, and produces
    a function that takes two parameters that calls the two functions sequentially,</haxe_doc>
		</uncurry>
		<lazy public="1" params="P1:P2:P3:P4:P5:R" set="method" line="579" static="1">
			<f a="f:p1:p2:p3:p4:p5">
				<f a="::::">
					<c path="lazy.P1"/>
					<c path="lazy.P2"/>
					<c path="lazy.P3"/>
					<c path="lazy.P4"/>
					<c path="lazy.P5"/>
					<c path="lazy.R"/>
				</f>
				<c path="lazy.P1"/>
				<c path="lazy.P2"/>
				<c path="lazy.P3"/>
				<c path="lazy.P4"/>
				<c path="lazy.P5"/>
				<t path="stx.types.Thunk"><c path="lazy.R"/></t>
			</f>
			<haxe_doc>Produdes a function that calls `f` with the given parameters `p1....pn`.</haxe_doc>
		</lazy>
		<enclose public="1" params="P1:P2:P3:P4:P5:R" set="method" line="589" static="1">
			<f a="f">
				<f a="::::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<c path="enclose.P4"/>
					<c path="enclose.P5"/>
					<c path="enclose.R"/>
				</f>
				<f a="::::">
					<c path="enclose.P1"/>
					<c path="enclose.P2"/>
					<c path="enclose.P3"/>
					<c path="enclose.P4"/>
					<c path="enclose.P5"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Produces a function that calls `f`, ignoring the result.</haxe_doc>
		</enclose>
		<equals public="1" params="P1:P2:P3:P4:P5:R" set="method" line="597" static="1">
			<f a="a:b">
				<f a="::::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.P4"/>
					<c path="equals.P5"/>
					<c path="equals.R"/>
				</f>
				<f a="::::">
					<c path="equals.P1"/>
					<c path="equals.P2"/>
					<c path="equals.P3"/>
					<c path="equals.P4"/>
					<c path="equals.P5"/>
					<c path="equals.R"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Method equals.</haxe_doc>
		</equals>
	</class>
	<class path="stx.Functions6" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/Functions.hx" module="stx.Functions"><curry public="1" params="P1:P2:P3:P4:P5:P6:R" set="method" line="602" static="1"><f a="f">
	<f a=":::::">
		<c path="curry.P1"/>
		<c path="curry.P2"/>
		<c path="curry.P3"/>
		<c path="curry.P4"/>
		<c path="curry.P5"/>
		<c path="curry.P6"/>
		<c path="curry.R"/>
	</f>
	<f a="">
		<c path="curry.P1"/>
		<f a="">
			<c path="curry.P2"/>
			<f a="">
				<c path="curry.P3"/>
				<f a="">
					<c path="curry.P4"/>
					<f a="">
						<c path="curry.P5"/>
						<f a="">
							<c path="curry.P6"/>
							<c path="curry.R"/>
						</f>
					</f>
				</f>
			</f>
		</f>
	</f>
</f></curry></class>
	<class path="stx.Generator" params="T" file="src/main/haxe/stx/Generator.hx">
		<create public="1" set="method" line="15" static="1"><f a="fn:stack">
	<f a=""><e path="haxe.ds.Option"><unknown/></e></f>
	<c path="Array"><e path="haxe.ds.Option"><unknown/></e></c>
	<c path="stx.Generator"><unknown/></c>
</f></create>
		<yielding public="1" params="A" set="method" line="56" static="1">
			<f a="fn">
				<f a=""><e path="haxe.ds.Option"><c path="yielding.A"/></e></f>
				<t path="Iterable"><c path="yielding.A"/></t>
			</f>
			<haxe_doc>Creates an Iterable by calling fn until it returns None, caching the results.</haxe_doc>
		</yielding>
		<fn><f a="">
	<x path="Int"/>
	<e path="haxe.ds.Option"><c path="stx.Generator.T"/></e>
</f></fn>
		<index><x path="Int"/></index>
		<next public="1" set="method" line="34"><f a=""><c path="stx.Generator.T"/></f></next>
		<hasNext public="1" set="method" line="39"><f a=""><x path="Bool"/></f></hasNext>
		<iterator public="1" set="method" line="46"><f a=""><a>
	<next><f a=""><c path="stx.Generator.T"/></f></next>
	<hasNext><f a=""><x path="Bool"/></f></hasNext>
</a></f></iterator>
		<new public="1" set="method" line="18"><f a="f:stack">
	<f a=""><e path="haxe.ds.Option"><c path="stx.Generator.T"/></e></f>
	<c path="Array"><e path="haxe.ds.Option"><c path="stx.Generator.T"/></e></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>An iterable based on values accumulated on a stack by calling a function.
  When the function returns None, the iteration is considered complete.

  Each successive value is pushed onto a stack.</haxe_doc>
	</class>
	<class path="stx.Iterables" params="" file="src/main/haxe/stx/Iterables.hx">
		<unfold public="1" params="T:R" get="inline" set="null" line="18" static="1"><f a="initial:unfolder">
	<c path="unfold.T"/>
	<f a="">
		<c path="unfold.T"/>
		<e path="haxe.ds.Option"><e path="stx.types.Tuple2">
	<c path="unfold.T"/>
	<c path="unfold.R"/>
</e></e>
	</f>
	<t path="Iterable"><c path="unfold.R"/></t>
</f></unfold>
		<create public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="has:nxt">
				<f a=""><x path="Bool"/></f>
				<f a=""><c path="create.T"/></f>
				<t path="Iterable"><c path="create.T"/></t>
			</f>
			<meta><m n=":noUsing"/></meta>
		</create>
		<toArray public="1" params="T" set="method" line="62" static="1">
			<f a="i">
				<t path="Iterable"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc>Creates an `Array` from an `Iterable`.</haxe_doc>
		</toArray>
		<toIterable public="1" params="T" set="method" line="70" static="1">
			<f a="it">
				<t path="Iterator"><c path="toIterable.T"/></t>
				<t path="Iterable"><c path="toIterable.T"/></t>
			</f>
			<haxe_doc>Creates an `Iterable` from an `Iterator`.</haxe_doc>
		</toIterable>
		<map public="1" params="T:Z" set="method" line="83" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.Z"/>
				</f>
				<t path="Iterable"><c path="map.Z"/></t>
			</f>
			<haxe_doc>Applies function `f` to each element in `iter`, returning the results</haxe_doc>
		</map>
		<flatMap public="1" params="T:Z" set="method" line="92" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="flatMap.T"/></t>
				<f a="">
					<c path="flatMap.T"/>
					<t path="Iterable"><c path="flatMap.Z"/></t>
				</f>
				<t path="Iterable"><c path="flatMap.Z"/></t>
			</f>
			<haxe_doc>Applies function `f` to each element in `iter`, appending and returning the results.</haxe_doc>
		</flatMap>
		<foldLeft public="1" params="T:Z" set="method" line="107" static="1">
			<f a="iter:seed:mapper">
				<t path="Iterable"><c path="foldLeft.T"/></t>
				<c path="foldLeft.Z"/>
				<f a=":">
					<c path="foldLeft.Z"/>
					<c path="foldLeft.T"/>
					<c path="foldLeft.Z"/>
				</f>
				<c path="foldLeft.Z"/>
			</f>
			<haxe_doc>Using starting var `z`, run `f` on each element, storing the result, and passing that result 
    into the next call.
    ```
    [1,2,3,4,5].foldLeft( 100, function(init,v) return init + v ));//(((((100 + 1) + 2) + 3) + 4) + 5)
    ```</haxe_doc>
		</foldLeft>
		<filter public="1" params="T" set="method" line="115" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="filter.T"/></t>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="filter.T"/></t>
			</f>
			<haxe_doc>Call `f` on each element in `iter`, returning a collection where `f(e) == true`.</haxe_doc>
		</filter>
		<size public="1" params="T" set="method" line="121" static="1">
			<f a="iterable">
				<t path="Iterable"><c path="size.T"/></t>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the size of `iter`</haxe_doc>
		</size>
		<each public="1" params="T" set="method" line="131" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="each.T"/></t>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<t path="Iterable"><c path="each.T"/></t>
			</f>
			<haxe_doc>Apply `f` to each element in `iter`.</haxe_doc>
		</each>
		<foldLeft1 public="1" params="T:T" set="method" line="138" static="1">
			<f a="iter:mapper">
				<t path="Iterable"><c path="foldLeft1.T"/></t>
				<f a=":">
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
				</f>
				<c path="foldLeft1.T"/>
			</f>
			<haxe_doc>Performs a `foldLeft`, using the first value as the init value.</haxe_doc>
		</foldLeft1>
		<concat public="1" params="T" set="method" line="150" static="1">
			<f a="iter1:iter2">
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
				<t path="Iterable"><c path="concat.T"/></t>
			</f>
			<haxe_doc>Concatenates two `Iterables`</haxe_doc>
		</concat>
		<foldRight public="1" params="T:Z" set="method" line="155" static="1">
			<f a="iterable:z:f">
				<t path="Iterable"><c path="foldRight.T"/></t>
				<c path="foldRight.Z"/>
				<f a=":">
					<c path="foldRight.T"/>
					<c path="foldRight.Z"/>
					<c path="foldRight.Z"/>
				</f>
				<c path="foldRight.Z"/>
			</f>
			<haxe_doc>Fold the collection from the right hand side.</haxe_doc>
		</foldRight>
		<headOption public="1" params="T" set="method" line="161" static="1">
			<f a="iter">
				<t path="Iterable"><c path="headOption.T"/></t>
				<e path="haxe.ds.Option"><c path="headOption.T"/></e>
			</f>
			<haxe_doc>Produces the first element of `iter` as an `Option`, `None` if the `Iterable` is empty.</haxe_doc>
		</headOption>
		<head public="1" params="T" set="method" line="172" static="1">
			<f a="iter">
				<t path="Iterable"><c path="head.T"/></t>
				<c path="head.T"/>
			</f>
			<haxe_doc>Produces the first elelment of `iter`, throwing an error if it is empty.</haxe_doc>
		</head>
		<tailOption public="1" params="T" set="method" line="181" static="1">
			<f a="iter">
				<t path="Iterable"><c path="tailOption.T"/></t>
				<e path="haxe.ds.Option"><t path="Iterable"><c path="tailOption.T"/></t></e>
			</f>
			<haxe_doc>Drops the first value, returning `Some` if there are further values, `None` if there aren't.</haxe_doc>
		</tailOption>
		<tail public="1" params="T" set="method" line="192" static="1">
			<f a="iter">
				<t path="Iterable"><c path="tail.T"/></t>
				<t path="Iterable"><c path="tail.T"/></t>
			</f>
			<haxe_doc>Take `element[1...n]` from the `Iterable`, or if `Iterable.size() == 1`, element[0]
    Throws an error if no further values exist.</haxe_doc>
		</tail>
		<drop public="1" params="T" set="method" line="201" static="1">
			<f a="iter:n">
				<t path="Iterable"><c path="drop.T"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="drop.T"/></t>
			</f>
			<haxe_doc>Drop `n` values from `iter`</haxe_doc>
		</drop>
		<dropWhile public="1" params="T" set="method" line="220" static="1">
			<f a="iter:p">
				<t path="Iterable"><c path="dropWhile.T"/></t>
				<f a="">
					<c path="dropWhile.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="dropWhile.T"/></t>
			</f>
			<haxe_doc>Drop values from `iter` while `p(e) == true.`</haxe_doc>
		</dropWhile>
		<take public="1" params="T" set="method" line="238" static="1">
			<f a="iter:n">
				<t path="Iterable"><c path="take.T"/></t>
				<x path="Int"/>
				<t path="Iterable"><c path="take.T"/></t>
			</f>
			<haxe_doc>Return the first `n` values from `iter`.</haxe_doc>
		</take>
		<takeWhile public="1" params="T" set="method" line="251" static="1">
			<f a="a:p">
				<t path="Iterable"><c path="takeWhile.T"/></t>
				<f a="">
					<c path="takeWhile.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="takeWhile.T"/></t>
			</f>
			<haxe_doc>Return the first values where `p(e) == true` until `p(e) == false`.</haxe_doc>
		</takeWhile>
		<has public="1" params="T" set="method" line="263" static="1">
			<f a="iter:value:?eq" v="::null">
				<t path="Iterable"><c path="has.T"/></t>
				<c path="has.T"/>
				<f a=":">
					<c path="has.T"/>
					<c path="has.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if any `eq` returns true, using `value`.</haxe_doc>
		</has>
		<nubBy public="1" params="T" set="method" line="273" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="nubBy.T"/></t>
				<f a=":">
					<c path="nubBy.T"/>
					<c path="nubBy.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="nubBy.T"/></t>
			</f>
			<haxe_doc>Perform nub using `f` as a comparator.</haxe_doc>
		</nubBy>
		<nub public="1" params="T" set="method" line="287" static="1">
			<f a="iter">
				<t path="Iterable"><c path="nub.T"/></t>
				<t path="Iterable"><c path="nub.T"/></t>
			</f>
			<haxe_doc>Compare each element to the next, returning the values which have no adjacent equal values.</haxe_doc>
		</nub>
		<at public="1" params="T" set="method" line="298" static="1">
			<f a="iter:index">
				<t path="Iterable"><c path="at.T"/></t>
				<x path="Int"/>
				<c path="at.T"/>
			</f>
			<haxe_doc>Produces the value at `index`, throwing an error if the index doesn't exist.</haxe_doc>
		</at>
		<flatten public="1" params="T" set="method" line="315" static="1">
			<f a="iter">
				<t path="Iterable"><t path="Iterable"><c path="flatten.T"/></t></t>
				<t path="Iterable"><c path="flatten.T"/></t>
			</f>
			<haxe_doc>flatten an iterable of iterables to an iterable.</haxe_doc>
		</flatten>
		<interleave public="1" params="T" set="method" line="322" static="1">
			<f a="iter">
				<t path="Iterable"><t path="Iterable"><c path="interleave.T"/></t></t>
				<t path="Iterable"><c path="interleave.T"/></t>
			</f>
			<haxe_doc>For each Iterable, take each element and flatten to an output.</haxe_doc>
		</interleave>
		<zip public="1" params="T1:T2" set="method" line="333" static="1">
			<f a="iter1:iter2">
				<t path="Iterable"><c path="zip.T1"/></t>
				<t path="Iterable"><c path="zip.T2"/></t>
				<t path="Iterable"><e path="stx.types.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</e></t>
			</f>
			<haxe_doc>Produces an Iterable of Tuples where the left side of each element is taken from `iter1` and the right is taken from `iter2`.</haxe_doc>
		</zip>
		<zipup public="1" params="T1:T2" set="method" line="351" static="1">
			<f a="tuple">
				<e path="stx.types.Tuple2">
					<t path="Iterable"><c path="zipup.T1"/></t>
					<t path="Iterable"><c path="zipup.T2"/></t>
				</e>
				<t path="Iterable"><e path="stx.types.Tuple2">
	<c path="zipup.T1"/>
	<c path="zipup.T2"/>
</e></t>
			</f>
			<haxe_doc>Zip an Iterable of tuples from a tuple of iterables</haxe_doc>
		</zipup>
		<zipWith public="1" params="A:B:C" set="method" line="368" static="1">
			<f a="a:b:f">
				<t path="Iterable"><c path="zipWith.A"/></t>
				<t path="Iterable"><c path="zipWith.B"/></t>
				<f a=":">
					<c path="zipWith.A"/>
					<c path="zipWith.B"/>
					<c path="zipWith.C"/>
				</f>
				<t path="Iterable"><c path="zipWith.C"/></t>
			</f>
			<haxe_doc>Produces an `Array` of the result of `f` where the left parameter is `a[n]`, and the right: `b[n]`</haxe_doc>
		</zipWith>
		<zipWithIndex public="1" params="A" set="method" line="375" static="1">
			<f a="a">
				<t path="Iterable"><c path="zipWithIndex.A"/></t>
				<t path="Iterable"><e path="stx.types.Tuple2">
	<c path="zipWithIndex.A"/>
	<x path="Int"/>
</e></t>
			</f>
			<haxe_doc>Performs a `zip` where the resulting `Tuple2` has the element on the left, and it's index on the right</haxe_doc>
		</zipWithIndex>
		<zipWithIndexWith public="1" params="A:B" set="method" line="381" static="1">
			<f a="a:f">
				<t path="Iterable"><c path="zipWithIndexWith.A"/></t>
				<f a=":">
					<c path="zipWithIndexWith.A"/>
					<x path="Int"/>
					<c path="zipWithIndexWith.B"/>
				</f>
				<t path="Iterable"><c path="zipWithIndexWith.B"/></t>
			</f>
			<haxe_doc>Performs a `zip` with the right hand parameter is the index of the element.</haxe_doc>
		</zipWithIndexWith>
		<add public="1" params="T" set="method" line="388" static="1">
			<f a="iter:e">
				<t path="Iterable"><c path="add.T"/></t>
				<c path="add.T"/>
				<t path="Iterable"><c path="add.T"/></t>
			</f>
			<haxe_doc>Append `e` to the end of `iter`.</haxe_doc>
		</add>
		<cons public="1" params="T" set="method" line="398" static="1">
			<f a="iter:e">
				<t path="Iterable"><c path="cons.T"/></t>
				<c path="cons.T"/>
				<t path="Iterable"><c path="cons.T"/></t>
			</f>
			<haxe_doc>Returns an iterable with an element prepended.</haxe_doc>
		</cons>
		<reversed public="1" params="T" set="method" line="408" static="1">
			<f a="iter">
				<t path="Iterable"><c path="reversed.T"/></t>
				<t path="Iterable"><c path="reversed.T"/></t>
			</f>
			<haxe_doc>Returns the Iterable with elements in reverse order.</haxe_doc>
		</reversed>
		<and public="1" params="T" set="method" line="418" static="1">
			<f a="iter">
				<t path="Iterable"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns that all elements in `iter` are true.</haxe_doc>
		</and>
		<or public="1" params="T" set="method" line="430" static="1">
			<f a="iter">
				<t path="Iterable"><x path="Bool"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns that any element in `iter` is true.</haxe_doc>
		</or>
		<scanl public="1" params="T" set="method" line="447" static="1">
			<f a="iter:init:f">
				<t path="Iterable"><c path="scanl.T"/></t>
				<c path="scanl.T"/>
				<f a=":">
					<c path="scanl.T"/>
					<c path="scanl.T"/>
					<c path="scanl.T"/>
				</f>
				<t path="Iterable"><c path="scanl.T"/></t>
			</f>
			<haxe_doc>Takes an initial value which is passed to function `f` along with each element
    one by one, accumulating the results.
    ```
    f(element,memo)
    ```</haxe_doc>
		</scanl>
		<scanr public="1" params="T" set="method" line="458" static="1">
			<f a="iter:init:f">
				<t path="Iterable"><c path="scanr.T"/></t>
				<c path="scanr.T"/>
				<f a=":">
					<c path="scanr.T"/>
					<c path="scanr.T"/>
					<c path="scanr.T"/>
				</f>
				<t path="Iterable"><c path="scanr.T"/></t>
			</f>
			<haxe_doc>As scanl but from the end of the Iterable.</haxe_doc>
		</scanr>
		<scanl1 public="1" params="T" set="method" line="464" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="scanl1.T"/></t>
				<f a=":">
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
					<c path="scanl1.T"/>
				</f>
				<t path="Iterable"><c path="scanl1.T"/></t>
			</f>
			<haxe_doc>As scanl, but using the first element as the second parameter of `f`</haxe_doc>
		</scanl1>
		<scanr1 public="1" params="T" set="method" line="479" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="scanr1.T"/></t>
				<f a=":">
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
					<c path="scanr1.T"/>
				</f>
				<t path="Iterable"><c path="scanr1.T"/></t>
			</f>
			<haxe_doc>As scanr, but using the first element as the second parameter of `f`.</haxe_doc>
		</scanr1>
		<existsP public="1" params="T" set="method" line="483" static="1">
			<f a="iter:ref:f">
				<t path="Iterable"><c path="existsP.T"/></t>
				<c path="existsP.T"/>
				<f a=":">
					<c path="existsP.T"/>
					<c path="existsP.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</existsP>
		<intersectBy public="1" params="T" set="method" line="495" static="1">
			<f a="iter1:iter2:f">
				<t path="Iterable"><c path="intersectBy.T"/></t>
				<t path="Iterable"><c path="intersectBy.T"/></t>
				<f a=":">
					<c path="intersectBy.T"/>
					<c path="intersectBy.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="intersectBy.T"/></t>
			</f>
			<haxe_doc>Return an Iterable of values contained in both inputs, as decided by `f`</haxe_doc>
		</intersectBy>
		<intersect public="1" params="T" set="method" line="503" static="1">
			<f a="iter1:iter2">
				<t path="Iterable"><c path="intersect.T"/></t>
				<t path="Iterable"><c path="intersect.T"/></t>
				<t path="Iterable"><c path="intersect.T"/></t>
			</f>
			<haxe_doc>Return an Iterable of values contained in both inputs.</haxe_doc>
		</intersect>
		<unionBy public="1" params="T" set="method" line="511" static="1">
			<f a="iter1:iter2:f">
				<t path="Iterable"><c path="unionBy.T"/></t>
				<t path="Iterable"><c path="unionBy.T"/></t>
				<f a=":">
					<c path="unionBy.T"/>
					<c path="unionBy.T"/>
					<x path="Bool"/>
				</f>
				<t path="Iterable"><c path="unionBy.T"/></t>
			</f>
			<haxe_doc>Returns an Iterable of all distinct values in `iter1` and `iter2`, as decided by `f`</haxe_doc>
		</unionBy>
		<union public="1" params="T" set="method" line="532" static="1">
			<f a="iter1:iter2">
				<t path="Iterable"><c path="union.T"/></t>
				<t path="Iterable"><c path="union.T"/></t>
				<t path="Iterable"><c path="union.T"/></t>
			</f>
			<haxe_doc>Returns an Iterable of all distinct values in `iter1` and `iter2`.</haxe_doc>
		</union>
		<partition public="1" params="T" set="method" line="541" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="partition.T"/></t>
				<f a="">
					<c path="partition.T"/>
					<x path="Bool"/>
				</f>
				<e path="stx.types.Tuple2">
					<t path="Iterable"><c path="partition.T"/></t>
					<t path="Iterable"><c path="partition.T"/></t>
				</e>
			</f>
			<haxe_doc>Produces a Tuple2 containing two Arrays, the left being elements where `f(e) == true`, 
   and the rest in the right.</haxe_doc>
		</partition>
		<partitionWhile public="1" params="T" set="method" line="551" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="partitionWhile.T"/></t>
				<f a="">
					<c path="partitionWhile.T"/>
					<x path="Bool"/>
				</f>
				<e path="stx.types.Tuple2">
					<t path="Iterable"><c path="partitionWhile.T"/></t>
					<t path="Iterable"><c path="partitionWhile.T"/></t>
				</e>
			</f>
			<haxe_doc>Produces a Tuple2 containing two Arrays, the difference from partition being that after the predicate
    returns true once, the rest of the elements will be in the right hand of the Tuple, regardless of
    the result of the predicate.</haxe_doc>
		</partitionWhile>
		<count public="1" params="T" set="method" line="557" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="count.T"/></t>
				<f a="">
					<c path="count.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts some property of the elements of `iter` using a predicate. For the size of the Array @see `size`.</haxe_doc>
		</count>
		<countWhile public="1" params="T" set="method" line="563" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="countWhile.T"/></t>
				<f a="">
					<c path="countWhile.T"/>
					<x path="Bool"/>
				</f>
				<x path="Int"/>
			</f>
			<haxe_doc>Counts some property of the elements of `iter` until the first false is returned from the predicate.</haxe_doc>
		</countWhile>
		<elements public="1" params="T" set="method" line="569" static="1">
			<f a="iter">
				<t path="Iterable"><c path="elements.T"/></t>
				<t path="Iterable"><c path="elements.T"/></t>
			</f>
			<haxe_doc>Produces an Array of `iter` cast as an `Iterable`</haxe_doc>
		</elements>
		<append public="1" params="T" set="method" line="575" static="1">
			<f a="iter:i">
				<t path="Iterable"><c path="append.T"/></t>
				<t path="Iterable"><c path="append.T"/></t>
				<t path="Iterable"><c path="append.T"/></t>
			</f>
			<haxe_doc>Appends the elements of `i` to `arr`</haxe_doc>
		</append>
		<isEmpty public="1" params="T" set="method" line="581" static="1">
			<f a="iter">
				<t path="Iterable"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if the Iterable is empty, false otherwise</haxe_doc>
		</isEmpty>
		<search public="1" params="T" set="method" line="587" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="search.T"/></t>
				<f a="">
					<c path="search.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="search.T"/></e>
			</f>
			<haxe_doc>Produces p `Some(element)` the first time the predicate returns true,None otherwise.</haxe_doc>
		</search>
		<all public="1" params="T" set="method" line="593" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if the predicate returns `true` for all elements, `false` otherwise.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="599" static="1">
			<f a="iter:f">
				<t path="Iterable"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if the predicate returns true for any element, false otherwise.</haxe_doc>
		</any>
		<first public="1" params="T" set="method" line="605" static="1">
			<f a="iter">
				<t path="Iterable"><c path="first.T"/></t>
				<c path="first.T"/>
			</f>
			<haxe_doc>Alias for head.</haxe_doc>
		</first>
		<unwind public="1" params="A" set="method" line="612" static="1">
			<f a="root:children:?depth" v="::false">
				<c path="unwind.A"/>
				<f a="">
					<c path="unwind.A"/>
					<c path="Array"><c path="unwind.A"/></c>
				</f>
				<x path="Bool"/>
				<t path="Iterable"><c path="unwind.A"/></t>
			</f>
			<meta><m n=":experimental"/></meta>
		</unwind>
		<patch public="1" params="A" set="method" line="630" static="1"><f a="iter:start:iter2:?length" v=":::0">
	<t path="Iterable"><c path="patch.A"/></t>
	<x path="Int"/>
	<t path="Iterable"><c path="patch.A"/></t>
	<x path="Int"/>
	<t path="Iterable"><c path="patch.A"/></t>
</f></patch>
	</class>
	<class path="stx.Lists" params="" file="src/main/haxe/stx/Iterables.hx" module="stx.Iterables"><toArray public="1" params="T" set="method" line="648" static="1"><f a="lst">
	<c path="List"><c path="toArray.T"/></c>
	<c path="Array"><c path="toArray.T"/></c>
</f></toArray></class>
	<class path="stx.IntIterables" params="" file="src/main/haxe/stx/Iterables.hx" module="stx.Iterables">
		<to public="1" set="method" line="657" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<t path="Iterable"><x path="Int"/></t>
			</f>
			<haxe_doc>Creates an Iterable `0...n`</haxe_doc>
		</to>
		<until public="1" set="method" line="672" static="1">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<t path="Iterable"><x path="Int"/></t>
			</f>
			<haxe_doc>Creates an Iterable 0...(n-1)</haxe_doc>
		</until>
	</class>
	<class path="stx.Iterators" params="" file="src/main/haxe/stx/Iterators.hx">
		<create public="1" params="T" get="inline" set="null" line="11" static="1">
			<f a="has:nxt">
				<f a=""><x path="Bool"/></f>
				<f a=""><c path="create.T"/></f>
				<t path="Iterator"><c path="create.T"/></t>
			</f>
			<meta>
				<m n="doc"><e>""</e></m>
				<m n=":noUsing"/>
			</meta>
		</create>
		<toArray public="1" params="T" set="method" line="18" static="1">
			<f a="itr">
				<t path="Iterator"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</toArray>
		<all public="1" params="T" set="method" line="26" static="1">
			<f a="itr:fn">
				<t path="Iterator"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</all>
		<each public="1" params="T" set="method" line="35" static="1">
			<f a="itr:fn">
				<t path="Iterator"><c path="each.T"/></t>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<t path="Iterator"><c path="each.T"/></t>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</each>
		<size public="1" params="T" set="method" line="42" static="1">
			<f a="itr">
				<t path="Iterator"><c path="size.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</size>
		<map public="1" params="T:U" set="method" line="50" static="1">
			<f a="itr:fn">
				<t path="Iterator"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.U"/>
				</f>
				<t path="Iterator"><c path="map.U"/></t>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</map>
		<append public="1" params="T" get="inline" set="null" line="57" static="1"><f a="itr0:itr1">
	<t path="Iterator"><c path="append.T"/></t>
	<t path="Iterator"><c path="append.T"/></t>
	<t path="Iterator"><c path="append.T"/></t>
</f></append>
		<flatMap public="1" params="T:U" set="method" line="68" static="1">
			<f a="itr:fn">
				<t path="Iterator"><c path="flatMap.T"/></t>
				<f a="">
					<c path="flatMap.T"/>
					<t path="Iterator"><c path="flatMap.U"/></t>
				</f>
				<t path="Iterator"><c path="flatMap.U"/></t>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</flatMap>
		<foldLeft public="1" params="T:Z" set="method" line="78" static="1">
			<f a="iter:seed:mapper">
				<t path="Iterator"><c path="foldLeft.T"/></t>
				<c path="foldLeft.Z"/>
				<f a=":">
					<c path="foldLeft.Z"/>
					<c path="foldLeft.T"/>
					<c path="foldLeft.Z"/>
				</f>
				<c path="foldLeft.Z"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</foldLeft>
		<foldLeft1 public="1" params="T" set="method" line="84" static="1">
			<f a="iter:mapper">
				<t path="Iterator"><c path="foldLeft1.T"/></t>
				<f a=":">
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
					<c path="foldLeft1.T"/>
				</f>
				<c path="foldLeft1.T"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</foldLeft1>
		<foldRight public="1" params="T:Z" set="method" line="90" static="1">
			<f a="itr:z:f">
				<t path="Iterator"><c path="foldRight.T"/></t>
				<c path="foldRight.Z"/>
				<f a=":">
					<c path="foldRight.T"/>
					<c path="foldRight.Z"/>
					<c path="foldRight.Z"/>
				</f>
				<c path="foldRight.Z"/>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</foldRight>
		<zipWith public="1" params="A:B:C" set="method" line="101" static="1">
			<f a="itr0:itr1:fn">
				<t path="Iterator"><c path="zipWith.A"/></t>
				<t path="Iterator"><c path="zipWith.B"/></t>
				<f a=":">
					<c path="zipWith.A"/>
					<c path="zipWith.B"/>
					<c path="zipWith.C"/>
				</f>
				<t path="Iterator"><c path="zipWith.C"/></t>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</zipWith>
		<zip public="1" params="A:B" set="method" line="111" static="1"><f a="itr0:itr1">
	<t path="Iterator"><c path="zip.A"/></t>
	<t path="Iterator"><c path="zip.B"/></t>
	<t path="Iterator"><e path="stx.types.Tuple2">
	<c path="zip.A"/>
	<c path="zip.B"/>
</e></t>
</f></zip>
	</class>
	<class path="stx.DirIntIterator" params="" file="src/main/haxe/stx/Iterators.hx" module="stx.Iterators">
		<num><x path="Int"/></num>
		<step><x path="Int"/></step>
		<limit><x path="Int"/></limit>
		<next public="1" get="inline" set="null" line="124"><f a=""><x path="Int"/></f></next>
		<hasNext public="1" get="inline" set="null" line="126"><f a=""><x path="Bool"/></f></hasNext>
		<new public="1" get="inline" set="null" line="119"><f a="num:limit:?step" v="::1">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="stx.Maths" params="" file="src/main/haxe/stx/Maths.hx">
		<PRIMES line="6" static="1"><c path="Array"><x path="Int"/></c></PRIMES>
		<rndOne public="1" get="inline" set="null" line="10" static="1">
			<f a="?weight" v="0.5f">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces either a zero or a one randomly, influenced by `weight`</haxe_doc>
		</rndOne>
		<radians public="1" get="inline" set="null" line="16" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces the radians of a given angle in degrees.</haxe_doc>
		</radians>
		<degrees public="1" get="inline" set="null" line="22" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces the degrees of a given angle in radians.</haxe_doc>
		</degrees>
		<random public="1" get="inline" set="null" line="25" static="1">
			<f a="?max:?min" v="1:0">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</random>
	</class>
	<class path="stx.Floats" params="" file="src/main/haxe/stx/Maths.hx" module="stx.Maths">
		<delta public="1" get="inline" set="null" line="33" static="1">
			<f a="n0:n1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces the difference between `n1` and `n0`.</haxe_doc>
		</delta>
		<normalize public="1" get="inline" set="null" line="39" static="1">
			<f a="v:n0:n1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces `v` mapped between `n0` and `n1` and scaled to a value between 0 and 1.</haxe_doc>
		</normalize>
		<interpolate public="1" get="inline" set="null" line="45" static="1">
			<f a="v:n0:n1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces a value between `n0` and `n1` where `v` specifies the distance between the two with a number between 0 and 1.</haxe_doc>
		</interpolate>
		<map public="1" get="inline" set="null" line="51" static="1">
			<f a="v:min0:max0:min1:max1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Take a value `v` as a value on the number line `min0` to `min1` and produce a value on the number line `min1` to `max1`</haxe_doc>
		</map>
		<round public="1" get="inline" set="null" line="57" static="1">
			<f a="n:?c" v=":1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Round `n` to `c` decimal places.</haxe_doc>
		</round>
		<ceil public="1" get="inline" set="null" line="64" static="1">
			<f a="n:?c" v=":1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Ceiling `n` to `c` decimal places.</haxe_doc>
		</ceil>
		<floor public="1" get="inline" set="null" line="71" static="1">
			<f a="n:?c" v=":1">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Floor `n` to `c` decimal places.</haxe_doc>
		</floor>
		<clamp public="1" get="inline" set="null" line="80" static="1">
			<f a="n:min:max">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n="doc"><e>"Produce a number based on `n` that is `min` if less than `min`, \r\n\t\t`max` if `n` is greater than `max` and is left untouched if\r\n\t\tbetween the two."</e></m></meta>
		</clamp>
		<sgn public="1" get="inline" set="null" line="88" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produce -1 if `n` is less than 0, 1 if `n` is greater, and 0 if input is 0.</haxe_doc>
		</sgn>
		<max public="1" set="method" line="95" static="1">
			<f a="v1:v2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produce the larger of `v1` and `v2`.</haxe_doc>
		</max>
		<min public="1" set="method" line="100" static="1">
			<f a="v1:v2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produce the smaller of `v1` and `v2`.</haxe_doc>
		</min>
		<int public="1" set="method" line="105" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Alias for Std.int</haxe_doc>
		</int>
		<compare public="1" set="method" line="110" static="1">
			<f a="v1:v2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produce 1 if `v1` is greater, -1 if `v2` is greater and 0 if `v1` and `v2` are equal.</haxe_doc>
		</compare>
		<equals public="1" set="method" line="116" static="1">
			<f a="v1:v2">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produce `true`if `v1` and `v2` are eaual, `false` otherwise.</haxe_doc>
		</equals>
		<toString public="1" set="method" line="122" static="1">
			<f a="v">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Produce String of Float.</haxe_doc>
		</toString>
		<toInt public="1" set="method" line="128" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produce Int of Float.</haxe_doc>
		</toInt>
		<add public="1" get="inline" set="null" line="134" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Add two Floats.</haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="140" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Subtract `b` from `a`.</haxe_doc>
		</sub>
		<div public="1" get="inline" set="null" line="146" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Divide `a` by `b`.</haxe_doc>
		</div>
		<mul public="1" get="inline" set="null" line="152" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Multiply `a` by `b`.</haxe_doc>
		</mul>
		<mod public="1" get="inline" set="null" line="158" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Mod `a` by `b`.</haxe_doc>
		</mod>
	</class>
	<class path="stx.Ints" params="" file="src/main/haxe/stx/Maths.hx" module="stx.Maths">
		<ZERO public="1" get="inline" set="null" line="163" static="1"><x path="Int"/></ZERO>
		<ONE public="1" get="inline" set="null" line="164" static="1"><x path="Int"/></ONE>
		<max public="1" get="inline" set="null" line="168" static="1">
			<f a="v1:v2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces whichever is the greater.</haxe_doc>
		</max>
		<min public="1" set="method" line="172" static="1">
			<f a="v1:v2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces whichever is the lesser.</haxe_doc>
		</min>
		<toBool public="1" set="method" line="176" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces a Bool if 'v' == 0;</haxe_doc>
		</toBool>
		<toFloat public="1" set="method" line="180" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Coerces an Int to a Float.</haxe_doc>
		</toFloat>
		<compare public="1" set="method" line="185" static="1">
			<f a="v1:v2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces -1 if `v1` is smaller, 1 if `v1` is greater, or 0 if `v1 == v2`</haxe_doc>
		</compare>
		<equals public="1" set="method" line="191" static="1">
			<f a="v1:v2">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `v1` == `v2`</haxe_doc>
		</equals>
		<isOdd public="1" get="inline" set="null" line="197" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `n` is odd, false otherwise.</haxe_doc>
		</isOdd>
		<isEven public="1" get="inline" set="null" line="203" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `n` is even, false otherwise.</haxe_doc>
		</isEven>
		<isInteger public="1" get="inline" set="null" line="209" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `n` is an integer, false otherwise.</haxe_doc>
		</isInteger>
		<isNatural public="1" get="inline" set="null" line="215" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `n` is a natural number, false otherwise.</haxe_doc>
		</isNatural>
		<isPrime public="1" get="inline" set="null" line="221" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `n` is a prime number, false otherwise.</haxe_doc>
		</isPrime>
		<factorial public="1" set="method" line="237" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces the factorial of `n`.</haxe_doc>
		</factorial>
		<divisors public="1" get="inline" set="null" line="254" static="1">
			<f a="n">
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Produces the values that n can divide into</haxe_doc>
		</divisors>
		<clamp public="1" get="inline" set="null" line="268" static="1">
			<f a="n:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces a value between `min` and `max`</haxe_doc>
		</clamp>
		<half public="1" get="inline" set="null" line="279" static="1">
			<f a="n">
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Produces half of `n`.</haxe_doc>
		</half>
		<sum public="1" get="inline" set="null" line="285" static="1">
			<f a="xs">
				<t path="Iterable"><x path="Int"/></t>
				<x path="Int"/>
			</f>
			<haxe_doc>Produces the sum of the elements in `xs`.</haxe_doc>
		</sum>
		<add public="1" get="inline" set="null" line="295" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Add two Ints.</haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="301" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Subtracts `b` from `a`.</haxe_doc>
		</sub>
		<div public="1" get="inline" set="null" line="307" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Divides `a` by `b`.</haxe_doc>
		</div>
		<mul public="1" get="inline" set="null" line="313" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Multiplies `a` by `b`</haxe_doc>
		</mul>
		<mod public="1" get="inline" set="null" line="319" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Mod `a` by `b`</haxe_doc>
		</mod>
		<inv public="1" get="inline" set="null" line="322" static="1"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></inv>
		<and public="1" get="inline" set="null" line="325" static="1"><f a="a:b">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></and>
		<eq public="1" get="inline" set="null" line="331" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `a == b`</haxe_doc>
		</eq>
		<gt public="1" get="inline" set="null" line="337" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Returns true if `a > b`]]></haxe_doc>
		</gt>
		<gteq public="1" get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Returns true if `a >= b`]]></haxe_doc>
		</gteq>
		<lt public="1" get="inline" set="null" line="349" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Returns true if `a < b`]]></haxe_doc>
		</lt>
		<lteq public="1" get="inline" set="null" line="355" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Returns true if `a <= b`]]></haxe_doc>
		</lteq>
		<ushr public="1" get="inline" set="null" line="361" static="1">
			<f a="v:bits">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns `v >>> bits` (unsigned shift)]]></haxe_doc>
		</ushr>
		<xor public="1" get="inline" set="null" line="365" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n="doc"><e>"Returns `a ^ b`"</e></m></meta>
		</xor>
		<shl public="1" get="inline" set="null" line="371" static="1">
			<f a="v:bits">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns `v << bits`]]></haxe_doc>
		</shl>
		<shr public="1" get="inline" set="null" line="377" static="1">
			<f a="v:bits">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Returns `v >> bits` (signed shift)]]></haxe_doc>
		</shr>
		<abs public="1" get="inline" set="null" line="380" static="1"><f a="v">
	<x path="Int"/>
	<x path="Int"/>
</f></abs>
		<toString public="1" get="inline" set="null" line="383" static="1"><f a="a">
	<x path="Int"/>
	<c path="String"/>
</f></toString>
	</class>
	<abstract path="stx.Method" params="A:B" file="src/main/haxe/stx/Method.hx">
		<from>
			<icast><f a="">
	<c path="stx.Method.A"/>
	<c path="stx.Method.B"/>
</f></icast>
			<icast field="fromFunction1"><f a="">
	<c path="fromFunction1.A"/>
	<c path="fromFunction1.B"/>
</f></icast>
			<icast field="fromFunction2"><f a=":">
	<c path="fromFunction2.A"/>
	<c path="fromFunction2.B"/>
	<c path="fromFunction2.C"/>
</f></icast>
			<icast field="fromFunction3"><f a="::">
	<c path="fromFunction3.A"/>
	<c path="fromFunction3.B"/>
	<c path="fromFunction3.C"/>
	<c path="fromFunction3.D"/>
</f></icast>
			<icast field="fromFunction4"><f a=":::">
	<c path="fromFunction4.A"/>
	<c path="fromFunction4.B"/>
	<c path="fromFunction4.C"/>
	<c path="fromFunction4.D"/>
	<c path="fromFunction4.E"/>
</f></icast>
			<icast field="fromFunction5"><f a="::::">
	<c path="fromFunction5.A"/>
	<c path="fromFunction5.B"/>
	<c path="fromFunction5.C"/>
	<c path="fromFunction5.D"/>
	<c path="fromFunction5.E"/>
	<c path="fromFunction5.F"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="stx.Method.A"/>
	<c path="stx.Method.B"/>
</f></this>
		<to><icast><f a="">
	<c path="stx.Method.A"/>
	<c path="stx.Method.B"/>
</f></icast></to>
		<haxe_doc>Unified function Type (up to arity 5) using Tuples.</haxe_doc>
		<impl><class path="stx._Method.Method_Impl_" params="" file="src/main/haxe/stx/Method.hx" private="1" module="stx.Method">
	<_new public="1" set="method" line="20" static="1">
		<f a="v">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<fromFunction1 public="1" params="A:B:C" get="inline" set="null" line="23" static="1">
		<f a="f">
			<f a="">
				<c path="fromFunction1.A"/>
				<c path="fromFunction1.B"/>
			</f>
			<x path="stx.Method">
				<c path="fromFunction1.A"/>
				<c path="fromFunction1.B"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction1>
	<fromFunction2 public="1" params="A:B:C" get="inline" set="null" line="26" static="1">
		<f a="f">
			<f a=":">
				<c path="fromFunction2.A"/>
				<c path="fromFunction2.B"/>
				<c path="fromFunction2.C"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple2">
					<c path="fromFunction2.A"/>
					<c path="fromFunction2.B"/>
				</e>
				<c path="fromFunction2.C"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction2>
	<fromFunction3 public="1" params="A:B:C:D" get="inline" set="null" line="29" static="1">
		<f a="f">
			<f a="::">
				<c path="fromFunction3.A"/>
				<c path="fromFunction3.B"/>
				<c path="fromFunction3.C"/>
				<c path="fromFunction3.D"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple3">
					<c path="fromFunction3.A"/>
					<c path="fromFunction3.B"/>
					<c path="fromFunction3.C"/>
				</e>
				<c path="fromFunction3.D"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction3>
	<fromFunction4 public="1" params="A:B:C:D:E" get="inline" set="null" line="32" static="1">
		<f a="f">
			<f a=":::">
				<c path="fromFunction4.A"/>
				<c path="fromFunction4.B"/>
				<c path="fromFunction4.C"/>
				<c path="fromFunction4.D"/>
				<c path="fromFunction4.E"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple4">
					<c path="fromFunction4.A"/>
					<c path="fromFunction4.B"/>
					<c path="fromFunction4.C"/>
					<c path="fromFunction4.D"/>
				</e>
				<c path="fromFunction4.E"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction4>
	<fromFunction5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="35" static="1">
		<f a="f">
			<f a="::::">
				<c path="fromFunction5.A"/>
				<c path="fromFunction5.B"/>
				<c path="fromFunction5.C"/>
				<c path="fromFunction5.D"/>
				<c path="fromFunction5.E"/>
				<c path="fromFunction5.F"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple5">
					<c path="fromFunction5.A"/>
					<c path="fromFunction5.B"/>
					<c path="fromFunction5.C"/>
					<c path="fromFunction5.D"/>
					<c path="fromFunction5.E"/>
				</e>
				<c path="fromFunction5.F"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction5>
	<unit public="1" params="A" get="inline" set="null" line="38" static="1">
		<f a=""><x path="stx.Method">
	<c path="unit.A"/>
	<c path="unit.A"/>
</x></f>
		<meta><m n=":noUsing"/></meta>
	</unit>
	<apply public="1" set="method" line="41" static="1">
		<f a="this:v">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<c path="stx.Method.A"/>
			<c path="stx.Method.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</apply>
	<call public="1" set="method" line="44" static="1">
		<f a="this:args">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<c path="Array"><d/></c>
			<c path="stx.Method.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</call>
	<then public="1" params="C" set="method" line="55" static="1">
		<f a="this:f">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<x path="stx.Method">
				<c path="stx.Method.B"/>
				<c path="then.C"/>
			</x>
			<x path="stx.Method">
				<c path="stx.Method.A"/>
				<c path="then.C"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</then>
	<first public="1" params="C" set="method" line="61" static="1">
		<f a="this">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple2">
					<c path="stx.Method.A"/>
					<c path="first.C"/>
				</e>
				<e path="stx.types.Tuple2">
					<c path="stx.Method.B"/>
					<c path="first.C"/>
				</e>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</first>
	<second public="1" params="C" set="method" line="66" static="1">
		<f a="this">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<x path="stx.Method">
				<e path="stx.types.Tuple2">
					<c path="second.C"/>
					<c path="stx.Method.A"/>
				</e>
				<e path="stx.types.Tuple2">
					<c path="second.C"/>
					<c path="stx.Method.B"/>
				</e>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</second>
	<left public="1" params="C" set="method" line="71" static="1">
		<f a="this">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<x path="stx.Method">
				<e path="tink.core.Either">
					<c path="stx.Method.A"/>
					<c path="left.C"/>
				</e>
				<e path="tink.core.Either">
					<c path="stx.Method.B"/>
					<c path="left.C"/>
				</e>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</left>
	<right public="1" params="C:D" set="method" line="79" static="1">
		<f a="this">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<x path="stx.Method">
				<e path="tink.core.Either">
					<c path="right.C"/>
					<c path="stx.Method.A"/>
				</e>
				<e path="tink.core.Either">
					<c path="right.C"/>
					<c path="stx.Method.B"/>
				</e>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</right>
	<tie public="1" params="C" set="method" line="87" static="1">
		<f a="this:bindr">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<f a="">
				<e path="stx.types.Tuple2">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</e>
				<c path="tie.C"/>
			</f>
			<x path="stx.Method">
				<c path="stx.Method.A"/>
				<c path="tie.C"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</tie>
	<split public="1" params="C" set="method" line="90" static="1">
		<f a="this:_split">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<f a="">
				<c path="stx.Method.A"/>
				<c path="split.C"/>
			</f>
			<x path="stx.Method">
				<c path="stx.Method.A"/>
				<e path="stx.types.Tuple2">
					<c path="stx.Method.B"/>
					<c path="split.C"/>
				</e>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</split>
	<pair public="1" params="C:D" set="method" line="98" static="1">
		<f a="this:fn2">
			<f a="">
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<f a="">
				<c path="pair.C"/>
				<c path="pair.D"/>
			</f>
			<f a="t">
				<a>
					<snd set="null"><f a=""><c path="pair.C"/></f></snd>
					<fst set="null"><f a=""><c path="stx.Method.A"/></f></fst>
				</a>
				<e path="stx.types.Tuple2">
					<c path="stx.Method.B"/>
					<c path="pair.D"/>
				</e>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</pair>
</class></impl>
	</abstract>
	<class path="stx._Method.Method_Impl_" params="" file="src/main/haxe/stx/Method.hx" private="1" module="stx.Method">
		<_new public="1" set="method" line="20" static="1">
			<f a="v">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<fromFunction1 public="1" params="A:B:C" get="inline" set="null" line="23" static="1">
			<f a="f">
				<f a="">
					<c path="fromFunction1.A"/>
					<c path="fromFunction1.B"/>
				</f>
				<x path="stx.Method">
					<c path="fromFunction1.A"/>
					<c path="fromFunction1.B"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction1>
		<fromFunction2 public="1" params="A:B:C" get="inline" set="null" line="26" static="1">
			<f a="f">
				<f a=":">
					<c path="fromFunction2.A"/>
					<c path="fromFunction2.B"/>
					<c path="fromFunction2.C"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple2">
						<c path="fromFunction2.A"/>
						<c path="fromFunction2.B"/>
					</e>
					<c path="fromFunction2.C"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction2>
		<fromFunction3 public="1" params="A:B:C:D" get="inline" set="null" line="29" static="1">
			<f a="f">
				<f a="::">
					<c path="fromFunction3.A"/>
					<c path="fromFunction3.B"/>
					<c path="fromFunction3.C"/>
					<c path="fromFunction3.D"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple3">
						<c path="fromFunction3.A"/>
						<c path="fromFunction3.B"/>
						<c path="fromFunction3.C"/>
					</e>
					<c path="fromFunction3.D"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction3>
		<fromFunction4 public="1" params="A:B:C:D:E" get="inline" set="null" line="32" static="1">
			<f a="f">
				<f a=":::">
					<c path="fromFunction4.A"/>
					<c path="fromFunction4.B"/>
					<c path="fromFunction4.C"/>
					<c path="fromFunction4.D"/>
					<c path="fromFunction4.E"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple4">
						<c path="fromFunction4.A"/>
						<c path="fromFunction4.B"/>
						<c path="fromFunction4.C"/>
						<c path="fromFunction4.D"/>
					</e>
					<c path="fromFunction4.E"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction4>
		<fromFunction5 public="1" params="A:B:C:D:E:F" get="inline" set="null" line="35" static="1">
			<f a="f">
				<f a="::::">
					<c path="fromFunction5.A"/>
					<c path="fromFunction5.B"/>
					<c path="fromFunction5.C"/>
					<c path="fromFunction5.D"/>
					<c path="fromFunction5.E"/>
					<c path="fromFunction5.F"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple5">
						<c path="fromFunction5.A"/>
						<c path="fromFunction5.B"/>
						<c path="fromFunction5.C"/>
						<c path="fromFunction5.D"/>
						<c path="fromFunction5.E"/>
					</e>
					<c path="fromFunction5.F"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction5>
		<unit public="1" params="A" get="inline" set="null" line="38" static="1">
			<f a=""><x path="stx.Method">
	<c path="unit.A"/>
	<c path="unit.A"/>
</x></f>
			<meta><m n=":noUsing"/></meta>
		</unit>
		<apply public="1" set="method" line="41" static="1">
			<f a="this:v">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<c path="stx.Method.A"/>
				<c path="stx.Method.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</apply>
		<call public="1" set="method" line="44" static="1">
			<f a="this:args">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<c path="Array"><d/></c>
				<c path="stx.Method.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</call>
		<then public="1" params="C" set="method" line="55" static="1">
			<f a="this:f">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<x path="stx.Method">
					<c path="stx.Method.B"/>
					<c path="then.C"/>
				</x>
				<x path="stx.Method">
					<c path="stx.Method.A"/>
					<c path="then.C"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</then>
		<first public="1" params="C" set="method" line="61" static="1">
			<f a="this">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple2">
						<c path="stx.Method.A"/>
						<c path="first.C"/>
					</e>
					<e path="stx.types.Tuple2">
						<c path="stx.Method.B"/>
						<c path="first.C"/>
					</e>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</first>
		<second public="1" params="C" set="method" line="66" static="1">
			<f a="this">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<x path="stx.Method">
					<e path="stx.types.Tuple2">
						<c path="second.C"/>
						<c path="stx.Method.A"/>
					</e>
					<e path="stx.types.Tuple2">
						<c path="second.C"/>
						<c path="stx.Method.B"/>
					</e>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</second>
		<left public="1" params="C" set="method" line="71" static="1">
			<f a="this">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<x path="stx.Method">
					<e path="tink.core.Either">
						<c path="stx.Method.A"/>
						<c path="left.C"/>
					</e>
					<e path="tink.core.Either">
						<c path="stx.Method.B"/>
						<c path="left.C"/>
					</e>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</left>
		<right public="1" params="C:D" set="method" line="79" static="1">
			<f a="this">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<x path="stx.Method">
					<e path="tink.core.Either">
						<c path="right.C"/>
						<c path="stx.Method.A"/>
					</e>
					<e path="tink.core.Either">
						<c path="right.C"/>
						<c path="stx.Method.B"/>
					</e>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</right>
		<tie public="1" params="C" set="method" line="87" static="1">
			<f a="this:bindr">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<f a="">
					<e path="stx.types.Tuple2">
						<c path="stx.Method.A"/>
						<c path="stx.Method.B"/>
					</e>
					<c path="tie.C"/>
				</f>
				<x path="stx.Method">
					<c path="stx.Method.A"/>
					<c path="tie.C"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</tie>
		<split public="1" params="C" set="method" line="90" static="1">
			<f a="this:_split">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<f a="">
					<c path="stx.Method.A"/>
					<c path="split.C"/>
				</f>
				<x path="stx.Method">
					<c path="stx.Method.A"/>
					<e path="stx.types.Tuple2">
						<c path="stx.Method.B"/>
						<c path="split.C"/>
					</e>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</split>
		<pair public="1" params="C:D" set="method" line="98" static="1">
			<f a="this:fn2">
				<f a="">
					<c path="stx.Method.A"/>
					<c path="stx.Method.B"/>
				</f>
				<f a="">
					<c path="pair.C"/>
					<c path="pair.D"/>
				</f>
				<f a="t">
					<a>
						<snd set="null"><f a=""><c path="pair.C"/></f></snd>
						<fst set="null"><f a=""><c path="stx.Method.A"/></f></fst>
					</a>
					<e path="stx.types.Tuple2">
						<c path="stx.Method.B"/>
						<c path="pair.D"/>
					</e>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</pair>
	</class>
	<typedef path="stx.Object" params="" file="src/main/haxe/stx/Objects.hx" module="stx.Objects"><a/></typedef>
	<class path="stx.Objects" params="" file="src/main/haxe/stx/Objects.hx">
		<unit public="1" set="method" line="30" static="1">
			<f a=""><t path="stx.Object"/></f>
			<meta><m n=":noUsing"/></meta>
		</unit>
		<asObject public="1" set="method" line="33" static="1">
			<f a="d">
				<d/>
				<t path="stx.Object"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</asObject>
		<toObject public="1" params="A" set="method" line="36" static="1"><f a="a">
	<c path="Array"><t path="stx.types.KV"><c path="toObject.A"/></t></c>
	<t path="stx.Object"/>
</f></toObject>
		<copy public="1" set="method" line="45" static="1"><f a="o">
	<t path="stx.Object"/>
	<t path="stx.Object"/>
</f></copy>
		<fields public="1" set="method" line="53" static="1">
			<f a="o">
				<t path="stx.Object"/>
				<t path="Iterable"><e path="stx.types.Tuple2">
	<c path="String"/>
	<d/>
</e></t>
			</f>
			<haxe_doc>Return the fields of Object.</haxe_doc>
		</fields>
		<select public="1" set="method" line="60" static="1">
			<f a="d:names">
				<t path="stx.Object"/>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns the values of the names.</haxe_doc>
		</select>
		<iterator public="1" set="method" line="63" static="1"><f a="d">
	<t path="stx.Object"/>
	<t path="Iterator"><c path="String"/></t>
</f></iterator>
		<included public="1" set="method" line="69" static="1">
			<f a="d:flds">
				<t path="stx.Object"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>The fields exist.</haxe_doc>
		</included>
		<missing public="1" set="method" line="75" static="1">
			<f a="d:flds">
				<t path="stx.Object"/>
				<c path="Array"><c path="String"/></c>
				<t path="stx.types.Option"><c path="Array"><c path="String"/></c></t>
			</f>
			<haxe_doc>Report fields missing.</haxe_doc>
		</missing>
		<only public="1" set="method" line="79" static="1">
			<f a="d:flds">
				<t path="stx.Object"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":docs"><e>"Reports true if the object contains only the supplied fields."</e></m></meta>
		</only>
		<defined public="1" set="method" line="85" static="1">
			<f a="d:flds">
				<t path="stx.Object"/>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>The fields are non null.</haxe_doc>
		</defined>
		<merge public="1" params="T0:T1:U" set="method" line="95" static="1">
			<f a="o0:o1">
				<c path="merge.T0"/>
				<c path="merge.T1"/>
				<c path="merge.U"/>
			</f>
			<haxe_doc>Merges the first level of object keys into a new Object, right hand override.</haxe_doc>
		</merge>
		<toMap public="1" set="method" line="99" static="1">
			<f a="o">
				<t path="stx.Object"/>
				<c path="haxe.ds.StringMap"><d/></c>
			</f>
			<meta><m n="doc"><e>""</e></m></meta>
		</toMap>
		<setField public="1" set="method" line="104" static="1"><f a="o:k:v">
	<t path="stx.Object"/>
	<c path="String"/>
	<d/>
	<t path="stx.Object"/>
</f></setField>
		<haxe_doc>Object defined as {} is different from Dynamic in that it does not allow closures.</haxe_doc>
	</class>
	<class path="stx.Options" params="" file="src/main/haxe/stx/Options.hx">
		<option public="1" params="T" get="inline" set="null" line="24" static="1">
			<f a="?v" v="null">
				<c path="option.T"/>
				<e path="haxe.ds.Option"><c path="option.T"/></e>
			</f>
			<meta><m n=":noUsing"/></meta>
		</option>
		<ensure public="1" params="T" set="method" line="27" static="1"><f a="opt">
	<e path="haxe.ds.Option"><c path="ensure.T"/></e>
	<c path="ensure.T"/>
</f></ensure>
		<create public="1" params="T" get="inline" set="null" line="36" static="1">
			<f a="t">
				<c path="create.T"/>
				<e path="haxe.ds.Option"><c path="create.T"/></e>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Produces Option.Some(t) if `t` is not null, Option.None otherwise.</haxe_doc>
		</create>
		<map public="1" params="T:S" set="method" line="42" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="map.T"/></e>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<e path="haxe.ds.Option"><c path="map.S"/></e>
			</f>
			<haxe_doc>Performs `f` on the contents of `o` if o != None</haxe_doc>
		</map>
		<each public="1" params="T" set="method" line="51" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="each.T"/></e>
				<f a="">
					<c path="each.T"/>
					<x path="Void"/>
				</f>
				<e path="haxe.ds.Option"><c path="each.T"/></e>
			</f>
			<haxe_doc>Performs `f` on the contents of `o` if `o` != None</haxe_doc>
		</each>
		<flatMap public="1" params="T:S" set="method" line="60" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="flatMap.T"/></e>
				<f a="">
					<c path="flatMap.T"/>
					<e path="haxe.ds.Option"><c path="flatMap.S"/></e>
				</f>
				<e path="haxe.ds.Option"><c path="flatMap.S"/></e>
			</f>
			<haxe_doc>Produces the result of `f` which takes the contents of `o` as a parameter.</haxe_doc>
		</flatMap>
		<val public="1" params="T" set="method" line="66" static="1">
			<f a="o">
				<e path="haxe.ds.Option"><c path="val.T"/></e>
				<c path="val.T"/>
			</f>
			<haxe_doc>Produces the contents of `o`, throwing an error if `o` is None.</haxe_doc>
		</val>
		<valOrUse public="1" params="T" set="method" line="75" static="1">
			<f a="o:thunk">
				<e path="haxe.ds.Option"><c path="valOrUse.T"/></e>
				<t path="stx.types.Thunk"><c path="valOrUse.T"/></t>
				<c path="valOrUse.T"/>
			</f>
			<haxe_doc>Produces the value of `o` if not None, the result of `thunk` otherwise.</haxe_doc>
		</valOrUse>
		<valOrC public="1" params="T" set="method" line="84" static="1">
			<f a="o:c">
				<e path="haxe.ds.Option"><c path="valOrC.T"/></e>
				<c path="valOrC.T"/>
				<c path="valOrC.T"/>
			</f>
			<haxe_doc>Produces the value of `o` if not None, `c` otherwise.</haxe_doc>
		</valOrC>
		<orElse public="1" params="T" set="method" line="90" static="1">
			<f a="o1:thunk">
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
				<t path="stx.types.Thunk"><e path="haxe.ds.Option"><c path="orElse.T"/></e></t>
				<e path="haxe.ds.Option"><c path="orElse.T"/></e>
			</f>
			<haxe_doc>Produces `o1` if it is Some, the result of `thunk` otherwise.</haxe_doc>
		</orElse>
		<orElseConst public="1" params="T" set="method" line="100" static="1">
			<f a="o1:o2">
				<e path="haxe.ds.Option"><c path="orElseConst.T"/></e>
				<e path="haxe.ds.Option"><c path="orElseConst.T"/></e>
				<e path="haxe.ds.Option"><c path="orElseConst.T"/></e>
			</f>
			<haxe_doc>Produces `o1` if it is Some, `o2` otherwise.</haxe_doc>
		</orElseConst>
		<isEmpty public="1" params="T" set="method" line="106" static="1">
			<f a="o">
				<e path="haxe.ds.Option"><c path="isEmpty.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces true if `o` is None, false otherwise.</haxe_doc>
		</isEmpty>
		<isDefined public="1" params="T" set="method" line="115" static="1">
			<f a="o">
				<e path="haxe.ds.Option"><c path="isDefined.T"/></e>
				<x path="Bool"/>
			</f>
			<haxe_doc>Produces `true` if `o` is not None, `false` otherwise.</haxe_doc>
		</isDefined>
		<toArray public="1" params="T" set="method" line="124" static="1">
			<f a="o">
				<e path="haxe.ds.Option"><c path="toArray.T"/></e>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc>Produces an Array of length 0 if `o` is None, length 1 otherwise.</haxe_doc>
		</toArray>
		<then public="1" params="T:S" set="method" line="133" static="1">
			<f a="o1:o2">
				<e path="haxe.ds.Option"><c path="then.T"/></e>
				<e path="haxe.ds.Option"><c path="then.S"/></e>
				<e path="haxe.ds.Option"><c path="then.S"/></e>
			</f>
			<haxe_doc>Swallows `o1` and produces `o2`.</haxe_doc>
		</then>
		<filter public="1" params="T" set="method" line="139" static="1">
			<f a="o:f">
				<e path="haxe.ds.Option"><c path="filter.T"/></e>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<e path="haxe.ds.Option"><c path="filter.T"/></e>
			</f>
			<haxe_doc>Produces the input if predicate `f` returns true, None otherwise.</haxe_doc>
		</filter>
		<flatten public="1" params="T" set="method" line="148" static="1">
			<f a="o1">
				<e path="haxe.ds.Option"><e path="haxe.ds.Option"><c path="flatten.T"/></e></e>
				<e path="haxe.ds.Option"><c path="flatten.T"/></e>
			</f>
			<haxe_doc>Produces an Option where `o1` may contain another Option.</haxe_doc>
		</flatten>
		<zip public="1" params="T:S" set="method" line="157" static="1">
			<f a="o1:o2">
				<e path="haxe.ds.Option"><c path="zip.T"/></e>
				<e path="haxe.ds.Option"><c path="zip.S"/></e>
				<e path="haxe.ds.Option"><e path="stx.types.Tuple2">
	<c path="zip.T"/>
	<c path="zip.S"/>
</e></e>
			</f>
			<haxe_doc>Produces a Tuple2 of `o1` and `o2`.</haxe_doc>
		</zip>
		<zipWith public="1" params="T:S:V" set="method" line="166" static="1">
			<f a="o1:o2:f">
				<e path="haxe.ds.Option"><c path="zipWith.T"/></e>
				<e path="haxe.ds.Option"><c path="zipWith.S"/></e>
				<f a=":">
					<c path="zipWith.T"/>
					<c path="zipWith.S"/>
					<c path="zipWith.V"/>
				</f>
				<e path="haxe.ds.Option"><c path="zipWith.V"/></e>
			</f>
			<haxe_doc>Produces the result of `f` if both `o1` and `o2` are not None.</haxe_doc>
		</zipWith>
		<oneOrOtherOrBothWith public="1" params="A" set="method" line="179" static="1">
			<f a="o1:o2:fn">
				<e path="haxe.ds.Option"><c path="oneOrOtherOrBothWith.A"/></e>
				<e path="haxe.ds.Option"><c path="oneOrOtherOrBothWith.A"/></e>
				<f a=":">
					<c path="oneOrOtherOrBothWith.A"/>
					<c path="oneOrOtherOrBothWith.A"/>
					<c path="oneOrOtherOrBothWith.A"/>
				</f>
				<e path="haxe.ds.Option"><c path="oneOrOtherOrBothWith.A"/></e>
			</f>
			<haxe_doc>Produces one or other value if only one is defined, or calls `fn` on the two and returns the result</haxe_doc>
		</oneOrOtherOrBothWith>
		<orEither public="1" params="T:S" set="method" line="196" static="1">
			<f a="o1:thunk">
				<e path="haxe.ds.Option"><c path="orEither.S"/></e>
				<t path="stx.types.Thunk"><c path="orEither.T"/></t>
				<e path="tink.core.Either">
					<c path="orEither.T"/>
					<c path="orEither.S"/>
				</e>
			</f>
			<haxe_doc>Produces an Either where `o1` is on the right, or if None, the result of  `thunk`  on the left.</haxe_doc>
		</orEither>
		<orSuccess public="1" params="T" set="method" line="205" static="1">
			<f a="o1:thunk">
				<e path="haxe.ds.Option"><c path="tink.core.Error"/></e>
				<t path="stx.types.Thunk"><c path="orSuccess.T"/></t>
				<x path="stx.Upshot"><c path="orSuccess.T"/></x>
			</f>
			<haxe_doc>If `o1` is None, produce the result of `thunk`.</haxe_doc>
		</orSuccess>
		<orFailure public="1" params="T" set="method" line="214" static="1">
			<f a="o1:thunk">
				<e path="haxe.ds.Option"><c path="orFailure.T"/></e>
				<t path="stx.types.Thunk"><c path="tink.core.Error"/></t>
				<x path="stx.Upshot"><c path="orFailure.T"/></x>
			</f>
			<haxe_doc>If `o1` is None, produce the result of `thunk`.</haxe_doc>
		</orFailure>
		<orEitherC public="1" params="T:S" set="method" line="223" static="1">
			<f a="o1:c">
				<e path="haxe.ds.Option"><c path="orEitherC.T"/></e>
				<c path="orEitherC.S"/>
				<e path="tink.core.Either">
					<c path="orEitherC.S"/>
					<c path="orEitherC.T"/>
				</e>
			</f>
			<haxe_doc>Produces an Either where `o1` is on the left, or if None, `c`.</haxe_doc>
		</orEitherC>
		<orSuccessC public="1" params="T" set="method" line="226" static="1"><f a="o0:v">
	<e path="haxe.ds.Option"><c path="tink.core.Error"/></e>
	<c path="orSuccessC.T"/>
	<x path="stx.Upshot"><c path="orSuccessC.T"/></x>
</f></orSuccessC>
		<orFailureC public="1" params="T" set="method" line="229" static="1"><f a="o0:v">
	<e path="haxe.ds.Option"><c path="orFailureC.T"/></e>
	<c path="tink.core.Error"/>
	<x path="stx.Upshot"><c path="orFailureC.T"/></x>
</f></orFailureC>
		<toBool public="1" params="T" set="method" line="232" static="1"><f a="option">
	<e path="haxe.ds.Option"><c path="toBool.T"/></e>
	<x path="Bool"/>
</f></toBool>
		<toFailChunk public="1" params="A" set="method" line="238" static="1"><f a="m">
	<e path="haxe.ds.Option"><c path="tink.core.Error"/></e>
	<e path="stx.Chunk"><c path="toFailChunk.A"/></e>
</f></toFailChunk>
		<toChunk public="1" params="A" set="method" line="244" static="1"><f a="m">
	<e path="haxe.ds.Option"><c path="toChunk.A"/></e>
	<e path="stx.Chunk"><c path="toChunk.A"/></e>
</f></toChunk>
		<orFirstDefined public="1" params="T" set="method" line="250" static="1"><f a="opt:arr">
	<e path="haxe.ds.Option"><c path="orFirstDefined.T"/></e>
	<c path="Array"><t path="stx.types.Thunk"><c path="orFirstDefined.T"/></t></c>
	<e path="haxe.ds.Option"><c path="orFirstDefined.T"/></e>
</f></orFirstDefined>
		<orFirstDefinedC public="1" params="T" set="method" line="265" static="1"><f a="opt:arr">
	<e path="haxe.ds.Option"><c path="orFirstDefinedC.T"/></e>
	<c path="Array"><c path="orFirstDefinedC.T"/></c>
	<e path="haxe.ds.Option"><t path="Null"><c path="orFirstDefinedC.T"/></t></e>
</f></orFirstDefinedC>
	</class>
	<class path="stx.Order" params="" file="src/main/haxe/stx/Order.hx">
		<__order__ params="T" set="method" line="22" static="1"><f a="impl">
	<t path="stx.types.Ord"><c path="__order__.T"/></t>
	<t path="stx.types.Ord"><c path="__order__.T"/></t>
</f></__order__>
		<nil public="1" params="A" set="method" line="31" static="1">
			<f a="a:b">
				<c path="nil.A"/>
				<c path="nil.A"/>
				<x path="Int"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</nil>
		<getOrderFor public="1" params="T" set="method" line="37" static="1">
			<f a="t">
				<c path="getOrderFor.T"/>
				<t path="stx.types.Ord"><c path="getOrderFor.T"/></t>
			</f>
			<haxe_doc><![CDATA[Returns a OrderFunction (T -> T -> Int). It works for any type expect TFunction.
   *  Custom Classes must provide a compare(other : T): Int method or an exception will be thrown.]]></haxe_doc>
		</getOrderFor>
		<getOrderForType public="1" params="T" set="method" line="40" static="1"><f a="v">
	<e path="ValueType"/>
	<t path="stx.types.Ord"><c path="getOrderForType.T"/></t>
</f></getOrderForType>
	</class>
	<class path="stx.EnumOrder" params="" file="src/main/haxe/stx/Order.hx" module="stx.Order"><sort public="1" set="method" line="73" static="1"><f a="a:b">
	<x path="EnumValue"/>
	<x path="EnumValue"/>
	<x path="Int"/>
</f></sort></class>
	<class path="stx.ArrayOrder" params="" file="src/main/haxe/stx/Order.hx" module="stx.Order">
		<sort public="1" params="T" set="method" line="88" static="1"><f a="v">
	<c path="Array"><c path="sort.T"/></c>
	<c path="Array"><c path="sort.T"/></c>
</f></sort>
		<sortWith public="1" params="T" set="method" line="92" static="1"><f a="v:order">
	<c path="Array"><c path="sortWith.T"/></c>
	<t path="stx.types.Ord"><c path="sortWith.T"/></t>
	<c path="Array"><c path="sortWith.T"/></c>
</f></sortWith>
		<compare public="1" params="T" set="method" line="97" static="1">
			<f a="v1:v2">
				<c path="Array"><c path="compare.T"/></c>
				<c path="Array"><c path="compare.T"/></c>
				<x path="Int"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</compare>
		<compareWith public="1" params="T" set="method" line="101" static="1"><f a="v1:v2:order">
	<c path="Array"><c path="compareWith.T"/></c>
	<c path="Array"><c path="compareWith.T"/></c>
	<t path="stx.types.Ord"><c path="compareWith.T"/></t>
	<x path="Int"/>
</f></compareWith>
	</class>
	<class path="stx.ProductOrder" params="" file="src/main/haxe/stx/Order.hx" module="stx.Order">
		<getOrder public="1" set="method" line="115" static="1"><f a="p:i">
	<c path="stx.Product"/>
	<x path="Int"/>
	<t path="stx.types.Ord"><unknown/></t>
</f></getOrder>
		<compare public="1" set="method" line="118" static="1"><f a="one:other">
	<c path="stx.Product"/>
	<c path="stx.Product"/>
	<x path="Int"/>
</f></compare>
	</class>
	<class path="stx.Orders" params="" file="src/main/haxe/stx/Order.hx" module="stx.Order">
		<greaterThan public="1" params="T" set="method" line="128" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="greaterThan.T"/></t>
	<t path="stx.types.Eq"><c path="greaterThan.T"/></t>
</f></greaterThan>
		<greaterThanOrEqual public="1" params="T" set="method" line="132" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="greaterThanOrEqual.T"/></t>
	<t path="stx.types.Eq"><c path="greaterThanOrEqual.T"/></t>
</f></greaterThanOrEqual>
		<lessThan public="1" params="T" set="method" line="136" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="lessThan.T"/></t>
	<t path="stx.types.Eq"><c path="lessThan.T"/></t>
</f></lessThan>
		<lessThanOrEqual public="1" params="T" set="method" line="140" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="lessThanOrEqual.T"/></t>
	<t path="stx.types.Eq"><c path="lessThanOrEqual.T"/></t>
</f></lessThanOrEqual>
		<equal public="1" params="T" set="method" line="144" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="equal.T"/></t>
	<t path="stx.types.Eq"><c path="equal.T"/></t>
</f></equal>
		<notEqual public="1" params="T" set="method" line="148" static="1"><f a="order">
	<t path="stx.types.Ord"><c path="notEqual.T"/></t>
	<t path="stx.types.Eq"><c path="notEqual.T"/></t>
</f></notEqual>
	</class>
	<class path="stx.Pairs" params="" file="src/main/haxe/stx/Pairs.hx">
		<fst public="1" params="A:B" set="method" line="6" static="1"><f a="pr">
	<x path="tink.core.Pair">
		<c path="fst.A"/>
		<c path="fst.B"/>
	</x>
	<c path="fst.A"/>
</f></fst>
		<snd public="1" params="A:B" set="method" line="9" static="1"><f a="pr">
	<x path="tink.core.Pair">
		<c path="snd.A"/>
		<c path="snd.B"/>
	</x>
	<c path="snd.B"/>
</f></snd>
		<into public="1" params="A:B:C" get="inline" set="null" line="12" static="1"><f a="t:f">
	<x path="tink.core.Pair">
		<c path="into.A"/>
		<c path="into.B"/>
	</x>
	<f a=":">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
	</f>
	<c path="into.C"/>
</f></into>
		<paired public="1" params="A:B:C" get="inline" set="null" line="15" static="1"><f a="f">
	<f a=":">
		<c path="paired.A"/>
		<c path="paired.B"/>
		<c path="paired.C"/>
	</f>
	<f a="t">
		<x path="tink.core.Pair">
			<c path="paired.A"/>
			<c path="paired.B"/>
		</x>
		<c path="paired.C"/>
	</f>
</f></paired>
	</class>
	<abstract path="stx.Path" params="" file="src/main/haxe/stx/Path.hx">
		<from>
			<icast><c path="String"/></icast>
			<icast field="fromArray"><c path="Array"><c path="String"/></c></icast>
		</from>
		<this><c path="String"/></this>
		<to>
			<icast><c path="String"/></icast>
			<icast field="toArray"><c path="Array"><c path="String"/></c></icast>
		</to>
		<impl><class path="stx._Path.Path_Impl_" params="" file="src/main/haxe/stx/Path.hx" private="1" module="stx.Path">
	<_new public="1" set="method" line="7" static="1">
		<f a="v">
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<parent public="1" set="method" line="10" static="1">
		<f a="this">
			<c path="String"/>
			<x path="stx.Path"/>
		</f>
		<meta><m n=":impl"/></meta>
	</parent>
	<child public="1" set="method" line="13" static="1">
		<f a="this:str">
			<c path="String"/>
			<c path="String"/>
			<x path="stx.Path"/>
		</f>
		<meta><m n=":impl"/></meta>
	</child>
	<leaf public="1" set="method" line="16" static="1">
		<f a="this">
			<c path="String"/>
			<x path="stx.Path"/>
		</f>
		<meta><m n=":impl"/></meta>
	</leaf>
	<nodes public="1" set="method" line="19" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</nodes>
	<fromArray public="1" set="method" line="22" static="1">
		<f a="arr">
			<c path="Array"><c path="String"/></c>
			<x path="stx.Path"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<toArray public="1" set="method" line="25" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<iterator public="1" set="method" line="28" static="1">
		<f a="this">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<equals public="1" set="method" line="31" static="1">
		<f a="this:p">
			<c path="String"/>
			<x path="stx.Path"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</equals>
</class></impl>
	</abstract>
	<class path="stx._Path.Path_Impl_" params="" file="src/main/haxe/stx/Path.hx" private="1" module="stx.Path">
		<_new public="1" set="method" line="7" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<parent public="1" set="method" line="10" static="1">
			<f a="this">
				<c path="String"/>
				<x path="stx.Path"/>
			</f>
			<meta><m n=":impl"/></meta>
		</parent>
		<child public="1" set="method" line="13" static="1">
			<f a="this:str">
				<c path="String"/>
				<c path="String"/>
				<x path="stx.Path"/>
			</f>
			<meta><m n=":impl"/></meta>
		</child>
		<leaf public="1" set="method" line="16" static="1">
			<f a="this">
				<c path="String"/>
				<x path="stx.Path"/>
			</f>
			<meta><m n=":impl"/></meta>
		</leaf>
		<nodes public="1" set="method" line="19" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</nodes>
		<fromArray public="1" set="method" line="22" static="1">
			<f a="arr">
				<c path="Array"><c path="String"/></c>
				<x path="stx.Path"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<toArray public="1" set="method" line="25" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<iterator public="1" set="method" line="28" static="1">
			<f a="this">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<equals public="1" set="method" line="31" static="1">
			<f a="this:p">
				<c path="String"/>
				<x path="stx.Path"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</equals>
	</class>
	<class path="stx.Positions" params="" file="src/main/haxe/stx/Positions.hx">
		<nil public="1" line="6" static="1"><t path="haxe.PosInfos"/></nil>
		<toString public="1" set="method" line="7" static="1"><f a="pos">
	<t path="haxe.PosInfos"/>
	<c path="String"/>
</f></toString>
		<here public="1" set="method" line="11" static="1"><f a="?pos" v="null">
	<t path="haxe.PosInfos"/>
	<t path="haxe.PosInfos"/>
</f></here>
		<create public="1" set="method" line="14" static="1">
			<f a="fileName:className:methodName:lineNumber">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
				<t path="haxe.PosInfos"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</create>
		<withFragmentName public="1" set="method" line="22" static="1">
			<f a="pos">
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<meta><m n="noUsing"/></meta>
		</withFragmentName>
	</class>
	<class path="stx.Reflects" params="" file="src/main/haxe/stx/Reflects.hx">
		<callFunction public="1" params="A:B" set="method" line="32" static="1">
			<f a="v:key:?args" v="::null">
				<c path="callFunction.A"/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="callFunction.B"/>
			</f>
			<haxe_doc>No error handling, gets the value of field key as a reference before calling it on `v`.</haxe_doc>
		</callFunction>
		<callMethod public="1" params="A:B" set="method" line="39" static="1">
			<f a="v:func:?args" v="::null">
				<c path="callMethod.A"/>
				<x path="haxe.Function"/>
				<c path="Array"><d/></c>
				<c path="callMethod.B"/>
			</f>
			<haxe_doc>No error handling, `func` is a function reference.</haxe_doc>
		</callMethod>
		<callSafe public="1" params="A:B" set="method" line="46" static="1">
			<f a="v:key:?args" v="::null">
				<c path="callSafe.A"/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<t path="stx.types.Option"><c path="callSafe.B"/></t>
			</f>
			<haxe_doc>Partial error handling. If the method raises an error, it will propagate</haxe_doc>
		</callSafe>
		<callSecure public="1" params="A:B" set="method" line="53" static="1">
			<f a="v:key:?args" v="::null">
				<c path="callSecure.A"/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<x path="stx.Upshot"><c path="callSecure.B"/></x>
			</f>
			<meta><m n=":bug"><e>"#0b1kn00b: issue with __instanceof in nodejs"</e></m></meta>
			<haxe_doc>Full error handling, any errors raised will be passed back on the left hand side.</haxe_doc>
		</callSecure>
		<iterator public="1" params="T" get="inline" set="null" line="73" static="1"><f a="d">
	<c path="iterator.T"/>
	<t path="Iterator"><c path="iterator.T"/></t>
</f></iterator>
		<iterable public="1" params="T" get="inline" set="null" line="84" static="1"><f a="d">
	<c path="iterable.T"/>
	<t path="Iterable"><c path="iterable.T"/></t>
</f></iterable>
		<setFieldTuple public="1" params="A:B" set="method" line="92" static="1">
			<f a="v:t">
				<c path="setFieldTuple.A"/>
				<e path="stx.types.Tuple2">
					<c path="String"/>
					<c path="setFieldTuple.B"/>
				</e>
				<c path="setFieldTuple.A"/>
			</f>
			<haxe_doc>Convenience method for accumulating fields in folds</haxe_doc>
		</setFieldTuple>
		<getValue public="1" params="A:B" set="method" line="99" static="1">
			<f a="v:key">
				<c path="getValue.A"/>
				<c path="String"/>
				<t path="Null"><c path="getValue.B"/></t>
			</f>
			<haxe_doc>Returns the value of fields `key`, null if it does not exist or is null.</haxe_doc>
		</getValue>
		<getField public="1" params="A:B" set="method" line="105" static="1">
			<f a="v:key">
				<c path="getField.A"/>
				<c path="String"/>
				<t path="Null"><t path="stx.types.Field"><c path="getField.B"/></t></t>
			</f>
			<haxe_doc>Returns the value of fields `key`, null if it does not exist or is null.</haxe_doc>
		</getField>
		<setField public="1" params="A:B" set="method" line="111" static="1">
			<f a="o:key:v">
				<c path="setField.A"/>
				<c path="String"/>
				<c path="setField.B"/>
				<c path="setField.A"/>
			</f>
			<haxe_doc>Sets the value of field key.</haxe_doc>
		</setField>
		<getterOption public="1" params="A:B" set="method" line="118" static="1">
			<f a="fieldname">
				<c path="String"/>
				<f a="">
					<c path="getterOption.A"/>
					<t path="stx.types.Option"><c path="getterOption.B"/></t>
				</f>
			</f>
			<haxe_doc>Produces a dynamic getter with an Option output.</haxe_doc>
		</getterOption>
		<getter public="1" params="A:B" set="method" line="124" static="1">
			<f a="fieldname">
				<c path="String"/>
				<f a="">
					<c path="getter.A"/>
					<c path="getter.B"/>
				</f>
			</f>
			<haxe_doc>Produces a dynamic getter for field `fieldname`.</haxe_doc>
		</getter>
		<fields public="1" params="A" set="method" line="130" static="1">
			<f a="v">
				<c path="fields.A"/>
				<t path="Iterable"><t path="stx.types.Field"><d/></t></t>
			</f>
			<haxe_doc>Gets the types fields or the reflected fields from `v`</haxe_doc>
		</fields>
		<keys public="1" params="A" get="inline" set="null" line="136" static="1">
			<f a="v">
				<c path="keys.A"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Gets the types keys or the reflected fields from `v`</haxe_doc>
		</keys>
		<validate public="1" params="T" set="method" line="145" static="1">
			<f a="cls:flds">
				<x path="Class"><c path="validate.T"/></x>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Does a dynamic validation for proposed fields to be copied to type T. Returns
    the set of keys found in `flds` not present.</haxe_doc>
		</validate>
		<compare public="1" set="method" line="165" static="1">
			<f a="o0:o1">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Compares the fields of the two objects</haxe_doc>
		</compare>
	</class>
	<class path="stx.Show" params="" file="src/main/haxe/stx/Show.hx">
		<getShow public="1" params="A" set="method" line="16" static="1">
			<f a="v">
				<c path="getShow.A"/>
				<c path="String"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</getShow>
		<show public="1" params="A" set="method" line="19" static="1"><f a="v">
	<c path="show.A"/>
	<c path="String"/>
</f></show>
		<__show__ public="1" params="T" set="method" line="22" static="1"><f a="impl">
	<f a="">
		<d/>
		<c path="String"/>
	</f>
	<f a="">
		<c path="__show__.T"/>
		<c path="String"/>
	</f>
</f></__show__>
		<getShowFor public="1" params="T" set="method" line="29" static="1">
			<f a="t">
				<c path="getShowFor.T"/>
				<f a="">
					<c path="getShowFor.T"/>
					<c path="String"/>
				</f>
			</f>
			<haxe_doc><![CDATA[Returns a ShowFunction (T -> String). It works for any type. For Custom Classes you must provide a toString()
    method, otherwise the full class name is returned.]]></haxe_doc>
		</getShowFor>
		<getShowForType public="1" params="T" set="method" line="37" static="1">
			<f a="v">
				<e path="ValueType"/>
				<f a="">
					<c path="getShowForType.T"/>
					<c path="String"/>
				</f>
			</f>
			<haxe_doc>@:todo Reflect.fields doesn't work consistenly across platforms so we may probably pass to use Type.getInstanceFields. The problem here
    is that we must check if the fields are functions before grabbing the value.</haxe_doc>
		</getShowForType>
	</class>
	<class path="stx.NullShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" params="A" set="method" line="59" static="1"><f a="v">
	<c path="toString.A"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.EnumShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="64" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.ObjectShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="78" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.ArrayShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show">
		<toString public="1" params="T" set="method" line="91" static="1"><f a="v">
	<c path="Array"><c path="toString.T"/></c>
	<c path="String"/>
</f></toString>
		<toStringWith public="1" params="T" set="method" line="94" static="1"><f a="v:show">
	<c path="Array"><c path="toStringWith.T"/></c>
	<f a="">
		<c path="toStringWith.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></toStringWith>
		<mkString public="1" params="T" set="method" line="97" static="1"><f a="arr:?sep:?show" v=":', ':null">
	<c path="Array"><c path="mkString.T"/></c>
	<c path="String"/>
	<f a="">
		<c path="mkString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
</f></mkString>
	</class>
	<class path="stx.IterableShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show">
		<toString public="1" params="T" set="method" line="109" static="1"><f a="i:?show:?prefix:?suffix:?sep" v=":null:'(':')':', '">
	<t path="Iterable"><c path="toString.T"/></t>
	<f a="">
		<c path="toString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></toString>
		<mkString public="1" params="T" set="method" line="113" static="1"><f a="i:?show:?prefix:?suffix:?sep" v=":null:'(':')':', '">
	<t path="Iterable"><c path="mkString.T"/></t>
	<f a="">
		<c path="mkString.T"/>
		<c path="String"/>
	</f>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></mkString>
	</class>
	<class path="stx.BoolShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="129" static="1"><f a="v">
	<x path="Bool"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.IntShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="134" static="1"><f a="v">
	<x path="Int"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.FloatShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="139" static="1"><f a="v">
	<x path="Float"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.StackItemShow" params="" file="src/main/haxe/stx/Show.hx" module="stx.Show"><toString public="1" set="method" line="144" static="1"><f a="s">
	<e path="haxe.StackItem"/>
	<c path="String"/>
</f></toString></class>
	<class path="stx.Strings" params="" file="src/main/haxe/stx/Strings.hx">
		<unit public="1" set="method" line="17" static="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":noUsing"/></meta>
			<haxe_doc>Unit function.</haxe_doc>
		</unit>
		<SepAlphaPattern line="20" static="1"><c path="EReg"/></SepAlphaPattern>
		<AlphaUpperAlphaPattern line="21" static="1"><c path="EReg"/></AlphaUpperAlphaPattern>
		<toBool public="1" set="method" line="26" static="1">
			<f a="v:?d" v=":null">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `v` is `'true'` or `'1'`, `false` if `'false'` or `'0'` and `d` otherwise.</haxe_doc>
		</toBool>
		<int public="1" set="method" line="36" static="1">
			<f a="v:?d" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns an Int from String format, defaulting to `d`.</haxe_doc>
		</int>
		<toFloat public="1" set="method" line="44" static="1">
			<f a="v:?d" v=":null">
				<c path="String"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a Float from String format, defaulting to `d`.</haxe_doc>
		</toFloat>
		<startsWith public="1" set="method" line="52" static="1">
			<f a="v:frag">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `frag` is at the beginning of `v`, `false` otherwise.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="58" static="1">
			<f a="v:frag">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `frag` is at the end of `v`, `false` otherwise.</haxe_doc>
		</endsWith>
		<urlEncode public="1" set="method" line="64" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `v` as a url encoded String.</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="70" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Decodes a url encoded String.</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="76" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Escapes an html encoded String.</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="82" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Unescapes an html encoded String.</haxe_doc>
		</htmlUnescape>
		<trim public="1" set="method" line="88" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes spaces either side of the `s`.</haxe_doc>
		</trim>
		<dropLeft public="1" set="method" line="91" static="1"><f a="v:n">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></dropLeft>
		<take public="1" set="method" line="94" static="1"><f a="v:n">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></take>
		<contains public="1" set="method" line="106" static="1">
			<f a="v:s">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if v contains s, false otherwise.</haxe_doc>
		</contains>
		<replace public="1" set="method" line="112" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String where sub is replaced by by in s.</haxe_doc>
		</replace>
		<compare public="1" set="method" line="118" static="1">
			<f a="v1:v2">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns 0 if v1 equals v2, 1 if v1 is bigger than v2, or .1 if v1 is smaller than v2.</haxe_doc>
		</compare>
		<equals public="1" set="method" line="124" static="1">
			<f a="v1:v2">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if v1 equals v2, flase otherwise.</haxe_doc>
		</equals>
		<toString public="1" set="method" line="130" static="1">
			<f a="v">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Identity function.</haxe_doc>
		</toString>
		<surrounder public="1" set="method" line="136" static="1">
			<f a="l:r:v">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Surrounds `v`, prepending `l` and appending `r`.</haxe_doc>
		</surrounder>
		<prepend public="1" set="method" line="142" static="1">
			<f a="str:before">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>prepend `before` on `str.`</haxe_doc>
		</prepend>
		<append public="1" set="method" line="148" static="1">
			<f a="str:after">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>append `before` on `str.`</haxe_doc>
		</append>
		<cca public="1" set="method" line="154" static="1">
			<f a="str:i">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Get character code from `str` at index `i`.</haxe_doc>
		</cca>
		<at public="1" set="method" line="157" static="1"><f a="str:i">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
</f></at>
		<chunk public="1" set="method" line="163" static="1">
			<f a="str:?len" v=":1">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an Array of `str` divided into sections of length `len`.</haxe_doc>
		</chunk>
		<chars public="1" set="method" line="178" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an Array of the characters of `str`.</haxe_doc>
		</chars>
		<string public="1" set="method" line="190" static="1">
			<f a="l">
				<t path="Iterable"><c path="String"/></t>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a seamless joined string of `l`.</haxe_doc>
		</string>
		<toCamelCase public="1" set="method" line="200" static="1">
			<f a="str">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Turns a slugged or underscored string into a camelCase string.</haxe_doc>
		</toCamelCase>
		<fromCamelCase public="1" set="method" line="206" static="1">
			<f a="str:sep">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces uppercased letters with prefix `sep` + lowercase.</haxe_doc>
		</fromCamelCase>
		<split public="1" set="method" line="212" static="1">
			<f a="st:sep">
				<c path="String"/>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split `st` at `sep`.</haxe_doc>
		</split>
		<isEmpty public="1" set="method" line="218" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines empty string.</haxe_doc>
		</isEmpty>
		<isNotEmpty public="1" set="method" line="224" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines empty string.</haxe_doc>
		</isNotEmpty>
		<isEmptyOrBlank public="1" set="method" line="230" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines empty string, or string with only spaces.</haxe_doc>
		</isEmptyOrBlank>
		<isNotEmptyOrBlank public="1" set="method" line="236" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Does what it says on the tin.</haxe_doc>
		</isNotEmptyOrBlank>
		<stripWhite public="1" set="method" line="242" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Strip whitespace out of a string.</haxe_doc>
		</stripWhite>
		<replaceRecurse public="1" set="method" line="256" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Continues to replace `sub` with `by` until no more instances of `sub` exist.</haxe_doc>
		</replaceRecurse>
		<uuid public="1" set="method" line="274" static="1">
			<f a="?value" v="'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a unique identifier, each `x` replaced with a hex character.</haxe_doc>
		</uuid>
		<iterator public="1" set="method" line="285" static="1">
			<f a="value">
				<c path="String"/>
				<t path="Iterator"><c path="String"/></t>
			</f>
			<haxe_doc>Returns an iterator of `value`.</haxe_doc>
		</iterator>
		<camelCaseToDashes public="1" set="method" line="300" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></camelCaseToDashes>
		<camelCaseToLowerCase public="1" set="method" line="305" static="1"><f a="value:?separator" v=":'_'">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></camelCaseToLowerCase>
		<camelCaseToUpperCase public="1" set="method" line="309" static="1"><f a="value:?separator" v=":'_'">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></camelCaseToUpperCase>
		<isSpace public="1" set="method" line="313" static="1"><f a="s:pos">
	<c path="String"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></isSpace>
		<chr public="1" get="inline" set="null" line="317" static="1"><f a="i">
	<x path="Int"/>
	<c path="String"/>
</f></chr>
		<underscore public="1" set="method" line="321" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n="thx"/></meta>
		</underscore>
	</class>
	<class path="stx.ERegs" params="" file="src/main/haxe/stx/Strings.hx" module="stx.Strings">
		<replaceReg public="1" set="method" line="330" static="1"><f a="s:reg:with">
	<c path="String"/>
	<c path="EReg"/>
	<c path="String"/>
	<c path="String"/>
</f></replaceReg>
		<matches public="1" set="method" line="333" static="1"><f a="reg">
	<c path="EReg"/>
	<c path="Array"><c path="String"/></c>
</f></matches>
	</class>
	<typedef path="stx.Table" params="T" file="src/main/haxe/stx/Tables.hx" module="stx.Tables"><d><c path="stx.Table.T"/></d></typedef>
	<class path="stx.Tables" params="" file="src/main/haxe/stx/Tables.hx">
		<fields public="1" params="T" get="inline" set="null" line="26" static="1"><f a="d">
	<t path="stx.Table"><c path="fields.T"/></t>
	<t path="Iterable"><t path="stx.types.Field"><c path="fields.T"/></t></t>
</f></fields>
		<vals public="1" params="T" set="method" line="29" static="1"><f a="d">
	<t path="stx.Table"><c path="vals.T"/></t>
	<c path="Array"><c path="vals.T"/></c>
</f></vals>
		<select public="1" params="T" set="method" line="34" static="1">
			<f a="d:names">
				<t path="stx.Table"><c path="select.T"/></t>
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="select.T"/></c>
			</f>
			<meta><m n=":doc"><e>"Returns the values of the names."</e></m></meta>
		</select>
		<missing public="1" params="T" set="method" line="46" static="1">
			<f a="d:fields">
				<t path="stx.Table"><c path="missing.T"/></t>
				<c path="Array"><c path="String"/></c>
				<e path="haxe.ds.Option"><c path="Array"><c path="String"/></c></e>
			</f>
			<meta><m n=":doc"><e>"Report fields missing."</e></m></meta>
		</missing>
		<has public="1" params="T" set="method" line="58" static="1"><f a="d:keys">
	<t path="stx.Table"><c path="has.T"/></t>
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
</f></has>
		<only public="1" params="T" set="method" line="61" static="1"><f a="d:keys">
	<t path="stx.Table"><c path="only.T"/></t>
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
</f></only>
		<merge public="1" params="T" set="method" line="70" static="1">
			<f a="d0:d1">
				<t path="stx.Table"><c path="merge.T"/></t>
				<t path="stx.Table"><c path="merge.T"/></t>
				<t path="stx.Table"><c path="merge.T"/></t>
			</f>
			<meta><m n=":doc"><e>"Merges the first level of object keys into a new Table, right hand override."</e></m></meta>
		</merge>
		<toMap public="1" params="T" set="method" line="83" static="1"><f a="o">
	<t path="stx.Table"><c path="toMap.T"/></t>
	<c path="haxe.ds.StringMap"><c path="toMap.T"/></c>
</f></toMap>
	</class>
	<class path="stx.Tuples" params="" file="src/main/haxe/stx/Tuples.hx">
		<fst public="1" params="T1:T2" set="method" line="18" static="1">
			<f a="tuple">
				<e path="stx.types.Tuple2">
					<c path="fst.T1"/>
					<c path="fst.T2"/>
				</e>
				<c path="fst.T1"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</fst>
		<snd public="1" params="T1:T2" set="method" line="23" static="1">
			<f a="tuple">
				<e path="stx.types.Tuple2">
					<c path="snd.T1"/>
					<c path="snd.T2"/>
				</e>
				<c path="snd.T2"/>
			</f>
			<meta><m n=":noUsing"/></meta>
		</snd>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta><m n=":note"><e>"#0b1kn00b: Tuples are not abstract types because of issues with pattern matching, this may change."</e></m></meta>
	</class>
	<class path="stx.Product" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<fromTuple1 public="1" params="T1" set="method" line="34" static="1"><f a="a">
	<e path="stx.types.Tuple1"><c path="fromTuple1.T1"/></e>
	<c path="stx.Product"/>
</f></fromTuple1>
		<fromTuple2 public="1" params="T1:T2" set="method" line="39" static="1"><f a="v">
	<e path="stx.types.Tuple2">
		<c path="fromTuple2.T1"/>
		<c path="fromTuple2.T2"/>
	</e>
	<c path="stx.Product"/>
</f></fromTuple2>
		<fromTuple3 public="1" params="T1:T2:T3" set="method" line="44" static="1"><f a="v">
	<e path="stx.types.Tuple3">
		<c path="fromTuple3.T1"/>
		<c path="fromTuple3.T2"/>
		<c path="fromTuple3.T3"/>
	</e>
	<c path="stx.Product"/>
</f></fromTuple3>
		<fromTuple4 public="1" params="T1:T2:T3:T4" set="method" line="49" static="1"><f a="v">
	<e path="stx.types.Tuple4">
		<c path="fromTuple4.T1"/>
		<c path="fromTuple4.T2"/>
		<c path="fromTuple4.T3"/>
		<c path="fromTuple4.T4"/>
	</e>
	<c path="stx.Product"/>
</f></fromTuple4>
		<fromTuple5 public="1" params="T1:T2:T3:T4:T5" set="method" line="54" static="1"><f a="v">
	<e path="stx.types.Tuple5">
		<c path="fromTuple5.T1"/>
		<c path="fromTuple5.T2"/>
		<c path="fromTuple5.T3"/>
		<c path="fromTuple5.T4"/>
		<c path="fromTuple5.T5"/>
	</e>
	<c path="stx.Product"/>
</f></fromTuple5>
		<__array__><c path="Array"><d/></c></__array__>
		<elements public="1" set="method" line="59"><f a=""><c path="stx.Product"/></f></elements>
		<element public="1" set="method" line="62"><f a="n">
	<x path="Int"/>
	<unknown/>
</f></element>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<get_length public="1" set="method" line="66"><f a=""><x path="Int"/></f></get_length>
		<new public="1" set="method" line="31"><f a="arr">
	<c path="Array"><d/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="stx.Tuples1" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<fst public="1" params="T1" set="method" line="72" static="1"><f a="tuple">
	<e path="stx.types.Tuple1"><c path="fst.T1"/></e>
	<c path="fst.T1"/>
</f></fst>
		<equals public="1" params="T1" set="method" line="77" static="1"><f a="a:b">
	<e path="stx.types.Tuple1"><c path="equals.T1"/></e>
	<e path="stx.types.Tuple1"><c path="equals.T1"/></e>
	<x path="Bool"/>
</f></equals>
		<toString public="1" params="T1" set="method" line="85" static="1"><f a="tuple">
	<e path="stx.types.Tuple1"><c path="toString.T1"/></e>
	<c path="String"/>
</f></toString>
		<toArray public="1" params="T1" set="method" line="88" static="1"><f a="tuple">
	<e path="stx.types.Tuple1"><c path="toArray.T1"/></e>
	<c path="Array"><d/></c>
</f></toArray>
		<toProduct public="1" params="T1" set="method" line="93" static="1"><f a="tp">
	<e path="stx.types.Tuple1"><c path="toProduct.T1"/></e>
	<c path="stx.Product"/>
</f></toProduct>
	</class>
	<class path="stx.Tuples2" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<toTuple2 public="1" params="T1:T2" set="method" line="99" static="1"><f a="p">
	<x path="tink.core.Pair">
		<c path="toTuple2.T1"/>
		<c path="toTuple2.T2"/>
	</x>
	<e path="stx.types.Tuple2">
		<c path="toTuple2.T1"/>
		<c path="toTuple2.T2"/>
	</e>
</f></toTuple2>
		<toPair public="1" params="T1:T2" set="method" line="102" static="1"><f a="tp">
	<e path="stx.types.Tuple2">
		<c path="toPair.T1"/>
		<c path="toPair.T2"/>
	</e>
	<x path="tink.core.Pair">
		<c path="toPair.T1"/>
		<c path="toPair.T2"/>
	</x>
</f></toPair>
		<apply public="1" params="T1:T2:R" set="method" line="105" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<f a="">
			<c path="apply.T1"/>
			<c path="apply.R"/>
		</f>
		<c path="apply.T1"/>
	</e>
	<c path="apply.R"/>
</f></apply>
		<fst public="1" params="T1:T2" set="method" line="108" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<c path="fst.T1"/>
		<c path="fst.T2"/>
	</e>
	<c path="fst.T1"/>
</f></fst>
		<snd public="1" params="T1:T2" set="method" line="113" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<c path="snd.T1"/>
		<c path="snd.T2"/>
	</e>
	<c path="snd.T2"/>
</f></snd>
		<swap public="1" params="T1:T2" set="method" line="118" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<c path="swap.T1"/>
		<c path="swap.T2"/>
	</e>
	<e path="stx.types.Tuple2">
		<c path="swap.T2"/>
		<c path="swap.T1"/>
	</e>
</f></swap>
		<equals public="1" params="T1:T2" set="method" line="123" static="1"><f a="a:b">
	<e path="stx.types.Tuple2">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
	</e>
	<e path="stx.types.Tuple2">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
	</e>
	<x path="Bool"/>
</f></equals>
		<toString public="1" params="T1:T2" set="method" line="133" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<c path="toString.T1"/>
		<c path="toString.T2"/>
	</e>
	<c path="String"/>
</f></toString>
		<toArray public="1" params="T1:T2" set="method" line="136" static="1"><f a="tuple">
	<e path="stx.types.Tuple2">
		<c path="toArray.T1"/>
		<c path="toArray.T2"/>
	</e>
	<c path="Array"><d/></c>
</f></toArray>
		<toProduct public="1" params="T1:T2" set="method" line="141" static="1"><f a="tp">
	<e path="stx.types.Tuple2">
		<c path="toProduct.T1"/>
		<c path="toProduct.T2"/>
	</e>
	<c path="stx.Product"/>
</f></toProduct>
		<entuple public="1" params="A:B:C" get="inline" set="null" line="144" static="1"><f a="t:c">
	<e path="stx.types.Tuple2">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
	</e>
	<c path="entuple.C"/>
	<e path="stx.types.Tuple3">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
	</e>
</f></entuple>
		<into public="1" params="A:B:C" set="method" line="147" static="1"><f a="t:f">
	<e path="stx.types.Tuple2">
		<c path="into.A"/>
		<c path="into.B"/>
	</e>
	<f a=":">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
	</f>
	<c path="into.C"/>
</f></into>
		<tupled public="1" params="A:B:C" get="inline" set="null" line="152" static="1"><f a="f">
	<f a=":">
		<c path="tupled.A"/>
		<c path="tupled.B"/>
		<c path="tupled.C"/>
	</f>
	<f a="t">
		<e path="stx.types.Tuple2">
			<c path="tupled.A"/>
			<c path="tupled.B"/>
		</e>
		<c path="tupled.C"/>
	</f>
</f></tupled>
		<untupled public="1" params="A:B:C" get="inline" set="null" line="155" static="1"><f a="f">
	<f a="">
		<e path="stx.types.Tuple2">
			<c path="untupled.A"/>
			<c path="untupled.B"/>
		</e>
		<c path="untupled.C"/>
	</f>
	<f a=":">
		<c path="untupled.A"/>
		<c path="untupled.B"/>
		<c path="untupled.C"/>
	</f>
</f></untupled>
	</class>
	<class path="stx.Tuples3" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<fst public="1" params="T1:T2:T3" set="method" line="163" static="1"><f a="tuple">
	<e path="stx.types.Tuple3">
		<c path="fst.T1"/>
		<c path="fst.T2"/>
		<c path="fst.T3"/>
	</e>
	<c path="fst.T1"/>
</f></fst>
		<snd public="1" params="T1:T2:T3" set="method" line="168" static="1"><f a="tuple">
	<e path="stx.types.Tuple3">
		<c path="snd.T1"/>
		<c path="snd.T2"/>
		<c path="snd.T3"/>
	</e>
	<c path="snd.T2"/>
</f></snd>
		<thd public="1" params="T1:T2:T3" set="method" line="173" static="1"><f a="tuple">
	<e path="stx.types.Tuple3">
		<c path="thd.T1"/>
		<c path="thd.T2"/>
		<c path="thd.T3"/>
	</e>
	<c path="thd.T3"/>
</f></thd>
		<equals public="1" params="T1:T2:T3" set="method" line="178" static="1"><f a="a:b">
	<e path="stx.types.Tuple3">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
	</e>
	<e path="stx.types.Tuple3">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
	</e>
	<x path="Bool"/>
</f></equals>
		<toString public="1" params="T1:T2:T3" set="method" line="190" static="1"><f a="tuple">
	<e path="stx.types.Tuple3">
		<c path="toString.T1"/>
		<c path="toString.T2"/>
		<c path="toString.T3"/>
	</e>
	<c path="String"/>
</f></toString>
		<toArray public="1" params="T1:T2:T3" set="method" line="193" static="1"><f a="tuple">
	<e path="stx.types.Tuple3">
		<c path="toArray.T1"/>
		<c path="toArray.T2"/>
		<c path="toArray.T3"/>
	</e>
	<c path="Array"><d/></c>
</f></toArray>
		<toProduct public="1" params="T1:T2:T3" set="method" line="198" static="1"><f a="tp">
	<e path="stx.types.Tuple3">
		<c path="toProduct.T1"/>
		<c path="toProduct.T2"/>
		<c path="toProduct.T3"/>
	</e>
	<c path="stx.Product"/>
</f></toProduct>
		<entuple public="1" params="A:B:C:D" set="method" line="201" static="1"><f a="t:d">
	<e path="stx.types.Tuple3">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
	</e>
	<c path="entuple.D"/>
	<e path="stx.types.Tuple4">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
		<c path="entuple.D"/>
	</e>
</f></entuple>
		<into public="1" params="A:B:C:D" set="method" line="204" static="1"><f a="t:f">
	<e path="stx.types.Tuple3">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
	</e>
	<f a="::">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
		<c path="into.D"/>
	</f>
	<c path="into.D"/>
</f></into>
		<tupled public="1" params="A:B:C:D" set="method" line="209" static="1"><f a="fn">
	<f a="::">
		<c path="tupled.A"/>
		<c path="tupled.B"/>
		<c path="tupled.C"/>
		<c path="tupled.D"/>
	</f>
	<f a="t">
		<e path="stx.types.Tuple3">
			<c path="tupled.A"/>
			<c path="tupled.B"/>
			<c path="tupled.C"/>
		</e>
		<c path="tupled.D"/>
	</f>
</f></tupled>
	</class>
	<class path="stx.Tuples4" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<fst public="1" params="T1:T2:T3:T4" set="method" line="215" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="fst.T1"/>
		<c path="fst.T2"/>
		<c path="fst.T3"/>
		<c path="fst.T4"/>
	</e>
	<c path="fst.T1"/>
</f></fst>
		<snd public="1" params="T1:T2:T3:T4" set="method" line="220" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="snd.T1"/>
		<c path="snd.T2"/>
		<c path="snd.T3"/>
		<c path="snd.T4"/>
	</e>
	<c path="snd.T2"/>
</f></snd>
		<thd public="1" params="T1:T2:T3:T4" set="method" line="225" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="thd.T1"/>
		<c path="thd.T2"/>
		<c path="thd.T3"/>
		<c path="thd.T4"/>
	</e>
	<c path="thd.T3"/>
</f></thd>
		<frt public="1" params="T1:T2:T3:T4" set="method" line="230" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="frt.T1"/>
		<c path="frt.T2"/>
		<c path="frt.T3"/>
		<c path="frt.T4"/>
	</e>
	<c path="frt.T4"/>
</f></frt>
		<equals public="1" params="T1:T2:T3:T4" set="method" line="235" static="1"><f a="a:b">
	<e path="stx.types.Tuple4">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
		<c path="equals.T4"/>
	</e>
	<e path="stx.types.Tuple4">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
		<c path="equals.T4"/>
	</e>
	<x path="Bool"/>
</f></equals>
		<toString public="1" params="T1:T2:T3:T4" set="method" line="247" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="toString.T1"/>
		<c path="toString.T2"/>
		<c path="toString.T3"/>
		<c path="toString.T4"/>
	</e>
	<c path="String"/>
</f></toString>
		<toArray public="1" params="T1:T2:T3:T4" set="method" line="250" static="1"><f a="tuple">
	<e path="stx.types.Tuple4">
		<c path="toArray.T1"/>
		<c path="toArray.T2"/>
		<c path="toArray.T3"/>
		<c path="toArray.T4"/>
	</e>
	<c path="Array"><d/></c>
</f></toArray>
		<toProduct public="1" params="T1:T2:T3:T4" set="method" line="255" static="1"><f a="tp">
	<e path="stx.types.Tuple4">
		<c path="toProduct.T1"/>
		<c path="toProduct.T2"/>
		<c path="toProduct.T3"/>
		<c path="toProduct.T4"/>
	</e>
	<c path="stx.Product"/>
</f></toProduct>
		<entuple public="1" params="A:B:C:D:E" set="method" line="258" static="1"><f a="tp:e">
	<e path="stx.types.Tuple4">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
		<c path="entuple.D"/>
	</e>
	<c path="entuple.E"/>
	<e path="stx.types.Tuple5">
		<c path="entuple.A"/>
		<c path="entuple.B"/>
		<c path="entuple.C"/>
		<c path="entuple.D"/>
		<c path="entuple.E"/>
	</e>
</f></entuple>
		<into public="1" params="A:B:C:D:E" set="method" line="261" static="1"><f a="t:f">
	<e path="stx.types.Tuple4">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
		<c path="into.D"/>
	</e>
	<f a=":::">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
		<c path="into.D"/>
		<c path="into.E"/>
	</f>
	<c path="into.E"/>
</f></into>
		<tupled public="1" params="A:B:C:D:E" set="method" line="266" static="1"><f a="f">
	<f a=":::">
		<c path="tupled.A"/>
		<c path="tupled.B"/>
		<c path="tupled.C"/>
		<c path="tupled.D"/>
		<c path="tupled.E"/>
	</f>
	<f a="t">
		<e path="stx.types.Tuple4">
			<c path="tupled.A"/>
			<c path="tupled.B"/>
			<c path="tupled.C"/>
			<c path="tupled.D"/>
		</e>
		<c path="tupled.E"/>
	</f>
</f></tupled>
	</class>
	<class path="stx.Tuples5" params="" file="src/main/haxe/stx/Tuples.hx" module="stx.Tuples">
		<fst public="1" params="T1:T2:T3:T4:T5" set="method" line="272" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="fst.T1"/>
		<c path="fst.T2"/>
		<c path="fst.T3"/>
		<c path="fst.T4"/>
		<c path="fst.T5"/>
	</e>
	<c path="fst.T1"/>
</f></fst>
		<snd public="1" params="T1:T2:T3:T4:T5" set="method" line="277" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="snd.T1"/>
		<c path="snd.T2"/>
		<c path="snd.T3"/>
		<c path="snd.T4"/>
		<c path="snd.T5"/>
	</e>
	<c path="snd.T2"/>
</f></snd>
		<thd public="1" params="T1:T2:T3:T4:T5" set="method" line="282" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="thd.T1"/>
		<c path="thd.T2"/>
		<c path="thd.T3"/>
		<c path="thd.T4"/>
		<c path="thd.T5"/>
	</e>
	<c path="thd.T3"/>
</f></thd>
		<frt public="1" params="T1:T2:T3:T4:T5" set="method" line="287" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="frt.T1"/>
		<c path="frt.T2"/>
		<c path="frt.T3"/>
		<c path="frt.T4"/>
		<c path="frt.T5"/>
	</e>
	<c path="frt.T4"/>
</f></frt>
		<fth public="1" params="T1:T2:T3:T4:T5" set="method" line="292" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="fth.T1"/>
		<c path="fth.T2"/>
		<c path="fth.T3"/>
		<c path="fth.T4"/>
		<c path="fth.T5"/>
	</e>
	<c path="fth.T5"/>
</f></fth>
		<equals public="1" params="T1:T2:T3:T4:T5" set="method" line="297" static="1"><f a="a:b">
	<e path="stx.types.Tuple5">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
		<c path="equals.T4"/>
		<c path="equals.T5"/>
	</e>
	<e path="stx.types.Tuple5">
		<c path="equals.T1"/>
		<c path="equals.T2"/>
		<c path="equals.T3"/>
		<c path="equals.T4"/>
		<c path="equals.T5"/>
	</e>
	<x path="Bool"/>
</f></equals>
		<toString public="1" params="T1:T2:T3:T4:T5" set="method" line="310" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="toString.T1"/>
		<c path="toString.T2"/>
		<c path="toString.T3"/>
		<c path="toString.T4"/>
		<c path="toString.T5"/>
	</e>
	<c path="String"/>
</f></toString>
		<toArray public="1" params="T1:T2:T3:T4:T5" set="method" line="313" static="1"><f a="tuple">
	<e path="stx.types.Tuple5">
		<c path="toArray.T1"/>
		<c path="toArray.T2"/>
		<c path="toArray.T3"/>
		<c path="toArray.T4"/>
		<c path="toArray.T5"/>
	</e>
	<c path="Array"><d/></c>
</f></toArray>
		<toProduct public="1" params="T1:T2:T3:T4:T5" set="method" line="318" static="1"><f a="tp">
	<e path="stx.types.Tuple5">
		<c path="toProduct.T1"/>
		<c path="toProduct.T2"/>
		<c path="toProduct.T3"/>
		<c path="toProduct.T4"/>
		<c path="toProduct.T5"/>
	</e>
	<c path="stx.Product"/>
</f></toProduct>
		<into public="1" params="A:B:C:D:E:F" set="method" line="321" static="1"><f a="t:f">
	<e path="stx.types.Tuple5">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
		<c path="into.D"/>
		<c path="into.E"/>
	</e>
	<f a="::::">
		<c path="into.A"/>
		<c path="into.B"/>
		<c path="into.C"/>
		<c path="into.D"/>
		<c path="into.E"/>
		<c path="into.F"/>
	</f>
	<c path="into.F"/>
</f></into>
		<tupled public="1" params="A:B:C:D:E:F" set="method" line="326" static="1"><f a="f">
	<f a="::::">
		<c path="tupled.A"/>
		<c path="tupled.B"/>
		<c path="tupled.C"/>
		<c path="tupled.D"/>
		<c path="tupled.E"/>
		<c path="tupled.F"/>
	</f>
	<f a="t">
		<e path="stx.types.Tuple5">
			<c path="tupled.A"/>
			<c path="tupled.B"/>
			<c path="tupled.C"/>
			<c path="tupled.D"/>
			<c path="tupled.E"/>
		</e>
		<c path="tupled.F"/>
	</f>
</f></tupled>
	</class>
	<class path="stx.Types" params="" file="src/main/haxe/stx/Types.hx">
		<definition public="1" get="inline" set="null" line="24" static="1">
			<f a="v">
				<d/>
				<x path="Class"><d/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</definition>
		<vtype public="1" get="inline" set="null" line="30" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>returns `ValueType` of `v`.</haxe_doc>
		</vtype>
		<classify public="1" set="method" line="36" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns `Class` of `name`</haxe_doc>
		</classify>
		<ancestors public="1" params="A" set="method" line="41" static="1">
			<f a="type:?until" v=":null">
				<x path="Class"><c path="ancestors.A"/></x>
				<x path="Class"><d/></x>
				<c path="Array"><x path="Class"><d/></x></c>
			</f>
			<meta>
				<m n=":note"><e>"#0b1kn00b: depends upon `until` actually being part of the hierarchy"</e></m>
				<m n=":unsafe"/>
			</meta>
		</ancestors>
		<name public="1" params="A" set="method" line="60" static="1">
			<f a="cls">
				<x path="Class"><c path="name.A"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Produces class name.</haxe_doc>
		</name>
		<pack public="1" set="method" line="66" static="1">
			<f a="cls">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Produces package name</haxe_doc>
		</pack>
		<construct public="1" params="A" set="method" line="74" static="1">
			<f a="type:?args" v=":null">
				<x path="Class"><c path="construct.A"/></x>
				<c path="Array"><d/></c>
				<t path="Null"><c path="construct.A"/></t>
			</f>
			<haxe_doc>Construct `type` with optional arguments.</haxe_doc>
		</construct>
		<build public="1" params="A" set="method" line="87" static="1">
			<f a="name:?args" v=":null">
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="build.A"/>
			</f>
			<meta>
				<m n="doc"><e>""</e></m>
				<m n=":note"><e>"#0b1kn00b: could generalise this for enums."</e></m>
			</meta>
		</build>
		<instantiate public="1" params="A" get="inline" set="null" line="96" static="1">
			<f a="type">
				<x path="Class"><c path="instantiate.A"/></x>
				<c path="instantiate.A"/>
			</f>
			<haxe_doc>Create `type`, bypassing constructor.</haxe_doc>
		</instantiate>
		<locals public="1" params="A" get="inline" set="null" line="102" static="1">
			<f a="type">
				<x path="Class"><c path="locals.A"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Produces field names for instance variables.</haxe_doc>
		</locals>
		<statics public="1" params="A" get="inline" set="null" line="108" static="1">
			<f a="type">
				<x path="Class"><c path="statics.A"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Produces fields names for class statics.</haxe_doc>
		</statics>
		<descended public="1" get="inline" set="null" line="113" static="1">
			<f a="type:sup">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n="doc"><e>"Does `type` exist in the hierarchy of `type`?"</e></m>
				<m n=":thx"/>
			</meta>
		</descended>
		<of public="1" params="T" get="inline" set="null" line="128" static="1">
			<f a="type:value">
				<x path="Class"><c path="of.T"/></x>
				<d/>
				<t path="Null"><c path="of.T"/></t>
			</f>
			<meta>
				<m n=":thx"/>
				<m n="params">
					<e>"A Type to cast to."</e>
					<e>"any class instance."</e>
				</m>
				<m n="returns"><e>"The casted value."</e></m>
			</meta>
		</of>
		<as public="1" params="I:O" get="inline" set="null" line="135" static="1"><f a="value">
	<c path="as.I"/>
	<c path="as.O"/>
</f></as>
	</class>
	<abstract path="stx.Upshot" params="T" file="src/main/haxe/stx/Upshot.hx">
		<from><icast><t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t></icast></from>
		<this><t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t></this>
		<to><icast><t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t></icast></to>
		<impl><class path="stx._Upshot.Upshot_Impl_" params="" file="src/main/haxe/stx/Upshot.hx" private="1" module="stx.Upshot">
	<_new public="1" set="method" line="13" static="1">
		<f a="v">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<fromFail public="1" params="T" set="method" line="16" static="1"><f a="f">
	<c path="tink.core.Error"/>
	<x path="stx.Upshot"><c path="fromFail.T"/></x>
</f></fromFail>
	<flatMap public="1" params="U" set="method" line="19" static="1">
		<f a="this:fn">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<f a="">
				<c path="stx.Upshot.T"/>
				<x path="stx.Upshot"><c path="flatMap.U"/></x>
			</f>
			<x path="stx.Upshot"><c path="flatMap.U"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<map public="1" params="U" set="method" line="22" static="1">
		<f a="this:fn">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<f a="">
				<c path="stx.Upshot.T"/>
				<c path="map.U"/>
			</f>
			<x path="stx.Upshot"><c path="map.U"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<or public="1" set="method" line="26" static="1">
		<f a="this:fallback">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
			<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":tinkish"/>
		</meta>
	</or>
	<retry public="1" set="method" line="29" static="1">
		<f a="this:fn">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<f a="">
				<c path="tink.core.Error"/>
				<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
			</f>
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</retry>
	<recover public="1" set="method" line="32" static="1">
		<f a="this:fn">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<f a="">
				<c path="tink.core.Error"/>
				<c path="stx.Upshot.T"/>
			</f>
			<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</recover>
	<zipWith public="1" params="U:V" set="method" line="35" static="1">
		<f a="this:oc:fn">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<x path="stx.Upshot"><c path="zipWith.U"/></x>
			<f a=":">
				<c path="stx.Upshot.T"/>
				<c path="zipWith.U"/>
				<c path="zipWith.V"/>
			</f>
			<x path="stx.Upshot"><c path="zipWith.V"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</zipWith>
	<zip public="1" params="U" set="method" line="38" static="1">
		<f a="this:oc">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<x path="stx.Upshot"><c path="zip.U"/></x>
			<x path="stx.Upshot"><e path="stx.types.Tuple2">
	<c path="stx.Upshot.T"/>
	<c path="zip.U"/>
</e></x>
		</f>
		<meta><m n=":impl"/></meta>
	</zip>
	<toOption public="1" set="method" line="41" static="1">
		<f a="this">
			<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			<e path="haxe.ds.Option"><c path="stx.Upshot.T"/></e>
		</f>
		<meta><m n=":impl"/></meta>
	</toOption>
</class></impl>
	</abstract>
	<class path="stx._Upshot.Upshot_Impl_" params="" file="src/main/haxe/stx/Upshot.hx" private="1" module="stx.Upshot">
		<_new public="1" set="method" line="13" static="1">
			<f a="v">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<fromFail public="1" params="T" set="method" line="16" static="1"><f a="f">
	<c path="tink.core.Error"/>
	<x path="stx.Upshot"><c path="fromFail.T"/></x>
</f></fromFail>
		<flatMap public="1" params="U" set="method" line="19" static="1">
			<f a="this:fn">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<f a="">
					<c path="stx.Upshot.T"/>
					<x path="stx.Upshot"><c path="flatMap.U"/></x>
				</f>
				<x path="stx.Upshot"><c path="flatMap.U"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<map public="1" params="U" set="method" line="22" static="1">
			<f a="this:fn">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<f a="">
					<c path="stx.Upshot.T"/>
					<c path="map.U"/>
				</f>
				<x path="stx.Upshot"><c path="map.U"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<or public="1" set="method" line="26" static="1">
			<f a="this:fallback">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
				<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":tinkish"/>
			</meta>
		</or>
		<retry public="1" set="method" line="29" static="1">
			<f a="this:fn">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<f a="">
					<c path="tink.core.Error"/>
					<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
				</f>
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</retry>
		<recover public="1" set="method" line="32" static="1">
			<f a="this:fn">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<f a="">
					<c path="tink.core.Error"/>
					<c path="stx.Upshot.T"/>
				</f>
				<x path="stx.Upshot"><c path="stx.Upshot.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</recover>
		<zipWith public="1" params="U:V" set="method" line="35" static="1">
			<f a="this:oc:fn">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<x path="stx.Upshot"><c path="zipWith.U"/></x>
				<f a=":">
					<c path="stx.Upshot.T"/>
					<c path="zipWith.U"/>
					<c path="zipWith.V"/>
				</f>
				<x path="stx.Upshot"><c path="zipWith.V"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</zipWith>
		<zip public="1" params="U" set="method" line="38" static="1">
			<f a="this:oc">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<x path="stx.Upshot"><c path="zip.U"/></x>
				<x path="stx.Upshot"><e path="stx.types.Tuple2">
	<c path="stx.Upshot.T"/>
	<c path="zip.U"/>
</e></x>
			</f>
			<meta><m n=":impl"/></meta>
		</zip>
		<toOption public="1" set="method" line="41" static="1">
			<f a="this">
				<t path="stx.types._Upshot.TUpshot"><c path="stx.Upshot.T"/></t>
				<e path="haxe.ds.Option"><c path="stx.Upshot.T"/></e>
			</f>
			<meta><m n=":impl"/></meta>
		</toOption>
	</class>
	<class path="stx.Upshots" params="" file="src/main/haxe/stx/Upshot.hx" module="stx.Upshot">
		<fold public="1" params="A:B" set="method" line="49" static="1"><f a="o:fn:fn0">
	<t path="stx.types._Upshot.TUpshot"><c path="fold.A"/></t>
	<f a="">
		<c path="fold.A"/>
		<c path="fold.B"/>
	</f>
	<f a="">
		<c path="tink.core.Error"/>
		<c path="fold.B"/>
	</f>
	<c path="fold.B"/>
</f></fold>
		<flatMap public="1" params="A:B" set="method" line="55" static="1"><f a="o:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="flatMap.A"/></t>
	<f a="">
		<c path="flatMap.A"/>
		<t path="stx.types._Upshot.TUpshot"><c path="flatMap.B"/></t>
	</f>
	<t path="stx.types._Upshot.TUpshot"><c path="flatMap.B"/></t>
</f></flatMap>
		<map public="1" params="A:B" set="method" line="61" static="1"><f a="o:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="map.A"/></t>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<t path="stx.types._Upshot.TUpshot"><c path="map.B"/></t>
</f></map>
		<or public="1" params="A" set="method" line="68" static="1">
			<f a="o:fallback">
				<t path="stx.types._Upshot.TUpshot"><c path="or.A"/></t>
				<t path="stx.types._Upshot.TUpshot"><c path="or.A"/></t>
				<t path="stx.types._Upshot.TUpshot"><c path="or.A"/></t>
			</f>
			<meta><m n=":tinkish"/></meta>
		</or>
		<retry public="1" params="A" set="method" line="74" static="1"><f a="o:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="retry.A"/></t>
	<f a="">
		<c path="tink.core.Error"/>
		<t path="stx.types._Upshot.TUpshot"><c path="retry.A"/></t>
	</f>
	<t path="stx.types._Upshot.TUpshot"><c path="retry.A"/></t>
</f></retry>
		<recover public="1" params="A" set="method" line="80" static="1"><f a="o:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="recover.A"/></t>
	<f a="">
		<c path="tink.core.Error"/>
		<c path="recover.A"/>
	</f>
	<t path="stx.types._Upshot.TUpshot"><c path="recover.A"/></t>
</f></recover>
		<orUse public="1" params="A" set="method" line="86" static="1"><f a="o:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="orUse.A"/></t>
	<f a="">
		<c path="tink.core.Error"/>
		<c path="orUse.A"/>
	</f>
	<c path="orUse.A"/>
</f></orUse>
		<flatten public="1" params="A" set="method" line="92" static="1"><f a="o">
	<t path="stx.types._Upshot.TUpshot"><t path="stx.types._Upshot.TUpshot"><c path="flatten.A"/></t></t>
	<t path="stx.types._Upshot.TUpshot"><c path="flatten.A"/></t>
</f></flatten>
		<zipWith public="1" params="A:B:C" set="method" line="99" static="1"><f a="o:o0:fn">
	<t path="stx.types._Upshot.TUpshot"><c path="zipWith.A"/></t>
	<t path="stx.types._Upshot.TUpshot"><c path="zipWith.B"/></t>
	<f a=":">
		<c path="zipWith.A"/>
		<c path="zipWith.B"/>
		<c path="zipWith.C"/>
	</f>
	<t path="stx.types._Upshot.TUpshot"><c path="zipWith.C"/></t>
</f></zipWith>
		<zip public="1" params="A:B" set="method" line="107" static="1"><f a="o:o0">
	<t path="stx.types._Upshot.TUpshot"><c path="zip.A"/></t>
	<t path="stx.types._Upshot.TUpshot"><c path="zip.B"/></t>
	<t path="stx.types._Upshot.TUpshot"><e path="stx.types.Tuple2">
	<c path="zip.A"/>
	<c path="zip.B"/>
</e></t>
</f></zip>
		<isFailure public="1" params="A" set="method" line="110" static="1"><f a="o">
	<t path="stx.types._Upshot.TUpshot"><c path="isFailure.A"/></t>
	<x path="Bool"/>
</f></isFailure>
		<isSuccess public="1" params="A" set="method" line="116" static="1"><f a="o">
	<t path="stx.types._Upshot.TUpshot"><c path="isSuccess.A"/></t>
	<x path="Bool"/>
</f></isSuccess>
		<toChunk public="1" params="A" set="method" line="122" static="1"><f a="oc">
	<x path="stx.Upshot"><c path="toChunk.A"/></x>
	<e path="stx.Chunk"><c path="toChunk.A"/></e>
</f></toChunk>
		<onSuccess public="1" params="A" set="method" line="128" static="1"><f a="oc:fn">
	<x path="stx.Upshot"><c path="onSuccess.A"/></x>
	<f a="">
		<c path="onSuccess.A"/>
		<x path="Void"/>
	</f>
	<x path="stx.Upshot"><c path="onSuccess.A"/></x>
</f></onSuccess>
		<onFailure public="1" params="A" set="method" line="135" static="1"><f a="oc:fn">
	<x path="stx.Upshot"><c path="onFailure.A"/></x>
	<f a="">
		<c path="tink.core.Error"/>
		<x path="Void"/>
	</f>
	<x path="stx.Upshot"><c path="onFailure.A"/></x>
</f></onFailure>
	</class>
	<class path="stx.ValueTypes" params="" file="src/main/haxe/stx/ValueTypes.hx">
		<leaf public="1" get="inline" set="null" line="25" static="1">
			<f a="v">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<meta>
				<m n="params">
					<e>"A typed object"</e>
					<e>"The objects typename"</e>
				</m>
				<m n=":thx"/>
			</meta>
			<haxe_doc>Returns the local Class name of a `ValueType`.</haxe_doc>
		</leaf>
		<name public="1" set="method" line="31" static="1">
			<f a="v">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<meta><m n=":thx"/></meta>
			<haxe_doc>Returns the type name of any `ValueType`.</haxe_doc>
		</name>
		<pack public="1" set="method" line="47" static="1">
			<f a="v">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the package of ValueType.</haxe_doc>
		</pack>
		<resolve public="1" get="inline" set="null" line="57" static="1">
			<f a="str">
				<c path="String"/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Resolves typename to `ValueType`.</haxe_doc>
		</resolve>
		<haxe_doc>```
  using Type;
  using ValueTypes;
  
  class Test(){
    static function main(){
      v.typeof().name();
    }
  }
  ```</haxe_doc>
	</class>
	<typedef path="stx.types.Codeblock" params="" file="C:\world\prj\haxe\pointwise\src\main\haxe\stx/types/Codeblock.hx"><f a=""><x path="Void"/></f></typedef>
	<typedef path="stx.types.Eq" params="T" file="src/main/haxe/stx/types/Eq.hx"><f a=":">
	<c path="stx.types.Eq.T"/>
	<c path="stx.types.Eq.T"/>
	<x path="Bool"/>
</f></typedef>
	<enum path="stx.types.Fault" params="" file="src/main/haxe/stx/types/Fault.hx">
		<ErrorStack a="arr"><c path="Array"><c path="tink.core.Error"/></c></ErrorStack>
		<NativeError a="err"><d/></NativeError>
		<FrameworkError a="flag"><x path="EnumValue"/></FrameworkError>
		<MatchError a="is:?should">
			<c path="MatchError.S"/>
			<c path="MatchError.T"/>
		</MatchError>
		<AssertionError a="is:?should">
			<c path="AssertionError.T"/>
			<c path="AssertionError.T"/>
		</AssertionError>
		<ArgumentError a="field:e">
			<c path="String"/>
			<e path="stx.types.Fault"/>
		</ArgumentError>
		<IllegalOperationError/>
		<NullError/>
		<haxe_doc>Extensible through the use of `FrameworkError`.</haxe_doc>
	</enum>
	<typedef path="stx.types.Field" params="T" file="src/main/haxe/stx/types/Field.hx"><e path="stx.types.Tuple2">
	<c path="String"/>
	<c path="stx.types.Field.T"/>
</e></typedef>
	<typedef path="stx.types.KV" params="V" file="src/main/haxe/stx/types/KV.hx"><e path="stx.types.Tuple2">
	<c path="String"/>
	<c path="stx.types.KV.V"/>
</e></typedef>
	<typedef path="stx.types.Option" params="T" file="src/main/haxe/stx/types/Option.hx"><e path="haxe.ds.Option"><c path="stx.types.Option.T"/></e></typedef>
	<typedef path="stx.types.Ord" params="T" file="src/main/haxe/stx/types/Ord.hx"><f a=":">
	<c path="stx.types.Ord.T"/>
	<c path="stx.types.Ord.T"/>
	<x path="Int"/>
</f></typedef>
	<typedef path="stx.types.Thunk" params="T" file="src/main/haxe/stx/types/Thunk.hx"><f a=""><c path="stx.types.Thunk.T"/></f></typedef>
	<enum path="stx.types.Tuple1" params="T1" file="src/main/haxe/stx/types/Tuple1.hx"><tuple1 a="t1"><c path="stx.types.Tuple1.T1"/></tuple1></enum>
	<enum path="stx.types.Tuple2" params="T1:T2" file="src/main/haxe/stx/types/Tuple2.hx"><tuple2 a="t1:t2">
	<c path="stx.types.Tuple2.T1"/>
	<c path="stx.types.Tuple2.T2"/>
</tuple2></enum>
	<enum path="stx.types.Tuple3" params="T1:T2:T3" file="src/main/haxe/stx/types/Tuple3.hx"><tuple3 a="t1:t2:t3">
	<c path="stx.types.Tuple3.T1"/>
	<c path="stx.types.Tuple3.T2"/>
	<c path="stx.types.Tuple3.T3"/>
</tuple3></enum>
	<enum path="stx.types.Tuple4" params="T1:T2:T3:T4" file="src/main/haxe/stx/types/Tuple4.hx"><tuple4 a="t1:t2:t3:t4">
	<c path="stx.types.Tuple4.T1"/>
	<c path="stx.types.Tuple4.T2"/>
	<c path="stx.types.Tuple4.T3"/>
	<c path="stx.types.Tuple4.T4"/>
</tuple4></enum>
	<enum path="stx.types.Tuple5" params="T1:T2:T3:T4:T5" file="src/main/haxe/stx/types/Tuple5.hx"><tuple5 a="t1:t2:t3:t4:t5">
	<c path="stx.types.Tuple5.T1"/>
	<c path="stx.types.Tuple5.T2"/>
	<c path="stx.types.Tuple5.T3"/>
	<c path="stx.types.Tuple5.T4"/>
	<c path="stx.types.Tuple5.T5"/>
</tuple5></enum>
	<typedef path="stx.types.Upshot" params="T" file="src/main/haxe/stx/types/Upshot.hx"><e path="tink.core.Outcome">
	<c path="stx.types.Upshot.T"/>
	<c path="tink.core.Error"/>
</e></typedef>
	<abstract path="tink.core.Callback" params="T" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx">
		<from>
			<icast><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></icast>
			<icast field="fromNiladic"><f a=""><x path="Void"/></f></icast>
			<icast field="fromMany"><c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c></icast>
		</from>
		<this><t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t></this>
		<impl><class path="tink.core._Callback.Callback_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<_new get="inline" set="null" line="7" static="1">
		<f a="f">
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<invoke public="1" set="method" line="10" static="1">
		<f a="this:data">
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			<c path="tink.core.Callback.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invoke>
	<fromNiladic params="A" get="inline" set="null" line="13" static="1">
		<f a="f">
			<f a=""><x path="Void"/></f>
			<x path="tink.core.Callback"><c path="fromNiladic.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromNiladic>
	<fromMany params="A" set="method" line="16" static="1">
		<f a="callbacks">
			<c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c>
			<x path="tink.core.Callback"><c path="fromMany.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromMany>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.Callback_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<_new get="inline" set="null" line="7" static="1">
			<f a="f">
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<invoke public="1" set="method" line="10" static="1">
			<f a="this:data">
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
				<c path="tink.core.Callback.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invoke>
		<fromNiladic params="A" get="inline" set="null" line="13" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="tink.core.Callback"><c path="fromNiladic.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromNiladic>
		<fromMany params="A" set="method" line="16" static="1">
			<f a="callbacks">
				<c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c>
				<x path="tink.core.Callback"><c path="fromMany.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromMany>
	</class>
	<abstract path="tink.core.CallbackLink" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" module="tink.core.Callback">
		<from>
			<icast field="fromFunction"><f a=""><x path="Void"/></f></icast>
			<icast field="fromMany"><c path="Array"><x path="tink.core.CallbackLink"/></c></icast>
		</from>
		<this><t path="Null"><f a=""><x path="Void"/></f></t></this>
		<to><icast field="toCallback"><x path="tink.core.Callback"><c path="toCallback.A"/></x></icast></to>
		<impl><class path="tink.core._Callback.CallbackLink_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<_new get="inline" set="null" line="25" static="1">
		<f a="link">
			<f a=""><x path="Void"/></f>
			<t path="Null"><f a=""><x path="Void"/></f></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<dissolve public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<t path="Null"><f a=""><x path="Void"/></f></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</dissolve>
	<toCallback params="A" set="method" line="31" static="1">
		<f a="this">
			<t path="Null"><f a=""><x path="Void"/></f></t>
			<x path="tink.core.Callback"><c path="toCallback.A"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCallback>
	<fromFunction get="inline" set="null" line="34" static="1">
		<f a="f">
			<f a=""><x path="Void"/></f>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction>
	<fromMany set="method" line="37" static="1">
		<f a="callbacks">
			<c path="Array"><x path="tink.core.CallbackLink"/></c>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromMany>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.CallbackLink_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<_new get="inline" set="null" line="25" static="1">
			<f a="link">
				<f a=""><x path="Void"/></f>
				<t path="Null"><f a=""><x path="Void"/></f></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<dissolve public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<t path="Null"><f a=""><x path="Void"/></f></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</dissolve>
		<toCallback params="A" set="method" line="31" static="1">
			<f a="this">
				<t path="Null"><f a=""><x path="Void"/></f></t>
				<x path="tink.core.Callback"><c path="toCallback.A"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCallback>
		<fromFunction get="inline" set="null" line="34" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction>
		<fromMany set="method" line="37" static="1">
			<f a="callbacks">
				<c path="Array"><x path="tink.core.CallbackLink"/></c>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromMany>
	</class>
	<class path="tink.core._Callback.Cell" params="T" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<pool line="52" static="1"><c path="Array"><c path="tink.core._Callback.Cell"><d/></c></c></pool>
		<get public="1" params="A" get="inline" set="null" line="54" static="1"><f a=""><c path="tink.core._Callback.Cell"><c path="get.A"/></c></f></get>
		<cb public="1"><x path="tink.core.Callback"><c path="tink.core._Callback.Cell.T"/></x></cb>
		<free public="1" get="inline" set="null" line="47"><f a=""><x path="Void"/></f></free>
		<new set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="tink.core.CallbackList" params="T" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" module="tink.core.Callback">
		<this><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></this>
		<impl><class path="tink.core._Callback.CallbackList_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a=""><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="67" static="1">
		<f a="this">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<add public="1" set="method" line="70" static="1">
		<f a="this:cb">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="tink.core.Callback"><c path="tink.core.CallbackList.T"/></x>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<invoke public="1" set="method" line="81" static="1">
		<f a="this:data">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<c path="tink.core.CallbackList.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invoke>
	<clear public="1" set="method" line="86" static="1">
		<f a="this">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clear>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.CallbackList_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a=""><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="67" static="1">
			<f a="this">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<add public="1" set="method" line="70" static="1">
			<f a="this:cb">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="tink.core.Callback"><c path="tink.core.CallbackList.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<invoke public="1" set="method" line="81" static="1">
			<f a="this:data">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<c path="tink.core.CallbackList.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invoke>
		<clear public="1" set="method" line="86" static="1">
			<f a="this">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clear>
	</class>
	<enum path="tink.core.Either" params="A:B" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Either.hx">
		<Left a="a"><c path="tink.core.Either.A"/></Left>
		<Right a="b"><c path="tink.core.Either.B"/></Right>
	</enum>
	<typedef path="tink.core.Pos" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Error.hx" module="tink.core.Error"><t path="haxe.PosInfos"/></typedef>
	<class path="tink.core.Error" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Error.hx">
		<withData public="1" set="method" line="43" static="1"><f a="message:data:?pos" v="::null">
	<c path="String"/>
	<d/>
	<t path="tink.core.Pos"/>
	<c path="tink.core.Error"/>
</f></withData>
		<message public="1" set="null"><c path="String"/></message>
		<data public="1" set="null"><d/></data>
		<pos public="1" set="null"><t path="Null"><t path="tink.core.Pos"/></t></pos>
		<printPos set="method" line="20"><f a=""><c path="String"/></f></printPos>
		<toString public="1" set="method" line="28">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<throwSelf public="1" set="method" line="35">
			<f a=""><d/></f>
			<meta><m n=":keep"/></meta>
		</throwSelf>
		<new public="1" set="method" line="16"><f a="message:?pos" v=":null">
	<c path="String"/>
	<t path="tink.core.Pos"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="tink.core.Outcome" params="Data:Failure" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Outcome.hx">
		<Success a="data"><c path="tink.core.Outcome.Data"/></Success>
		<Failure a="failure"><c path="tink.core.Outcome.Failure"/></Failure>
	</enum>
	<class path="tink.core.OutcomeTools" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Outcome.hx" module="tink.core.Outcome">
		<sure public="1" params="D:F" set="method" line="12" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="sure.D"/>
		<c path="sure.F"/>
	</e>
	<c path="sure.D"/>
</f></sure>
		<toOption public="1" params="D:F" set="method" line="24" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="toOption.D"/>
		<c path="toOption.F"/>
	</e>
	<e path="haxe.ds.Option"><c path="toOption.D"/></e>
</f></toOption>
		<toOutcome public="1" params="D" set="method" line="31" static="1"><f a="option:?pos" v=":null">
	<e path="haxe.ds.Option"><c path="toOutcome.D"/></e>
	<t path="haxe.PosInfos"/>
	<e path="tink.core.Outcome">
		<c path="toOutcome.D"/>
		<c path="String"/>
	</e>
</f></toOutcome>
		<orUse public="1" params="D:F" get="inline" set="null" line="41" static="1"><f a="outcome:fallback">
	<e path="tink.core.Outcome">
		<c path="orUse.D"/>
		<c path="orUse.F"/>
	</e>
	<c path="orUse.D"/>
	<c path="orUse.D"/>
</f></orUse>
		<orTry public="1" params="D:F" get="inline" set="null" line="48" static="1"><f a="outcome:fallback">
	<e path="tink.core.Outcome">
		<c path="orTry.D"/>
		<c path="orTry.F"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="orTry.D"/>
		<c path="orTry.F"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="orTry.D"/>
		<c path="orTry.F"/>
	</e>
</f></orTry>
		<equals public="1" params="D:F" get="inline" set="null" line="55" static="1"><f a="outcome:to">
	<e path="tink.core.Outcome">
		<c path="equals.D"/>
		<c path="equals.F"/>
	</e>
	<c path="equals.D"/>
	<x path="Bool"/>
</f></equals>
		<map public="1" params="A:B:F" get="inline" set="null" line="62" static="1"><f a="outcome:transform">
	<e path="tink.core.Outcome">
		<c path="map.A"/>
		<c path="map.F"/>
	</e>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<e path="tink.core.Outcome">
		<c path="map.B"/>
		<c path="map.F"/>
	</e>
</f></map>
		<isSuccess public="1" params="D:F" get="inline" set="null" line="71" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="isSuccess.D"/>
		<c path="isSuccess.F"/>
	</e>
	<x path="Bool"/>
</f></isSuccess>
		<flatMap public="1" params="DIn:FIn:DOut:FOut" set="method" line="78" static="1"><f a="o:mapper">
	<e path="tink.core.Outcome">
		<c path="flatMap.DIn"/>
		<c path="flatMap.FIn"/>
	</e>
	<x path="tink.core._Outcome.OutcomeMap">
		<c path="flatMap.DIn"/>
		<c path="flatMap.FIn"/>
		<c path="flatMap.DOut"/>
		<c path="flatMap.FOut"/>
	</x>
	<e path="tink.core.Outcome">
		<c path="flatMap.DOut"/>
		<c path="flatMap.FOut"/>
	</e>
</f></flatMap>
	</class>
	<abstract path="tink.core._Outcome.OutcomeMap" params="DIn:FIn:DOut:FOut" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
		<from>
			<icast field="withSameError"><f a="">
	<c path="withSameError.In"/>
	<e path="tink.core.Outcome">
		<c path="withSameError.Out"/>
		<c path="withSameError.Error"/>
	</e>
</f></icast>
			<icast field="withEitherError"><f a="">
	<c path="withEitherError.DIn"/>
	<e path="tink.core.Outcome">
		<c path="withEitherError.DOut"/>
		<c path="withEitherError.FOut"/>
	</e>
</f></icast>
		</from>
		<this><a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DIn"/>
		<c path="tink.core._Outcome.OutcomeMap.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DOut"/>
		<c path="tink.core._Outcome.OutcomeMap.FOut"/>
	</e>
</f></f></a></this>
		<impl><class path="tink.core._Outcome.OutcomeMap_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
	<_new set="method" line="84" static="1">
		<f a="f">
			<f a="">
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMap.DIn"/>
					<c path="tink.core._Outcome.OutcomeMap.FIn"/>
				</e>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMap.DOut"/>
					<c path="tink.core._Outcome.OutcomeMap.FOut"/>
				</e>
			</f>
			<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DIn"/>
		<c path="tink.core._Outcome.OutcomeMap.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DOut"/>
		<c path="tink.core._Outcome.OutcomeMap.FOut"/>
	</e>
</f></f></a>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<apply public="1" set="method" line="85" static="1">
		<f a="this:o">
			<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DIn"/>
		<c path="tink.core._Outcome.OutcomeMap.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DOut"/>
		<c path="tink.core._Outcome.OutcomeMap.FOut"/>
	</e>
</f></f></a>
			<e path="tink.core.Outcome">
				<c path="tink.core._Outcome.OutcomeMap.DIn"/>
				<c path="tink.core._Outcome.OutcomeMap.FIn"/>
			</e>
			<e path="tink.core.Outcome">
				<c path="tink.core._Outcome.OutcomeMap.DOut"/>
				<c path="tink.core._Outcome.OutcomeMap.FOut"/>
			</e>
		</f>
		<meta><m n=":impl"/></meta>
	</apply>
	<withSameError params="In:Out:Error" set="method" line="88" static="1">
		<f a="f">
			<f a="">
				<c path="withSameError.In"/>
				<e path="tink.core.Outcome">
					<c path="withSameError.Out"/>
					<c path="withSameError.Error"/>
				</e>
			</f>
			<x path="tink.core._Outcome.OutcomeMap">
				<c path="withSameError.In"/>
				<c path="withSameError.Error"/>
				<c path="withSameError.Out"/>
				<c path="withSameError.Error"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</withSameError>
	<withEitherError params="DIn:FIn:DOut:FOut" set="method" line="97" static="1">
		<f a="f">
			<f a="">
				<c path="withEitherError.DIn"/>
				<e path="tink.core.Outcome">
					<c path="withEitherError.DOut"/>
					<c path="withEitherError.FOut"/>
				</e>
			</f>
			<x path="tink.core._Outcome.OutcomeMap">
				<c path="withEitherError.DIn"/>
				<c path="withEitherError.FIn"/>
				<c path="withEitherError.DOut"/>
				<e path="tink.core.Either">
					<c path="withEitherError.FIn"/>
					<c path="withEitherError.FOut"/>
				</e>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</withEitherError>
</class></impl>
	</abstract>
	<class path="tink.core._Outcome.OutcomeMap_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
		<_new set="method" line="84" static="1">
			<f a="f">
				<f a="">
					<e path="tink.core.Outcome">
						<c path="tink.core._Outcome.OutcomeMap.DIn"/>
						<c path="tink.core._Outcome.OutcomeMap.FIn"/>
					</e>
					<e path="tink.core.Outcome">
						<c path="tink.core._Outcome.OutcomeMap.DOut"/>
						<c path="tink.core._Outcome.OutcomeMap.FOut"/>
					</e>
				</f>
				<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DIn"/>
		<c path="tink.core._Outcome.OutcomeMap.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DOut"/>
		<c path="tink.core._Outcome.OutcomeMap.FOut"/>
	</e>
</f></f></a>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<apply public="1" set="method" line="85" static="1">
			<f a="this:o">
				<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DIn"/>
		<c path="tink.core._Outcome.OutcomeMap.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMap.DOut"/>
		<c path="tink.core._Outcome.OutcomeMap.FOut"/>
	</e>
</f></f></a>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMap.DIn"/>
					<c path="tink.core._Outcome.OutcomeMap.FIn"/>
				</e>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMap.DOut"/>
					<c path="tink.core._Outcome.OutcomeMap.FOut"/>
				</e>
			</f>
			<meta><m n=":impl"/></meta>
		</apply>
		<withSameError params="In:Out:Error" set="method" line="88" static="1">
			<f a="f">
				<f a="">
					<c path="withSameError.In"/>
					<e path="tink.core.Outcome">
						<c path="withSameError.Out"/>
						<c path="withSameError.Error"/>
					</e>
				</f>
				<x path="tink.core._Outcome.OutcomeMap">
					<c path="withSameError.In"/>
					<c path="withSameError.Error"/>
					<c path="withSameError.Out"/>
					<c path="withSameError.Error"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</withSameError>
		<withEitherError params="DIn:FIn:DOut:FOut" set="method" line="97" static="1">
			<f a="f">
				<f a="">
					<c path="withEitherError.DIn"/>
					<e path="tink.core.Outcome">
						<c path="withEitherError.DOut"/>
						<c path="withEitherError.FOut"/>
					</e>
				</f>
				<x path="tink.core._Outcome.OutcomeMap">
					<c path="withEitherError.DIn"/>
					<c path="withEitherError.FIn"/>
					<c path="withEitherError.DOut"/>
					<e path="tink.core.Either">
						<c path="withEitherError.FIn"/>
						<c path="withEitherError.FOut"/>
					</e>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</withEitherError>
	</class>
	<abstract path="tink.core.Pair" params="A:B" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx">
		<this><x path="tink.core.MPair">
	<c path="tink.core.Pair.A"/>
	<c path="tink.core.Pair.B"/>
</x></this>
		<to><icast field="toBool"><x path="Bool"/></icast></to>
		<impl><class path="tink.core._Pair.Pair_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
	<a public="1" get="accessor" set="null" static="1">
		<c path="tink.core.Pair.A"/>
		<meta><m n=":impl"/></meta>
	</a>
	<b public="1" get="accessor" set="null" static="1">
		<c path="tink.core.Pair.B"/>
		<meta><m n=":impl"/></meta>
	</b>
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="a:b">
			<c path="tink.core.Pair.A"/>
			<c path="tink.core.Pair.B"/>
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_a get="inline" set="null" line="10" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<c path="tink.core.Pair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_a>
	<get_b get="inline" set="null" line="11" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<c path="tink.core.Pair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_b>
	<toBool get="inline" set="null" line="13" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toBool>
	<isNil public="1" set="method" line="16" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</isNil>
	<nil public="1" params="A:B" set="method" line="19" static="1"><f a=""><x path="tink.core.Pair">
	<c path="nil.A"/>
	<c path="nil.B"/>
</x></f></nil>
</class></impl>
	</abstract>
	<class path="tink.core._Pair.Pair_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
		<a public="1" get="accessor" set="null" static="1">
			<c path="tink.core.Pair.A"/>
			<meta><m n=":impl"/></meta>
		</a>
		<b public="1" get="accessor" set="null" static="1">
			<c path="tink.core.Pair.B"/>
			<meta><m n=":impl"/></meta>
		</b>
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="a:b">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_a get="inline" set="null" line="10" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<c path="tink.core.Pair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_a>
		<get_b get="inline" set="null" line="11" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<c path="tink.core.Pair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_b>
		<toBool get="inline" set="null" line="13" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toBool>
		<isNil public="1" set="method" line="16" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</isNil>
		<nil public="1" params="A:B" set="method" line="19" static="1"><f a=""><x path="tink.core.Pair">
	<c path="nil.A"/>
	<c path="nil.B"/>
</x></f></nil>
	</class>
	<class path="tink.core._Pair.Data" params="A:B" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
		<a public="1"><c path="tink.core._Pair.Data.A"/></a>
		<b public="1"><c path="tink.core._Pair.Data.B"/></b>
		<new public="1" set="method" line="33"><f a="a:b">
	<c path="tink.core._Pair.Data.A"/>
	<c path="tink.core._Pair.Data.B"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="tink.core.MPair" params="A:B" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" module="tink.core.Pair">
		<this><c path="tink.core._Pair.Data">
	<c path="tink.core.MPair.A"/>
	<c path="tink.core.MPair.B"/>
</c></this>
		<impl><class path="tink.core._Pair.MPair_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
	<a public="1" get="accessor" set="accessor" static="1">
		<c path="tink.core.MPair.A"/>
		<meta><m n=":impl"/></meta>
	</a>
	<b public="1" get="accessor" set="accessor" static="1">
		<c path="tink.core.MPair.B"/>
		<meta><m n=":impl"/></meta>
	</b>
	<_new public="1" get="inline" set="null" line="44" static="1">
		<f a="a:b">
			<c path="tink.core.MPair.A"/>
			<c path="tink.core.MPair.B"/>
			<c path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</c>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_a get="inline" set="null" line="53" static="1">
		<f a="this">
			<c path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</c>
			<c path="tink.core.MPair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_a>
	<get_b get="inline" set="null" line="56" static="1">
		<f a="this">
			<c path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</c>
			<c path="tink.core.MPair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_b>
	<set_a get="inline" set="null" line="59" static="1">
		<f a="this:v">
			<c path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</c>
			<c path="tink.core.MPair.A"/>
			<c path="tink.core.MPair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_a>
	<set_b get="inline" set="null" line="62" static="1">
		<f a="this:v">
			<c path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</c>
			<c path="tink.core.MPair.B"/>
			<c path="tink.core.MPair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_b>
</class></impl>
	</abstract>
	<class path="tink.core._Pair.MPair_Impl_" params="" file="c:\world\prj\haxe\lib/tink_core/1,0,0-rc,2/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
		<a public="1" get="accessor" set="accessor" static="1">
			<c path="tink.core.MPair.A"/>
			<meta><m n=":impl"/></meta>
		</a>
		<b public="1" get="accessor" set="accessor" static="1">
			<c path="tink.core.MPair.B"/>
			<meta><m n=":impl"/></meta>
		</b>
		<_new public="1" get="inline" set="null" line="44" static="1">
			<f a="a:b">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
				<c path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</c>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_a get="inline" set="null" line="53" static="1">
			<f a="this">
				<c path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</c>
				<c path="tink.core.MPair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_a>
		<get_b get="inline" set="null" line="56" static="1">
			<f a="this">
				<c path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</c>
				<c path="tink.core.MPair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_b>
		<set_a get="inline" set="null" line="59" static="1">
			<f a="this:v">
				<c path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</c>
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_a>
		<set_b get="inline" set="null" line="62" static="1">
			<f a="this:v">
				<c path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</c>
				<c path="tink.core.MPair.B"/>
				<c path="tink.core.MPair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_b>
	</class>
</haxe>